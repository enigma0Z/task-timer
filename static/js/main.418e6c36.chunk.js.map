{"version":3,"sources":["components/label-slider/index.tsx","data/countdown/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LabelSlider","withStyles","theme","createStyles","sliderSpacing","paddingLeft","paddingRight","props","state","value","handleOnChange","bind","event","newValue","this","setState","onChange","classes","variant","id","gutterBottom","label","labelSuffix","className","Slider","marks","step","min","max","getAriaValueText","valueLabelDisplay","aria-labelledby","Component","Countdown","name","next","notification","timer","defaultCountdowns","setNext","App","root","flexGrow","fillWidth","width","menuButton","marginRight","spacing","title","gridContainer","padding","paperContainer","sliderBox","paddingTop","workLength","breakLength","running","secondsLeft","currentCountdown","countdowns","getButtonText","handleStartStopOnClick","updateSecondsLeft","showNotification","handleNotificationClick","timerSeconds","hours","Math","floor","minutes","seconds","returnStr","push","join","undefined","endTime","newSecondsLeft","Date","now","setUpdateTimer","console","log","getNextCountdown","show","clearTimeout","setTimeout","message","supported","body","newEndTime","countdown","window","focus","close","target","tag","map","Grid","item","onRef","ref","icon","onClick","thisCountdown","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","container","xs","lg","Paper","direction","TextField","renderSliders","getTimerText","defaultProps","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.418e6c36.chunk.js","sourcesContent":["import { createStyles, Slider, Theme, WithStyles, withStyles } from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography/Typography\";\nimport React, { Component } from \"react\";\n\nconst styles = (theme: Theme) => createStyles({\n    sliderSpacing: {\n        paddingLeft: 8,\n        paddingRight: 8,\n    }\n})\n\ninterface LabelSliderProps extends WithStyles<typeof styles> {\n    label: string,\n    labelSuffix: string,\n    value: number,\n    step: number,\n    min: number,\n    max: number,\n    onChange: Function\n}\n\ninterface LabelSliderState {\n    value: number\n}\n\nexport const LabelSlider = withStyles(styles)(class LabelSliderComponent extends Component<LabelSliderProps, LabelSliderState> {\n    constructor(props: LabelSliderProps) {\n        super(props)\n        this.state = {\n            value: this.props.value\n        }\n\n        this.handleOnChange = this.handleOnChange.bind(this)\n    }\n\n    handleOnChange(event: any, newValue: number | number[]) {\n        if (typeof newValue === 'number') {\n            this.setState({\n                value: newValue\n            })\n        } else if (typeof newValue === 'object') {\n            this.setState({\n                value: newValue[0]\n            })\n        }\n\n        this.props.onChange(this.state.value)\n    };\n\n\n    render() {\n        const { classes } = this.props\n        return(\n            <div>\n                <Typography variant=\"caption\" id='break-length' gutterBottom>{this.props.label} ({this.state.value}{this.props.labelSuffix})</Typography>\n                <div className={classes.sliderSpacing}>\n                    <Slider\n                        marks\n                        value={this.state.value}\n                        step={this.props.step}\n                        min={this.props.min}\n                        max={this.props.max}\n                        onChange={this.handleOnChange}\n                        getAriaValueText={(value: number) => {return `${value}m`}}\n                        valueLabelDisplay=\"off\"\n                        aria-labelledby=\"break-length\"\n                    />\n                </div>\n            </div>\n        )\n    }\n});\n","export class Countdown {\n    constructor(\n        public name: string,\n        public min: number,\n        public max: number,\n        public value: number,\n        public next?: Countdown,\n        public notification?: any,\n    ) { }\n\n    setNext(timer: Countdown) {\n        this.next = timer\n    }\n}\n","import React, { Component } from 'react';\n\nimport { AppBar, createStyles, Grid, IconButton, Paper, TextField, Theme, Toolbar, Typography, WithStyles, withStyles } from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Button from '@material-ui/core/Button/Button';\n\n// @ts-ignore\nimport ReactNotifications from 'react-browser-notifications';\n\nimport './App.css';\nimport { LabelSlider } from './components/label-slider';\nimport { Countdown } from './data/countdown'\n\nconst styles = (theme: Theme) => createStyles({\n    root: {\n        flexGrow: 1,\n    },\n\n    fillWidth: {\n        width: '100%',\n    },\n\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n\n    title: {\n        flexGrow: 1,\n    },\n\n    gridContainer: {\n        flexGrow: 1,\n        padding: 8,\n    },\n\n    paperContainer: {\n        padding: 8\n    },\n\n    sliderBox: {\n        paddingTop: 16\n    }\n});\n\ninterface AppProps extends WithStyles<typeof styles> {\n    countdowns: Countdown[]\n}\n\ninterface AppState {\n    workLength: number,\n    breakLength: number,\n    running: boolean,\n    secondsLeft: number,\n    currentCountdown: Countdown,\n    endTime?: number,\n}\n\nconst defaultCountdowns: Countdown[] = [\n    new Countdown('Work', 5, 90, 50),\n    new Countdown('Break', 5, 15, 10),\n]\n\nconst APP_TITLE: string = 'Task Timer'\n\ndefaultCountdowns[0].setNext(defaultCountdowns[1])\ndefaultCountdowns[1].setNext(defaultCountdowns[0])\n\nconst App = withStyles(styles)(class AppComponent extends Component<AppProps, AppState> {\n    static defaultProps = {\n        countdowns: defaultCountdowns\n    }\n\n    private timer: any;\n    public notification: any;\n\n    constructor(props: AppProps) {\n        super(props)\n        this.state = {\n            workLength: 50,\n            breakLength: 10,\n            running: false,\n            secondsLeft: 0,\n            currentCountdown: this.props.countdowns[0]\n        }\n\n        this.getButtonText = this.getButtonText.bind(this)\n        this.handleStartStopOnClick = this.handleStartStopOnClick.bind(this)\n        this.updateSecondsLeft = this.updateSecondsLeft.bind(this)\n        this.showNotification = this.showNotification.bind(this)\n        this.handleNotificationClick = this.handleNotificationClick.bind(this)\n    }\n\n    getTimerText(timerSeconds: number): string {\n        let hours = Math.floor(timerSeconds / 60 / 60)\n        let minutes = Math.floor((timerSeconds - (hours * 60 * 60)) / 60)\n        let seconds = Math.floor(timerSeconds - (hours * 60 * 60) - (minutes * 60))\n\n        let returnStr: string[] = []\n\n        if (hours > 0) {\n            returnStr.push(`${hours}h`)\n        }\n\n        if (minutes > 0) {\n            returnStr.push(`${minutes}m`)\n        }\n\n        returnStr.push(`${seconds}s`)\n\n        return returnStr.join(' ')\n    }\n\n    getButtonText() {\n        if (this.state.running) {\n            return \"Stop\"\n        } else {\n            return \"Start\"\n        }\n    }\n\n    getNextCountdown(): Countdown {\n        if (this.state.currentCountdown.next !== undefined) {\n            return this.state.currentCountdown.next\n        }\n\n        return this.state.currentCountdown\n    }\n\n    updateSecondsLeft() {\n        if (this.state.endTime !== undefined) {\n            let newSecondsLeft = (this.state.endTime - Date.now()) / 1000\n            if (this.state.running && newSecondsLeft > 0) {\n                this.setState({\n                    secondsLeft: Math.floor(newSecondsLeft)\n                })\n\n                this.setUpdateTimer()\n            } else {\n                console.log('Stopping, next timer:', this.getNextCountdown())\n                this.state.currentCountdown.notification.show()\n                this.setState({\n                    running: false,\n                    secondsLeft: 0,\n                    currentCountdown: this.getNextCountdown()\n                })\n\n                clearTimeout(this.timer)\n            }\n        } else {\n            return 0\n        }\n    }\n\n    setUpdateTimer() {\n        this.timer = setTimeout(() => { this.updateSecondsLeft() }, 1000)\n    }\n\n    clearUpdateTimer() {\n        clearTimeout(this.timer)\n    }\n\n    showNotification(message: string) {\n        // If the Notifications API is supported by the browser\n        // then show the notification\n        if(this.notification.supported()) {\n            this.notification.body = message;\n            this.notification.show();\n        }\n    }\n\n    handleStartStopOnClick() {\n        if (!this.state.running) {\n            this.setState({\n                running: true\n            })\n\n            let now = Date.now()\n            let newEndTime = now + (this.state.currentCountdown.value * 60 * 1000)\n            let newSecondsLeft = this.state.currentCountdown.value * 60\n\n            this.setState({\n                endTime: newEndTime,\n                secondsLeft: newSecondsLeft\n            })\n\n            this.setUpdateTimer()\n        } else {\n            this.setState({\n                running: false,\n                secondsLeft: 0\n            })\n        }\n    }\n\n    handleNotificationClick(event: any, countdown: Countdown) {\n        window.focus()\n        countdown.notification.close(event.target.tag);\n    }\n\n    renderSliders() {\n        return this.props.countdowns.map((countdown) =>\n            <Grid item key={countdown.name}>\n                <ReactNotifications\n                    // @ts-ignore\n                    onRef={ref => (countdown.notification = ref)}\n                    title={APP_TITLE}\n                    body={`${countdown.name} completed!`}\n                    icon=\"icon.png\"\n                    tag=\"task-timer\"\n                    // @ts-ignore\n                    onClick={event => this.handleNotificationClick(event, countdown)}\n                />\n                <LabelSlider\n                    label={countdown.name}\n                    labelSuffix=\"m\"\n                    value={countdown.value}\n                    step={1}\n                    min={countdown.min}\n                    max={countdown.max}\n                    onChange={(value: number, thisCountdown: Countdown = countdown) => {\n                        thisCountdown.value = value\n                    }}\n                />\n            </Grid>\n        )\n    }\n\n    render() {\n\n        const classes = this.props.classes\n\n        return (\n            <div className={classes.root}>\n                <AppBar position=\"static\">\n                    <Toolbar>\n                        <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n                            <MenuIcon />\n                        </IconButton>\n                        <Typography variant=\"h6\" className={classes.title}>\n                            Start a new task\n                        </Typography>\n                        <Button color=\"inherit\">Test</Button>\n                    </Toolbar>\n                </AppBar>\n                <Grid container className={classes.gridContainer} spacing={2}>\n                    <Grid item xs={12} lg={2}> <Paper className={classes.paperContainer}>\n                        <Grid container direction=\"column\" spacing={2}>\n                            <Grid item>\n                                <Typography variant=\"h5\">\n                                    Timer parameters\n                                </Typography>\n                            </Grid>\n                            <Grid item>\n                                <TextField label=\"Task Name\" /><br />\n                            </Grid>\n                            {this.renderSliders()}\n                            <Grid item>\n                                <Button variant=\"contained\" className={classes.fillWidth} onClick={this.handleStartStopOnClick}>\n                                    {this.getButtonText()}\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    </Paper> </Grid>\n                    <Grid item xs>\n                        <Paper className={classes.paperContainer}>\n                            <Typography variant=\"h5\">{this.state.running ? \"Running\" : \"On deck\"}: {this.state.currentCountdown.name}</Typography>\n                            <Typography variant=\"h6\">Time left {this.getTimerText(this.state.secondsLeft)}</Typography>\n                            <Typography variant=\"caption\">Up next: {this.getNextCountdown().name}</Typography>\n                        </Paper>\n                    </Grid>\n                </Grid>\n            </div>\n        );\n    }\n});\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}