{"version":3,"sources":["data/Subscribable.ts","services/Notification.ts","components/ConfirmationModal.tsx","data/Countdown.ts","services/Countdown.ts","data/History.ts","services/History.ts","components/Sidebar.tsx","data/format/Time.ts","widgets/TwoText.tsx","components/History.tsx","widgets/LabelSlider.tsx","components/Countdown.tsx","App.tsx","index.tsx"],"names":["Subscribable","subscribers","Map","id","callback","this","set","delete","forEach","value","key","map","NotificationService","_desktopNotificationSupport","window","_instance","desktopNotificationSupport","Notification","permission","requestPermission","then","updateSubscribers","title","options","onclick","notification","event","close","focus","ConfirmationModal","withStyles","theme","createStyles","modal","display","alignItems","justifyContent","padding","border","classes","props","Modal","open","onClose","closeAfterTransition","className","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","Card","Grid","container","direction","alignContent","item","xs","Typography","variant","subtitle","Button","color","onClick","onConfirm","buttonText","Component","defaultProps","Countdown","countdown","_startTime","undefined","_endTime","_running","_paused","_name","_min","_max","_value","_intervalMs","startTime","endTime","running","paused","name","min","max","intervalMs","Date","now","update","secondsLeft","setTimeout","clearTimeout","Math","floor","CountdownCollection","collection","_items","_currentIndex","items","addItem","currentIndex","length","nextIndex","countdownObject","subscribe","constructor","push","index","a","b","lower","higher","RangeError","slice","filter","DEFAULT_COUNTDOWNS","CountdownService","_countdowns","load","countdowns","localStorage","getItem","JSON","parse","legacyCountdowns","currentCountdown","parseInt","save","console","log","setItem","stringify","HistoryItem","start","end","HistoryItemCollection","getFullYear","getMonth","getDay","HistoryService","_history","history","notificationService","instance","Sidebar","sideBar","width","footer","top","bottom","footerButton","state","notificationsEnabled","desktopNotificationEnabled","confirmResetOpen","confirmClearHistoryOpen","setState","refreshNotificationState","unsubscribe","Drawer","anchor","reset","clear","List","ListItem","button","requestDesktopNotificationPermissions","ListItemIcon","ListItemText","primary","ListItemSecondaryAction","Switch","edge","checked","inputProps","onFocus","onBlur","disabled","Divider","Box","position","process","TimeFormat","timerSeconds","hours","minutes","seconds","returnStr","join","timerMinutes","TwoText","flexDirection","flex","caption","text","HistoryList","table","minWidth","totalsGrid","flexGrow","totals","today","sort","durationMs","reduce","previous","current","spacing","height","Object","keys","Paper","TableContainer","Table","size","aria-label","TableHead","TableRow","TableCell","align","TableBody","component","scope","getHours","getMinutes","getSeconds","LabelSlider","fullWidth","centeringGrid","listItemText","sliderSpacing","verticalAlign","sliderLabelContainer","marginBottom","sliderLabel","paddingRight","editPopover","editContainer","popoverRef","label","editLabel","editMin","editMax","step","menuOpen","editing","labelError","minError","maxError","React","createRef","handleOnChange","bind","handleKeyPress","openPopover","closePopover","saveForm","cancelEdit","isNaN","newValue","onChange","onEditSave","formatCallback","m","Slider","getAriaValueText","valueLabelDisplay","aria-labelledby","IconButton","Popover","anchorEl","anchorOrigin","vertical","horizontal","transformOrigin","onEscapeKeyDown","TextField","error","margin","target","onKeyPress","getMinError","getMaxError","ref","renderNormalView","renderEditPopover","CountdownComponent","popperCardStyle","paddingLeft","backgroundColor","palette","grey","fillWidth","editingOrder","confirmDeleteOpen","confirmDeleteIndex","confirmDeleteName","warningNotificationSent","runningCountdown","handleStartStopOnClick","countdownSubscriber","stop","document","APP_TITLE_SHORT","advance","APP_TITLE","showNotification","body","elements","i","upDisabled","downDisabled","justifyItems","swapItems","labelSuffix","deleteItem","renderSliders","sm","ButtonGroup","pause","next","App","root","overflow","menuButton","marginRight","gridContainer","paperContainer","sliderBox","paddingTop","popperContentsStyle","statusStyle","marginTop","sliderRefs","selectedDate","workLength","breakLength","sidebarOpen","notificationSupport","checkSchedule","AppBar","Toolbar","md","utils","DateFnsUtils","date","minutesStep","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.75213d08.chunk.js","sourcesContent":["export abstract class Subscribable {\n    private subscribers: Map<String, (() => void)> = new Map()\n\n    public subscribe(id: string, callback: () => void) {\n        this.subscribers.set(id, callback)\n    }\n\n    public unsubscribe(id: string) {\n        this.subscribers.delete(id)\n    }\n\n    protected updateSubscribers() {\n        this.subscribers.forEach((value, key, map) => {\n            value()\n        })\n    }\n}\n","import { Subscribable } from '../data/Subscribable'\n\nexport class NotificationService extends Subscribable {\n    private static _instance: NotificationService;\n    private _desktopNotificationSupport: boolean = false\n\n    public static get instance(): NotificationService {\n        return this._instance || (this._instance = new this())\n    }\n\n    private constructor() {\n        super()\n        this._desktopNotificationSupport = 'Notification' in window\n    }\n\n    public get desktopNotificationSupport(): boolean {\n        return this._desktopNotificationSupport\n    }\n\n    public get desktopNotificationEnabled() {\n        return this.desktopNotificationSupport && Notification.permission === 'granted'\n    }\n\n    public requestDesktopNotificationPermissions() {\n        if (this.desktopNotificationSupport && Notification.permission === 'default') {\n            Notification.requestPermission()\n                .then((value) => { this.updateSubscribers() })\n        }\n    }\n\n    public showNotification(\n        title: string,\n        options: NotificationOptions,\n        onclick: (notification: Notification, event: Event) => void = (\n            notification: Notification, event: Event\n        ) => {\n            notification.close(); window.focus()\n        }\n    ) {\n        let notification = new Notification(\n            title, options\n        )\n\n        notification.onclick = (event: Event) => (onclick(notification, event))\n    }\n}\n","import { Backdrop, Button, Card, createStyles, Fade, Grid, Modal, Theme, Typography, WithStyles, withStyles } from \"@material-ui/core\"\nimport React, { Component } from \"react\"\n\nconst styles = (theme: Theme) => createStyles({\n    modal: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        padding: 8,\n        border: 'none'\n    },\n});\n\ninterface ConfirmationModalProps extends WithStyles<typeof styles> {\n    onClose: () => void\n    onConfirm: () => void\n    open: boolean\n    title: string\n    subtitle: string\n    buttonText: string\n}\n\ninterface ConfirmationModalState { }\n\nexport const ConfirmationModal = withStyles(styles)(class ConfirmationModalComponent extends Component<ConfirmationModalProps, ConfirmationModalState> {\n    static defaultProps = {\n        title: 'Are you sure?',\n        subtitle: 'This action cannot be undone',\n        buttonText: 'Continue'\n    }\n\n    render() {\n        const classes = this.props.classes\n        return (\n            <Modal\n                open={this.props.open}\n                onClose={this.props.onClose}\n                closeAfterTransition\n                className={classes.modal}\n                BackdropComponent={Backdrop}\n                BackdropProps={{\n                    timeout: 500,\n                }}\n            >\n                <Fade in={this.props.open}>\n                    <Card className={classes.modal}>\n                        <Grid container direction='column' alignItems='center' alignContent='center'>\n                            <Grid item xs>\n                                <Typography variant='h4'>{this.props.title}</Typography>\n                            </Grid>\n                            <Grid item xs>\n                                <Typography variant='subtitle1'>{this.props.subtitle}</Typography><br />\n                            </Grid>\n                            <Button\n                                color='secondary'\n                                variant='contained'\n                                onClick={this.props.onConfirm}\n                            >\n                                <Grid item xs>\n                                    {this.props.buttonText}\n                                </Grid>\n                            </Button>\n                        </Grid>\n                    </Card>\n                </Fade>\n            </Modal>\n        )\n    }\n})\n","import { Subscribable } from \"./Subscribable\";\n\nconst DEFAULT_MIN = 1\nconst DEFAULT_MAX = 90\nconst DEFAULT_INTERVAL_MS = 1000\n\nconst SHORT_TIMER = false // For debug purposes\n\nexport interface CountdownObject {\n    name?: string,\n    min?: number,\n    max?: number,\n    startTime?: any,\n    endTime?: any,\n    running?: boolean,\n    paused?: boolean\n    value?: number,\n    intervalMs?: number,\n}\n\nexport class Countdown extends Subscribable {\n    private timeout: any\n\n    private _startTime?: number = undefined;\n    private _endTime?: number = undefined;\n\n    private _running: boolean = false\n    private _paused: boolean = false\n\n    private _name: string = 'NEW'\n    private _min: number = 1\n    private _max: number = 90\n    private _value: number = 0\n    private _intervalMs: number = 1000\n\n    public constructor(countdown: CountdownObject) {\n        super()\n        this._startTime = countdown.startTime\n        this._endTime = countdown.endTime\n        this._running = countdown.running === true\n        this._paused = countdown.paused === true\n        this._name = countdown.name ? countdown.name : 'NEW'\n        this._min = countdown.min ? countdown.min : DEFAULT_MIN\n        this._max = countdown.max ? countdown.max : DEFAULT_MAX\n        this._value = countdown.value ? countdown.value : this._min\n        this._intervalMs = countdown.intervalMs ? countdown.intervalMs : DEFAULT_INTERVAL_MS\n    }\n\n    public toJSON(): CountdownObject {\n        return {\n            startTime: this.startTime,\n            endTime: this.endTime,\n            running: this.running,\n            paused: this.paused,\n            name: this.name,\n            min: this.min,\n            max: this.max,\n            value: this.value,\n            intervalMs: this.intervalMs,\n        }\n    }\n\n    public get name(): string { return this._name }\n    public set name(name: string) { this._name = name; this.updateSubscribers() }\n\n    public get running(): boolean { return this._running }\n    public get paused(): boolean { return this._paused; }\n\n    public get value(): number { return this._value }\n    public set value(value: number) { this._value = value; this.updateSubscribers() }\n\n    public get min(): number { return this._min ? this._min : DEFAULT_MIN }\n    public set min(min: number) { this._min = min; this.updateSubscribers() }\n\n    public get max(): number { return this._max ? this._max : DEFAULT_MAX }\n    public set max(max: number) { this._max = max; this.updateSubscribers() }\n\n    public get intervalMs(): number { return this._intervalMs ? this._intervalMs : DEFAULT_INTERVAL_MS }\n\n    public get startTime(): number | undefined { return this._startTime }\n    public get endTime(): number | undefined { return this._endTime }\n\n    public get secondsLeft(): number {\n        if (this.running && this.endTime) {\n            return Math.floor((this.endTime - Date.now()) / 1000)\n        } else {\n            return 0\n        }\n    }\n\n    start() {\n        this._running = true\n        this._startTime = Date.now()\n        if (SHORT_TIMER) {\n            this._endTime = this._startTime + 2 * 1000\n        } else {\n            this._endTime = this._startTime + (this.value * 60 * 1000)\n        }\n\n        this.update()\n    }\n\n    stop() {\n        this._running = false\n        this._paused = false\n        this.update()\n    }\n\n    pause() {\n        if (this.running) {\n            this._paused = !this._paused\n            if (!this.paused) {\n                this._endTime = Date.now() + (this.secondsLeft * 1000)\n            }\n\n            this.update()\n        }\n    }\n\n    update() {\n        if (this.endTime !== undefined && !this.paused) {\n            if (this.secondsLeft > 0) {\n                this.timeout = setTimeout(() => this.update(), this.intervalMs)\n            } else {\n                this._running = false\n                this._endTime = Date.now()\n                clearTimeout(this.timeout)\n            }\n        }\n\n        this.updateSubscribers()\n    }\n}\n\nexport interface CountdownCollectionObject {\n    readonly items: CountdownObject[]\n    currentIndex?: number\n}\n\nexport class CountdownCollection extends Subscribable implements CountdownCollectionObject {\n    private _items: Countdown[] = []\n    private _currentIndex = 0\n\n    constructor(collection?: CountdownCollectionObject) {\n        super()\n        if (collection?.items) {\n            for (let item of collection.items) {\n                this.addItem(item)\n            }\n        }\n\n        if (collection?.currentIndex) {\n            this._currentIndex = collection.currentIndex\n        }\n\n        if (this._currentIndex > this.items.length - 1) {\n            this._currentIndex = 0\n        }\n    }\n\n    public get items(): Countdown[] { return this._items }\n    public get currentIndex(): number { return this._currentIndex }\n    public get current(): Countdown { return this.items[this.currentIndex] }\n    public get nextIndex(): number { return (this.currentIndex + 1) % this.items.length }\n    public get next(): Countdown { return this.items[this.nextIndex] }\n    public get runningCountdown(): Countdown | null {\n        return this.items.filter((countdown: Countdown) => countdown.running)[0]\n    }\n\n    public advance(): void {\n        this._currentIndex = this.nextIndex\n        this.updateSubscribers()\n    }\n\n    public toJSON(): CountdownCollectionObject {\n        return {\n            items: this.items,\n            currentIndex: this.currentIndex\n        }\n    }\n\n    public addItem(countdownObject: CountdownObject): void {\n        if (countdownObject !== null) {\n            let countdown: Countdown = new Countdown(countdownObject)\n            countdown.subscribe(this.constructor.name, () => {\n                this.updateSubscribers()\n            })\n\n            this.items.push(countdown)\n        }\n        this.updateSubscribers()\n    }\n\n    public deleteItem(index: number) {\n        delete this.items[index]\n        this.updateSubscribers()\n    }\n\n    public swapItems(a: number, b: number) {\n        let lower: number\n        let higher: number\n        if (a < b) {\n            lower = a\n            higher = b\n        } else if (b < a) {\n            lower = b\n            higher = a\n        } else {\n            throw new RangeError('Cannot swap an element with itself')\n        }\n\n        if (this.currentIndex === lower) this._currentIndex = higher;\n        else if (this.currentIndex === higher) this._currentIndex = lower;\n\n        this._items = [\n            ...this.items.slice(0, lower),\n            this.items[higher],\n            this.items[lower],\n            ...this.items.slice(higher + 1)\n        ]\n\n        this.updateSubscribers()\n    }\n\n    public getItem(index: number): Countdown {\n        return this.items[index]\n    }\n}\n","import { CountdownCollection, CountdownCollectionObject } from '../data/Countdown';\nimport { Subscribable } from '../data/Subscribable'\n\nconst DEFAULT_COUNTDOWNS: CountdownCollectionObject = {\n    items: [\n        { name: 'Work', min: 1, max: 90, value: 50 },\n        { name: 'Break time', min: 1, max: 15, value: 10 },\n    ]\n}\n\nexport class CountdownService extends Subscribable {\n    private static _instance: CountdownService;\n    private _countdowns: CountdownCollection = new CountdownCollection();\n\n    public static get instance(): CountdownService {\n        return this._instance || (this._instance = new this())\n    }\n\n    public get countdowns(): CountdownCollection { return this._countdowns }\n\n    public get items() {\n        return this.countdowns.items\n    }\n\n    private constructor() {\n        super()\n        this.load()\n    }\n\n    public load(): void {\n        let countdowns: string | null = localStorage.getItem(this.constructor.name)\n        if (countdowns) {\n            this._countdowns = new CountdownCollection(JSON.parse(countdowns))\n        } else {\n            let legacyCountdowns: string | null = localStorage.getItem('countdowns')\n            let currentCountdown: string | null = localStorage.getItem('currentCountdown')\n\n            if (legacyCountdowns) {\n                this._countdowns = new CountdownCollection({\n                    items: JSON.parse(legacyCountdowns),\n                    currentIndex: currentCountdown ? parseInt(currentCountdown) : 0\n                })\n\n            }\n        }\n\n        this._countdowns.subscribe(this.constructor.name, () => {\n            this.save()\n        })\n\n        console.log('CountdownService.load() saving', this.countdowns)\n        this.save()\n    }\n\n    public save(): void {\n        localStorage.setItem(this.constructor.name, JSON.stringify(this.countdowns))\n        this.updateSubscribers()\n    }\n\n    public reset(): void {\n        this._countdowns = new CountdownCollection(DEFAULT_COUNTDOWNS);\n        this.save()\n    }\n}\n","import { Collection } from \"../interfaces/Collection\"\nimport { Subscribable } from \"./Subscribable\"\n\nexport interface HistoryItemObject {\n    name: string,\n    start: number,\n    end: number\n}\n\nexport class HistoryItem {\n    readonly name: string\n    readonly start: number\n    readonly end: number\n\n    constructor({\n        name,\n        start,\n        end\n    }: HistoryItemObject) {\n        this.name = name\n        this.start = start\n        this.end = end\n    }\n\n    public get durationMs(): number {\n        return this.end - this.start\n    }\n}\n\nexport class HistoryItemCollection extends Subscribable implements Collection<HistoryItem> {\n    readonly items: HistoryItem[] = []\n\n    constructor(collection?: Collection<HistoryItemObject>) {\n        super()\n        if (collection?.items) {\n            for (let item of collection.items) {\n                this.addItem(item)\n            }\n        }\n    }\n\n    public toJSON(): Collection<HistoryItemObject> {\n        return {\n            items: this.items\n        }\n    }\n\n    get today(): HistoryItem[] {\n        let now = new Date(Date.now())\n        return this.items.filter((item) => {\n            let start = new Date(item.start)\n            return (\n                start.getFullYear() === now.getFullYear() &&\n                start.getMonth() === now.getMonth() &&\n                start.getDay() === now.getDay()\n            )\n        })\n    }\n\n    public addItem(item: HistoryItemObject) {\n        this.items.push(new HistoryItem(item))\n        this.updateSubscribers()\n    }\n}\n","import { HistoryItemCollection, HistoryItemObject } from '../data/History';\nimport { Subscribable } from '../data/Subscribable'\n\nexport class HistoryService extends Subscribable {\n    private static _instance: HistoryService;\n    public static get instance(): HistoryService { return this._instance || (this._instance = new this()) }\n\n    private _history: HistoryItemCollection;\n\n    public get history(): HistoryItemCollection { return this._history }\n    public get items() { return this.history.items }\n\n    private constructor() {\n        super()\n        let history: string | null = localStorage.getItem('history')\n        if (history) {\n            this._history = new HistoryItemCollection(JSON.parse(history))\n        } else {\n            this._history = new HistoryItemCollection()\n        }\n    }\n\n    public save(): void {\n        localStorage.setItem('history', JSON.stringify(this.history))\n        this.updateSubscribers()\n    }\n\n    public addItem(item: HistoryItemObject) {\n        this._history.addItem(item)\n        this.save()\n    }\n\n    public clear(): void {\n        this._history = new HistoryItemCollection()\n        this.save()\n    }\n}\n","import React, { Component } from 'react';\n\nimport {\n    Box,\n    Button,\n    createStyles,\n    Divider,\n    Drawer,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    ListItemText,\n    Switch,\n    Theme,\n    Typography,\n    WithStyles, withStyles\n} from '@material-ui/core';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport { NotificationService } from '../services/Notification';\nimport { ConfirmationModal } from './ConfirmationModal';\nimport { CountdownService } from '../services/Countdown';\nimport { HistoryService } from '../services/History';\nimport { AutorenewTwoTone } from '@material-ui/icons';\n\nconst styles = (theme: Theme) => createStyles({\n    sideBar: {\n        width: 250\n    },\n    footer: {\n        top: 'auto',\n        bottom: 0,\n        width: '100%',\n        padding: 8,\n    },\n    footerButton: {\n        width: '100%'\n    }\n})\n\nconst notificationService: NotificationService = NotificationService.instance\n\ninterface SidebarProps extends WithStyles<typeof styles> {\n    open: boolean,\n    onClose: Function,\n}\n\ninterface SidebarState {\n    notificationsEnabled: boolean\n    confirmResetOpen: boolean\n    confirmClearHistoryOpen: boolean\n}\n\nexport const Sidebar = withStyles(styles)(class SidebarComponent extends Component<SidebarProps, SidebarState> {\n    constructor(props: SidebarProps) {\n        super(props)\n        this.state = {\n            notificationsEnabled: notificationService.desktopNotificationEnabled,\n            confirmResetOpen: false,\n            confirmClearHistoryOpen: false\n        }\n    }\n\n    refreshNotificationState() {\n        if (this.state.notificationsEnabled !== notificationService.desktopNotificationEnabled) {\n            this.setState({\n                notificationsEnabled: notificationService.desktopNotificationEnabled\n            })\n        }\n    }\n\n    componentDidUpdate() {\n        this.refreshNotificationState()\n    }\n\n    componentDidMount() {\n        notificationService.subscribe(this.constructor.name, () => {\n            this.refreshNotificationState()\n        })\n    }\n\n    componentWillUnmount() {\n        notificationService.unsubscribe(this.constructor.name)\n    }\n\n    render() {\n        const classes = this.props.classes\n        return (\n            <Drawer\n                anchor='left'\n                open={this.props.open}\n                onClose={() => this.props.onClose()}\n            >\n                <ConfirmationModal\n                    open={this.state.confirmResetOpen}\n                    onClose={() => {\n                        this.setState({\n                            confirmResetOpen: false\n                        })\n\n                        this.props.onClose();\n                    }}\n                    onConfirm={() => {\n                        CountdownService.instance.reset()\n\n                        this.setState({\n                            confirmResetOpen: false\n                        })\n\n                        this.props.onClose();\n                    }}\n                    subtitle='Resetting your countdowns cannot be undone'\n                />\n                <ConfirmationModal\n                    open={this.state.confirmClearHistoryOpen}\n                    onClose={() => {\n                        this.setState({\n                            confirmClearHistoryOpen: false\n                        })\n\n                        this.props.onClose();\n                    }}\n                    onConfirm={() => {\n                        HistoryService.instance.clear()\n\n                        this.setState({\n                            confirmClearHistoryOpen: false\n                        })\n\n                        this.props.onClose();\n                    }}\n                    subtitle='Clearing history cannot be undone'\n                />\n                <div className={classes.sideBar} >\n                    <List>\n                        <ListItem\n                            button\n                            onClick={() => { notificationService.requestDesktopNotificationPermissions() }}\n                        >\n                            <ListItemIcon><NotificationsIcon /></ListItemIcon>\n                            <ListItemText primary=\"Notifications\" />\n                            <ListItemSecondaryAction>\n                                <Switch\n                                    edge=\"end\"\n                                    onClick={() => { notificationService.requestDesktopNotificationPermissions() }}\n                                    checked={this.state.notificationsEnabled}\n                                    inputProps={{ 'aria-labelledby': 'switch-list-label-bluetooth' }}\n                                    onFocus={() => this.refreshNotificationState()}\n                                    onBlur={() => this.refreshNotificationState()}\n                                    disabled={!notificationService.desktopNotificationSupport}\n                                />\n                            </ListItemSecondaryAction>\n                        </ListItem>\n                        <Divider />\n                        <ListItem\n                            button\n                            onClick={() => { this.setState({ confirmClearHistoryOpen: true }) }}\n                        >\n                            <ListItemText primary='Clear history' />\n                        </ListItem>\n                        <ListItem\n                            button\n                            onClick={() => { this.setState({ confirmResetOpen: true }) }}\n                        >\n                            <ListItemText primary='Reset to defaults' />\n                        </ListItem>\n                    </List>\n                </div>\n                <Box position='fixed' className={classes.footer}>\n                    <Button>\n                        <Typography variant='caption'>\n                            Version {process.env.REACT_APP_VERSION} (what's new)\n                        </Typography>\n                    </Button>\n                </Box>\n            </Drawer>\n        )\n    }\n});\n","\nexport class TimeFormat {\n    static seconds(timerSeconds: number): string {\n        let hours = Math.floor(timerSeconds / 60 / 60)\n        let minutes = Math.floor((timerSeconds - (hours * 60 * 60)) / 60)\n        let seconds = Math.floor(timerSeconds - (hours * 60 * 60) - (minutes * 60))\n\n        let returnStr: string[] = []\n\n        if (hours > 0) {\n            returnStr.push(`${hours}h`)\n        }\n\n        if (minutes > 0) {\n            returnStr.push(`${minutes}m`)\n        }\n\n        returnStr.push(`${seconds}s`)\n\n        return returnStr.join(' ')\n    }\n\n    static minutes(timerMinutes: number): string {\n        let hours = Math.floor(timerMinutes / 60)\n        let minutes = timerMinutes - (hours * 60)\n\n        let returnStr: string[] = []\n\n        if (hours > 0) {\n            returnStr.push(`${hours}h`)\n        }\n\n        returnStr.push(`${minutes}m`)\n\n        return returnStr.join(' ')\n    }\n}\n","import { Box, createStyles, Theme, Typography, withStyles, WithStyles } from \"@material-ui/core\";\nimport React from \"react\";\nimport { Component } from \"react\";\n\nconst styles = (theme: Theme) => createStyles({});\n\ninterface TwoTextProps extends WithStyles<typeof styles> {\n    caption: string,\n    text: string\n};\n\ninterface TwoTextState { }\n\nexport const TwoText = withStyles(styles)(class TwoTextInternal extends Component<TwoTextProps, TwoTextState> {\n    render() {\n        return (\n            <Box flexDirection='column' flex={2} display='flex' alignItems='center' >\n                <Box display='flex'>\n                    <Typography variant=\"caption\">{this.props.caption}</Typography>\n                </Box>\n                <Box display='flex'>\n                    <Typography variant='subtitle1'>{this.props.text}</Typography>\n                </Box>\n            </Box>\n        )\n    }\n});\n","import { Box, createStyles, Grid, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Theme, Typography, WithStyles, withStyles } from \"@material-ui/core\"\nimport React, { Component } from \"react\"\nimport { TimeFormat } from \"../data/format/Time\";\nimport { HistoryItem, HistoryItemCollection } from \"../data/History\";\nimport { HistoryService } from \"../services/History\";\nimport { TwoText } from \"../widgets/TwoText\";\n\nconst styles = (theme: Theme) => createStyles({\n    table: {\n        minWidth: 650,\n    },\n    totalsGrid: { flexGrow: 1, padding: 8 },\n});\n\ninterface HistoryListProps extends WithStyles<typeof styles> { };\ninterface HistoryListState {\n    history: HistoryItemCollection\n};\n\nexport const HistoryList = withStyles(styles)(class HistoryListInternal extends Component<HistoryListProps, HistoryListState> {\n    constructor(props: HistoryListProps) {\n        super(props)\n\n        this.state = {\n            history: HistoryService.instance.history\n        }\n    }\n\n    componentDidMount() {\n        HistoryService.instance.subscribe(\n            this.constructor.name, () => { this.setState({ history: HistoryService.instance.history }) }\n        )\n    }\n\n    componentWillUnmount() {\n        HistoryService.instance.unsubscribe(this.constructor.name)\n    }\n\n    render() {\n        const classes = this.props.classes\n        let totals: { [name: string]: number } = {}\n\n        for (let name of this.state.history.today.map((item: HistoryItem) => item.name).sort()) {\n            if (!(name in totals)) {\n                totals[name] = this.state.history.today\n                    .filter((item: HistoryItem) => item.name === name)\n                    .map((item: HistoryItem) => item.durationMs)\n                    .reduce((previous: number, current: number) => previous + current)\n            }\n        }\n\n        return <Grid container spacing={2} className={classes.totalsGrid}>\n            <Grid item xs={2}>\n                <Box flexDirection='column' display='flex' alignItems='center' justifyContent='center' height='100%'>\n                    <Typography variant='h5'>Totals</Typography>\n                </Box>\n            </Grid>\n            {\n                Object.keys(totals).map((name: string) => (\n                    <Grid item xs={2}>\n                        <Paper>\n                            <TwoText caption={name} text={`${TimeFormat.seconds(totals[name] / 1000)}`} />\n                        </Paper>\n                    </Grid>\n                ))\n            }\n            <Grid item xs={12}>\n                <TableContainer>\n                    <Table className={classes.table} size=\"small\" aria-label=\"a dense table\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Task Name</TableCell>\n                                <TableCell align=\"right\">Duration</TableCell>\n                                <TableCell align=\"right\">Start</TableCell>\n                                <TableCell align=\"right\">End</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {this.state.history.today.map((item: HistoryItem) => {\n                                let start: Date = new Date(item.start)\n                                let end: Date = new Date(item.end)\n                                return (\n                                    <TableRow key={item.name + item.start}>\n                                        <TableCell component=\"th\" scope=\"row\">\n                                            {item.name}\n                                        </TableCell>\n                                        <TableCell align=\"right\">{TimeFormat.seconds(item.durationMs / 1000)}</TableCell>\n                                        <TableCell align=\"right\">{`${start.getHours()}:${start.getMinutes()}:${start.getSeconds()}`}</TableCell>\n                                        <TableCell align=\"right\">{`${end.getHours()}:${end.getMinutes()}:${end.getSeconds()}`}</TableCell>\n                                    </TableRow>\n                                )\n                            })}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </Grid>\n        </Grid >\n    }\n});\n","import React, { ChangeEvent, Component, KeyboardEvent, RefObject } from \"react\";\n\nimport {\n    Box,\n    IconButton,\n    Slider,\n    Theme,\n    Typography,\n    WithStyles,\n    withStyles,\n    createStyles,\n    TextField,\n    Grid,\n    Popover\n} from \"@material-ui/core\";\n\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport CheckIcon from '@material-ui/icons/Check';\n\nconst styles = (theme: Theme) => createStyles({\n    fullWidth: {\n        width: '100%'\n    },\n\n    centeringGrid: {\n        display: 'flex'\n    },\n\n    listItemText: {\n        display: 'block'\n    },\n\n    sliderSpacing: {\n        width: '100%',\n        justifyContent: 'center',\n        verticalAlign: 'middle'\n    },\n\n    sliderLabelContainer: {\n        marginBottom: -16\n    },\n\n    sliderLabel: {\n        paddingRight: 10\n    },\n\n    editPopover: {\n        padding: 8\n    },\n\n    editContainer: {\n        paddingRight: 8,\n    }\n})\n\ninterface LabelSliderProps extends WithStyles<typeof styles> {\n    label: string,\n    labelSuffix: string,\n    value: number,\n    step: number,\n    min: number,\n    max: number,\n    editing: boolean,\n    onChange: (value: number) => void,\n    onEditSave: (name: string, min: number, max: number) => void,\n    formatCallback: Function\n}\n\ninterface LabelSliderState {\n    value: number\n    label: string,\n    editLabel: string,\n    min: number,\n    editMin: number,\n    max: number,\n    editMax: number,\n    step: number,\n    menuOpen: boolean\n    editing: boolean\n    anchor?: HTMLElement\n    labelError: boolean,\n    minError: boolean,\n    maxError: boolean,\n}\n\nexport const LabelSlider = withStyles(styles)(class LabelSliderComponent extends Component<LabelSliderProps, LabelSliderState> {\n    private popoverRef: RefObject<any>\n\n    static defaultProps = {\n        editing: false\n    }\n\n    constructor(props: LabelSliderProps) {\n        super(props)\n        this.state = {\n            value: this.props.value,\n            label: this.props.label,\n            editLabel: this.props.label,\n            min: this.props.min,\n            editMin: this.props.min,\n            max: this.props.max,\n            editMax: this.props.max,\n            step: this.props.step,\n            menuOpen: false,\n            editing: this.props.editing,\n            labelError: false,\n            minError: false,\n            maxError: false\n        }\n\n        this.popoverRef = React.createRef()\n\n        this.handleOnChange = this.handleOnChange.bind(this)\n        this.handleKeyPress = this.handleKeyPress.bind(this)\n        this.openPopover = this.openPopover.bind(this)\n        this.closePopover = this.closePopover.bind(this)\n        this.saveForm = this.saveForm.bind(this)\n        this.cancelEdit = this.cancelEdit.bind(this)\n    }\n\n    getMinError(min: number, max: number): boolean {\n        return isNaN(min) || min < 1 || min > max\n    }\n\n    getMaxError(min: number, max: number): boolean {\n        return isNaN(max) || max < 1 || max < min\n    }\n\n    handleOnChange(event: any, newValue: number | number[]) {\n        if (typeof newValue === 'number') {\n            this.setState({\n                value: newValue\n            })\n            this.props.onChange(newValue)\n        } else if (typeof newValue === 'object') {\n            this.setState({\n                value: newValue[0]\n            })\n            this.props.onChange(newValue[0])\n        }\n\n    }\n\n    handleKeyPress(event: KeyboardEvent) {\n        if (event.key === 'Enter') {\n            this.saveForm()\n        }\n    }\n\n    openPopover() {\n        this.setState({\n            editing: true,\n            editLabel: this.state.label,\n            editMin: this.state.min,\n            editMax: this.state.max\n        })\n    }\n\n    closePopover() {\n        this.setState({\n            editing: false\n        })\n    }\n\n    saveForm() {\n        if (!(this.state.labelError || this.state.minError || this.state.maxError)) {\n            let value: number\n            if (this.state.value > this.state.editMax) {\n                value = this.state.editMax\n            } else if (this.state.value < this.state.editMin) {\n                value = this.state.editMin\n            } else (\n                value = this.state.value\n            )\n\n            this.props.onEditSave(this.state.editLabel, this.state.editMin, this.state.editMax)\n\n            this.setState({\n                value: value,\n                label: this.state.editLabel,\n                min: this.state.editMin,\n                max: this.state.editMax\n            })\n\n            this.closePopover()\n        }\n\n    }\n\n    cancelEdit() {\n        this.setState({\n            labelError: false,\n            minError: false,\n            maxError: false\n        })\n        this.closePopover()\n    }\n\n    renderNormalView() {\n        const { classes } = this.props\n        return (\n            <>\n                <Box display='flex' flexDirection='row' flex='100%' alignItems='baseline' className={classes.sliderLabelContainer}>\n                    <Typography variant=\"subtitle1\" className={classes.sliderLabel}>{this.state.label}</Typography>\n                    <Typography variant=\"caption\" className={classes.sliderLabel}>({this.props.formatCallback(this.state.value)})</Typography>\n                </Box>\n                <Box display='flex' flex={1} flexDirection='row'>\n                    <Box m={1} flex='100%' display='flex' justifyContent='flex-start' alignItems='center'>\n                        <Slider\n                            value={this.state.value}\n                            step={this.state.step}\n                            min={this.state.min}\n                            max={this.state.max}\n                            onChange={this.handleOnChange}\n                            getAriaValueText={(value: number) => { return `${value}m` }}\n                            valueLabelDisplay=\"off\"\n                            aria-labelledby=\"break-length\"\n                        />\n                    </Box>\n                    <Box flex={1} display='flex' justifyContent='flex-end' alignItems='center'>\n                        <IconButton onClick={(event) => {\n                            this.openPopover()\n                        }}>\n                            <EditOutlinedIcon />\n                        </IconButton>\n                    </Box>\n                </Box>\n            </>\n        )\n    }\n\n    renderEditPopover() {\n        const classes = this.props.classes\n        return (\n            <Popover\n                open={this.state.editing}\n                anchorEl={this.popoverRef.current}\n                anchorOrigin={{ vertical: 'center', horizontal: 'left' }}\n                transformOrigin={{ vertical: 'center', horizontal: 'left' }}\n                onClose={this.cancelEdit}\n                onEscapeKeyDown={this.cancelEdit}\n            >\n                <Box display='flex' flex={1} flexDirection='row' className={classes.editPopover}>\n                    <Grid container>\n                        <Grid item xs={6} className={classes.editContainer}>\n                            <TextField\n                                fullWidth\n                                label=\"Name\"\n                                error={this.state.labelError}\n                                value={this.state.editLabel}\n                                margin='dense'\n                                size='small'\n                                variant='outlined'\n                                onChange={(event: ChangeEvent<HTMLTextAreaElement>) => {\n                                    this.setState({\n                                        editLabel: event.target.value,\n                                        labelError: (\n                                            event.target.value === ''\n                                        )\n                                    })\n                                }}\n                                onKeyPress={this.handleKeyPress}\n                            />\n                        </Grid>\n                        <Grid item xs={3} className={classes.editContainer}>\n                            <TextField\n                                label=\"Min\"\n                                error={this.state.minError}\n                                value={this.state.editMin}\n                                size='small'\n                                variant=\"outlined\"\n                                margin='dense'\n                                onChange={(event: ChangeEvent<HTMLTextAreaElement>) => {\n                                    const value = parseInt(event.target.value)\n                                    this.setState({\n                                        editMin: value || 0,\n                                        minError: this.getMinError(value, this.state.max),\n                                        maxError: this.getMaxError(value, this.state.max)\n                                    })\n                                }}\n                                onKeyPress={this.handleKeyPress}\n                            />\n                        </Grid>\n                        <Grid item xs={3} className={classes.editContainer}>\n                            <TextField\n                                label=\"Max\"\n                                error={this.state.maxError}\n                                value={this.state.editMax}\n                                size='small'\n                                variant=\"outlined\"\n                                margin='dense'\n                                onChange={(event: ChangeEvent<HTMLTextAreaElement>) => {\n                                    const value = parseInt(event.target.value)\n                                    this.setState({\n                                        editMax: value || 0,\n                                        minError: this.getMinError(this.state.min, value),\n                                        maxError: this.getMaxError(this.state.min, value)\n                                    })\n                                }}\n                                onKeyPress={this.handleKeyPress}\n                            />\n                        </Grid>\n                    </Grid>\n                    <Box flex={1} display='flex' justifyContent='flex-end' alignItems='center'>\n                        <IconButton onClick={this.saveForm}>\n                            <CheckIcon color='primary' />\n                        </IconButton>\n                        <IconButton onClick={this.cancelEdit}>\n                            <CancelIcon color='secondary' />\n                        </IconButton>\n                    </Box>\n                </Box>\n            </Popover>\n        )\n    }\n\n    render() {\n        return (\n            <div ref={this.popoverRef}> {/* So the popover can have its origin on the row */}\n                <Box display='flex' flexDirection='column'>\n                    {this.renderNormalView()}\n                    {this.renderEditPopover()}\n                </Box>\n            </div>\n        )\n    }\n});\n","import {\n    Box,\n    Button,\n    ButtonGroup,\n    Card,\n    createStyles,\n    Grid,\n    IconButton,\n    Theme,\n    Typography,\n    WithStyles,\n    withStyles\n} from \"@material-ui/core\"\nimport React, { Component } from \"react\"\nimport { CountdownCollection } from \"../data/Countdown\";\nimport { TimeFormat } from \"../data/format/Time\";\nimport { CountdownService } from \"../services/Countdown\";\nimport { TwoText } from \"../widgets/TwoText\";\n\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport AddIcon from '@material-ui/icons/Add';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport StopIcon from '@material-ui/icons/Stop';\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\n\nimport { LabelSlider } from \"../widgets/LabelSlider\";\nimport { HistoryService } from \"../services/History\";\nimport { NotificationService } from \"../services/Notification\";\n\nimport { APP_TITLE, APP_TITLE_SHORT } from \"../App\";\nimport { ConfirmationModal } from \"./ConfirmationModal\";\n\nconst styles = (theme: Theme) => createStyles({\n    popperCardStyle: {\n        paddingLeft: theme.spacing(1),\n        backgroundColor: theme.palette.grey[50],\n        margin: 8,\n        height: '100%'\n    },\n\n    fillWidth: {\n        width: '100%',\n    },\n\n});\n\ninterface CountdownComponentProps extends WithStyles<typeof styles> { };\ninterface CountdownComponentState {\n    countdowns: CountdownCollection\n    editingOrder: boolean\n    confirmDeleteOpen: boolean,\n    confirmDeleteIndex: number,\n    confirmDeleteName: string\n    running: boolean,\n    paused: boolean,\n    warningNotificationSent: boolean,\n};\n\nexport const CountdownComponent = withStyles(styles)(class CountdownInternal extends Component<CountdownComponentProps, CountdownComponentState> {\n    private notificationService: NotificationService\n\n    constructor(props: CountdownComponentProps\n    ) {\n        super(props)\n\n        console.log(CountdownService.instance.countdowns)\n\n        this.state = {\n            countdowns: CountdownService.instance.countdowns,\n            editingOrder: false,\n            confirmDeleteOpen: false,\n            confirmDeleteIndex: 0,\n            confirmDeleteName: '',\n            running: CountdownService.instance.countdowns.current?.running,\n            paused: false,\n            warningNotificationSent: false,\n        }\n\n        if (CountdownService.instance.countdowns.current?.running) {\n            CountdownService.instance.countdowns.runningCountdown?.update()\n        }\n\n        this.notificationService = NotificationService.instance\n\n        this.handleStartStopOnClick = this.handleStartStopOnClick.bind(this)\n        this.countdownSubscriber = this.countdownSubscriber.bind(this)\n    }\n\n    componentDidMount() {\n        CountdownService.instance.subscribe(\n            this.constructor.name, () => { this.setState({ countdowns: CountdownService.instance.countdowns }) }\n        )\n\n        if (this.state.running) {\n            this.state.countdowns.current?.subscribe(this.constructor.name, this.countdownSubscriber)\n        }\n    }\n\n    componentWillUnmount() {\n        CountdownService.instance.unsubscribe(this.constructor.name)\n    }\n\n    handleStartStopOnClick() {\n        if (!this.state.running) {\n            this.start()\n        } else {\n            this.stop()\n        }\n    }\n\n    start() {\n        this.setState({ running: true })\n        this.state.countdowns.current.subscribe(this.constructor.name, this.countdownSubscriber)\n        this.state.countdowns.current.start()\n        window.document.title = `${APP_TITLE_SHORT} [${this.state.countdowns.current.name} ${TimeFormat.seconds(this.state.countdowns.current.secondsLeft)}]`\n    }\n\n    stop() {\n        this.setState({ running: false })\n        this.state.countdowns.current.unsubscribe(this.constructor.name)\n        this.state.countdowns.current.stop()\n\n        if (this.state.countdowns.current.startTime && this.state.countdowns.current.endTime) {\n            let endTime: number = Date.now()\n\n            if (endTime > this.state.countdowns.current.endTime) {\n                endTime = this.state.countdowns.current.endTime\n            }\n\n            HistoryService.instance.addItem({\n                name: this.state.countdowns.current.name,\n                start: this.state.countdowns.current.startTime,\n                end: endTime\n            })\n        }\n\n        this.setState({\n            warningNotificationSent: false,\n            paused: false\n        })\n\n        this.state.countdowns.advance()\n        window.document.title = APP_TITLE\n    }\n\n    countdownSubscriber() {\n        if (this.state.countdowns.current.running) {\n            window.document.title = `${APP_TITLE_SHORT} [${this.state.countdowns.current.name} ${TimeFormat.seconds(this.state.countdowns.current.secondsLeft)}]`\n            // this.updateCountdownState(this.state.countdowns.current)\n            if (\n                !this.state.warningNotificationSent\n                && this.state.countdowns.current.secondsLeft < 300\n                && this.state.countdowns.current.secondsLeft > 240\n            ) {\n                this.setState({\n                    warningNotificationSent: true\n                })\n\n                this.notificationService.showNotification(\n                    APP_TITLE,\n                    {\n                        body: `Stopping soon: ${this.state.countdowns.current.name}`\n                    }\n                )\n            }\n        } else {\n            this.notificationService.showNotification(\n                APP_TITLE,\n                {\n                    body: `Complete: ${this.state.countdowns.current.name}`\n                }\n            )\n            this.stop()\n        }\n    }\n\n    renderSliders() {\n        const classes = this.props.classes\n        let elements: JSX.Element[] = []\n\n        for (let i in this.state.countdowns.items) {\n            const index: number = parseInt(i)\n            const countdown = this.state.countdowns.items[i]\n            const upDisabled = index === 0\n            const downDisabled = index === this.state.countdowns.items.length - 1\n\n            if (this.state.editingOrder) {\n                elements.push(\n                    <Grid item key={countdown.name}>\n                        <Card className={classes.popperCardStyle}>\n                            <Box display='flex' flexDirection='row'>\n                                <Box flex='100%' display='flex' justifyContent='left' alignItems='center'>\n                                    <Typography variant='button'>\n                                        {countdown.name}\n                                    </Typography>\n                                </Box>\n                                <Box flex={1} display='flex' justifyContent='right' justifyItems='right'>\n                                    <IconButton\n                                        color='primary'\n                                        disabled={upDisabled}\n                                        onClick={() => {\n                                            this.state.countdowns.swapItems(index, index - 1)\n                                        }}\n                                    >\n                                        <ArrowUpwardIcon />\n                                    </IconButton>\n                                    <IconButton\n                                        color='primary'\n                                        disabled={downDisabled}\n                                        onClick={() => {\n                                            this.state.countdowns.swapItems(index, index + 1)\n                                        }}\n                                    >\n                                        <ArrowDownwardIcon />\n                                    </IconButton>\n                                    <IconButton\n                                        color='secondary'\n                                        onClick={() => {\n                                            this.setState({\n                                                confirmDeleteOpen: true,\n                                                confirmDeleteIndex: index,\n                                                confirmDeleteName: countdown.name\n                                            })\n                                        }}\n                                    >\n                                        <DeleteOutlineIcon />\n                                    </IconButton>\n                                </Box>\n                            </Box>\n                        </Card>\n                    </Grid>\n                )\n            } else {\n                elements.push(\n                    <Grid item key={countdown.name}>\n                        <LabelSlider\n                            label={countdown.name}\n                            labelSuffix=\"m\"\n                            value={countdown.value}\n                            step={1}\n                            min={countdown.min}\n                            max={countdown.max}\n                            onChange={(value: number) => {\n                                countdown.value = value\n                            }}\n                            onEditSave={(name: string, min: number, max: number) => {\n                                countdown.name = name\n                                countdown.min = min\n                                countdown.max = max\n                            }}\n                            formatCallback={(value: number) => TimeFormat.minutes(value)}\n                        />\n                    </Grid>\n                )\n            }\n        }\n\n        return elements\n    }\n\n    render() {\n        const classes = this.props.classes\n\n        return <Grid container>\n            <ConfirmationModal\n                open={this.state.confirmDeleteOpen}\n                onClose={() => {\n                    this.setState({\n                        confirmDeleteOpen: false\n                    })\n                }}\n                onConfirm={() => {\n                    this.state.countdowns.deleteItem(this.state.confirmDeleteIndex)\n                    this.setState({\n                        confirmDeleteOpen: false\n                    })\n                }}\n                subtitle='Deleting this cannot be undone'\n            />\n            <Grid item xs={12}>\n                <Box display='flex' flexDirection=\"row\">\n                    <Box flex='100%'>\n                        <Typography variant=\"h3\"> Timers </Typography>\n                    </Box>\n                    <Box flex={1}>\n                        <IconButton\n                            disabled={this.state.editingOrder}\n                            onClick={() => {\n                                this.state.countdowns.addItem({ name: `NEW ${this.state.countdowns.items.length}` })\n                            }}\n                        >\n                            <AddIcon color={this.state.editingOrder ? 'disabled' : 'primary'} />\n                        </IconButton>\n                    </Box>\n                    <Box flex={1}>\n                        <IconButton\n                            onClick={() => {\n                                this.setState({\n                                    editingOrder: !this.state.editingOrder\n                                })\n                            }}\n                        >\n                            <SettingsIcon color={this.state.editingOrder ? 'primary' : 'action'} />\n                        </IconButton>\n                    </Box>\n                </Box>\n            </Grid>\n            <Grid item xs={12}>\n                {this.renderSliders()}\n            </Grid>\n            <Grid item xs={12} sm={3}>\n                <ButtonGroup\n                    className={classes.fillWidth}\n                    variant=\"contained\"\n                    color={\n                        this.state.running\n                            ? this.state.paused ? 'default' : 'secondary'\n                            : 'primary'\n                    }\n                >\n                    <Button className={classes.fillWidth} onClick={this.handleStartStopOnClick}>\n                        {this.state.running ? <StopIcon /> : <PlayArrowIcon />}\n                    </Button>\n                    <Button className={classes.fillWidth} disabled={!this.state.running} onClick={() => {\n                        if (this.state.running) {\n                            this.state.countdowns.current.pause()\n                            this.setState({\n                                paused: !this.state.paused\n                            })\n                        }\n                    }}>\n                        {this.state.paused ? <PlayCircleOutlineIcon /> : <PauseIcon />}\n                    </Button>\n                </ButtonGroup>\n            </Grid>\n            <Grid item xs={4} sm={3}>\n                <TwoText\n                    caption={this.state.running ? this.state.paused ? 'Paused' : \"Running\" : \"On deck\"}\n                    text={this.state.countdowns.current?.name || 'NONE'}\n                />\n            </Grid>\n            <Grid item xs={4} sm={3}>\n                <TwoText\n                    caption=\"Time left\"\n                    text={TimeFormat.seconds(this.state.countdowns.current?.secondsLeft)}\n                />\n            </Grid>\n            <Grid item xs={4} sm={3}>\n                <TwoText caption=\"Up next\" text={this.state.countdowns.next?.name || 'NONE'} />\n            </Grid>\n        </Grid>\n    }\n});\n","import React, { Component } from 'react';\n\nimport {\n    AppBar,\n    createStyles,\n    Grid,\n    IconButton,\n    Paper,\n    Theme,\n    Toolbar,\n    Typography,\n    WithStyles, withStyles\n} from '@material-ui/core';\n\nimport { Sidebar } from './components/Sidebar';\n\nimport { NotificationService } from './services/Notification'\n\nimport MenuIcon from '@material-ui/icons/Menu';\n\nimport 'date-fns';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardTimePicker,\n} from '@material-ui/pickers';\nimport { HistoryList } from './components/History';\nimport { CountdownComponent } from './components/Countdown';\n\nconst styles = (theme: Theme) => createStyles({\n    root: {\n        flexGrow: 1,\n        overflow: 'hidden'\n    },\n\n    fillWidth: {\n        width: '100%',\n    },\n\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n\n    title: {\n        flexGrow: 1,\n    },\n\n    gridContainer: {\n        flexGrow: 1,\n        padding: 8,\n    },\n\n    paperContainer: {\n        padding: 8\n    },\n\n    sliderBox: {\n        paddingTop: 16\n    },\n\n    popperCardStyle: {\n        paddingLeft: theme.spacing(1),\n        backgroundColor: theme.palette.grey[50],\n        margin: 8,\n        height: '100%'\n    },\n\n    popperContentsStyle: {\n        marginRight: 8\n    },\n\n    modal: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        padding: 8,\n        border: 'none'\n    },\n\n    statusStyle: {\n        marginTop: -0.5,\n        marginBottom: -1\n    }\n});\n\ninterface AppProps extends WithStyles<typeof styles> { }\n\ninterface AppState {\n    workLength: number,\n    breakLength: number,\n    running: boolean,\n    paused: boolean,\n    secondsLeft: number,\n    sidebarOpen: boolean,\n    notificationSupport: boolean,\n    endTime?: number,\n    editingOrder: boolean,\n    confirmDeleteOpen: boolean\n    confirmDeleteIndex: number\n    confirmDeleteName: string\n    confirmResetOpen: boolean\n    warningNotificationSent: boolean\n    selectedDate: Date\n}\n\nexport const APP_TITLE: string = 'Task Timer'\nexport const APP_TITLE_SHORT: string = 'TT'\n\nconst notificationService: NotificationService = NotificationService.instance\n\nconst App = withStyles(styles)(class AppComponent extends Component<AppProps, AppState> {\n    public sliderRefs: any[] = []\n\n    constructor(props: AppProps) {\n        super(props)\n\n        let secondsLeft = 0\n        let running = false\n        let paused = false\n\n        const selectedDate = localStorage.getItem('selectedDate')\n\n        this.state = {\n            workLength: 50,\n            breakLength: 10,\n            running: running,\n            paused: paused,\n            secondsLeft: secondsLeft,\n            sidebarOpen: false,\n            notificationSupport: \"Notification\" in window,\n            editingOrder: false,\n            confirmDeleteOpen: false,\n            confirmDeleteIndex: 0,\n            confirmDeleteName: '',\n            confirmResetOpen: false,\n            warningNotificationSent: false,\n            selectedDate: selectedDate ? new Date(JSON.parse(selectedDate)) : new Date(0, 0, 0, 12, 0, 10)\n        }\n\n        this.checkSchedule = this.checkSchedule.bind(this)\n    }\n\n    componentDidMount() {\n        notificationService.requestDesktopNotificationPermissions()\n\n        this.checkSchedule()\n    }\n\n    checkSchedule() {\n        const now = new Date()\n        if (\n            now.getHours() === this.state.selectedDate.getHours()\n            && now.getMinutes() === this.state.selectedDate.getMinutes()\n        ) {\n            notificationService.showNotification(APP_TITLE, {\n                body: \"It's lunchtime!\"\n            })\n        }\n\n        setTimeout(() => this.checkSchedule(), 1000 * 50)\n    }\n\n    render() {\n        const classes = this.props.classes\n        return (\n            <div className={classes.root}>\n                <AppBar position=\"static\">\n                    <Toolbar>\n                        <IconButton\n                            edge=\"start\"\n                            className={classes.menuButton}\n                            color=\"inherit\" aria-label=\"menu\"\n                            onClick={() => {\n                                this.setState({ sidebarOpen: true })\n                            }}\n                        >\n                            <MenuIcon />\n                        </IconButton>\n                        <Typography variant=\"h6\" className={classes.title}>\n                            {APP_TITLE}\n                        </Typography>\n                    </Toolbar>\n                </AppBar>\n                <Sidebar\n                    open={this.state.sidebarOpen}\n                    onClose={() => {\n                        this.setState({ sidebarOpen: false })\n                    }}\n                />\n\n                <Grid container className={classes.gridContainer} spacing={2}>\n                    <Grid item xs={12} md={8}>\n                        <Paper className={classes.paperContainer}>\n                            <CountdownComponent />\n                        </Paper>\n                    </Grid>\n                    <Grid item xs={12} md={4}>\n                        <Paper className={classes.paperContainer}>\n                            <Grid container>\n                                <Grid item xs={12}>\n                                    <Typography variant=\"h3\">Schedule</Typography>\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                                        <KeyboardTimePicker\n                                            id=\"lunch-time-picker\"\n                                            label=\"Lunch\"\n                                            value={this.state.selectedDate}\n                                            onChange={(date: any) => {\n                                                this.setState({\n                                                    selectedDate: date\n                                                })\n                                                localStorage.setItem('selectedDate', JSON.stringify(date))\n                                            }}\n                                            minutesStep={5}\n                                        />\n                                    </MuiPickersUtilsProvider>\n                                </Grid>\n                            </Grid>\n                        </Paper>\n                    </Grid>\n                    <Grid item xs={12} md={4}>\n                        <Paper className={classes.paperContainer}>\n                            <Grid container>\n                                <Grid item xs={12}>\n                                    <Typography variant=\"h3\">History</Typography>\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <HistoryList />\n                                </Grid>\n                            </Grid>\n                        </Paper>\n                    </Grid>\n                </Grid>\n            </div >\n        );\n    }\n});\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}