{"version":3,"sources":["components/label-slider/index.tsx","data/Subscribable.ts","services/notification/index.ts","components/sidebar/index.tsx","data/Countdown.ts","data/format/time/index.ts","App.tsx","index.tsx"],"names":["LabelSlider","withStyles","theme","createStyles","fullWidth","width","centeringGrid","display","listItemText","sliderSpacing","justifyContent","verticalAlign","sliderLabelContainer","marginBottom","sliderLabel","paddingRight","props","state","value","menuOpen","handleOnChange","bind","event","newValue","this","setState","onChange","classes","Box","flexDirection","id","keepMounted","open","anchorEl","anchor","onClose","MenuItem","flex","alignItems","className","Typography","variant","label","formatCallback","m","Slider","step","min","max","getAriaValueText","valueLabelDisplay","aria-labelledby","IconButton","onClick","currentTarget","Component","Subscribable","subscribers","Map","callback","set","delete","forEach","key","map","console","log","NotificationService","_desktopNotificationSupport","window","_instance","desktopNotificationSupport","Notification","permission","requestPermission","then","updateSubscribers","title","options","onclick","notification","close","focus","notificationService","instance","Sidebar","sideBar","notificationsEnabled","desktopNotificationEnabled","refreshNotificationState","subscribe","constructor","name","unsubscribe","Drawer","onOpen","List","ListItem","button","requestDesktopNotificationPermissions","ListItemIcon","ListItemText","primary","ListItemSecondaryAction","Switch","edge","checked","inputProps","onFocus","onBlur","disabled","Countdown","_name","_min","_max","_value","_intervalMs","timeout","startTime","undefined","_endTime","_running","_secondsLeft","jsonObject","endTime","running","secondsLeft","intervalMs","Date","now","update","Math","floor","setTimeout","clearTimeout","TimeFormat","timerSeconds","hours","minutes","seconds","returnStr","push","join","timerMinutes","APP_TITLE","DEFAULT_COUNTDOWNS","App","root","flexGrow","fillWidth","menuButton","marginRight","spacing","gridContainer","padding","paperContainer","sliderBox","paddingTop","workLength","breakLength","sidebarOpen","notificationSupport","countdowns","currentCountdownIndex","handleStartStopOnClick","updateCountdownState","updateSubscriber","nextCountdownIndex","countdown","localStorage","setItem","JSON","stringify","exportToJsonObject","currentCountdown","showNotification","body","start","stop","toString","stopTimer","startTimer","Grid","item","labelSuffix","thisCountdown","getItem","countdownsStr","parse","countdownJsonObject","loadFromJsonObject","runningCountdown","filter","parseInt","AppBar","position","Toolbar","color","aria-label","container","xs","lg","Paper","direction","renderSliders","getNextCountdown","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9bff2a48.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport {\n    Box,\n    IconButton,\n    Menu,\n    MenuItem,\n    Slider,\n    Theme,\n    Typography,\n    WithStyles, withStyles, createStyles,\n} from \"@material-ui/core\";\n\nimport SettingsIcon from '@material-ui/icons/Settings';\n\nconst styles = (theme: Theme) => createStyles({\n    fullWidth: {\n        width: '100%'\n    },\n\n    centeringGrid: {\n        display: 'flex'\n    },\n\n    listItemText: {\n        display: 'block'\n    },\n\n    sliderSpacing: {\n        width: '100%',\n        justifyContent: 'center',\n        verticalAlign: 'middle'\n    },\n\n    sliderLabelContainer: {\n        marginBottom: -16\n    },\n\n    sliderLabel: {\n        paddingRight: 10\n    }\n})\n\ninterface LabelSliderProps extends WithStyles<typeof styles> {\n    label: string,\n    labelSuffix: string,\n    value: number,\n    step: number,\n    min: number,\n    max: number,\n    onChange: Function,\n    formatCallback: Function\n}\n\ninterface LabelSliderState {\n    value: number\n    menuOpen: boolean\n    anchor?: HTMLButtonElement\n}\n\nexport const LabelSlider = withStyles(styles)(class LabelSliderComponent extends Component<LabelSliderProps, LabelSliderState> {\n    constructor(props: LabelSliderProps) {\n        super(props)\n        this.state = {\n            value: this.props.value,\n            menuOpen: false\n        }\n\n        this.handleOnChange = this.handleOnChange.bind(this)\n    }\n\n    handleOnChange(event: any, newValue: number | number[]) {\n        if (typeof newValue === 'number') {\n            this.setState({\n                value: newValue\n            })\n        } else if (typeof newValue === 'object') {\n            this.setState({\n                value: newValue[0]\n            })\n        }\n\n        this.props.onChange(this.state.value)\n    };\n\n\n    render() {\n        const { classes } = this.props\n        return (\n            <Box display='flex' flexDirection='column'>\n                <Menu\n                    id=\"simple-menu\"\n                    keepMounted\n                    open={this.state.menuOpen}\n                    anchorEl={this.state.anchor}\n                    onClose={() => {\n                        this.setState({ menuOpen: false })\n                    }}\n                >\n                    <MenuItem>Edit</MenuItem>\n                    <MenuItem>Delete</MenuItem>\n                </Menu>\n                <Box display='flex' flexDirection='row' flex='100%' alignItems='baseline' className={classes.sliderLabelContainer}>\n                    <Typography variant=\"subtitle1\" className={classes.sliderLabel}>{this.props.label}</Typography>\n                    <Typography variant=\"caption\" className={classes.sliderLabel}>({this.props.formatCallback(this.state.value)})</Typography>\n                </Box>\n                <Box display='flex' flex={1} flexDirection='row'>\n                    <Box m={1} flex='100%' display='flex' justifyContent='flex-start' alignItems='center'>\n                        <Slider\n                            value={this.state.value}\n                            step={this.props.step}\n                            min={this.props.min}\n                            max={this.props.max}\n                            onChange={this.handleOnChange}\n                            getAriaValueText={(value: number) => { return `${value}m` }}\n                            valueLabelDisplay=\"off\"\n                            aria-labelledby=\"break-length\"\n                        />\n                    </Box>\n                    <Box flex={1} display='flex' justifyContent='flex-end' alignItems='center'>\n                        <IconButton onClick={(event) => {\n                            this.setState({\n                                anchor: event.currentTarget,\n                                menuOpen: true\n                            })\n                        }}>\n                            <SettingsIcon />\n                        </IconButton>\n                    </Box>\n                </Box>\n            </Box>\n        )\n    }\n});\n","export abstract class Subscribable {\n    private subscribers: Map<String, (() => void)> = new Map()\n\n    public subscribe(id: string, callback: () => void) {\n        this.subscribers.set(id, callback)\n    }\n\n    public unsubscribe(id: string) {\n        this.subscribers.delete(id)\n    }\n\n    protected updateSubscribers() {\n        this.subscribers.forEach((value, key, map) => {\n            console.log(`updating subscriber ${key}`)\n            value()\n        })\n    }\n}\n","import { Subscribable } from '../../data/Subscribable'\n\nexport class NotificationService extends Subscribable {\n    private static _instance: NotificationService;\n    private _desktopNotificationSupport: boolean = false\n\n    public static get instance(): NotificationService {\n        return this._instance || (this._instance = new this())\n    }\n\n    private constructor() {\n        super()\n        this._desktopNotificationSupport = 'Notification' in window\n    }\n\n    public get desktopNotificationSupport(): boolean {\n        return this._desktopNotificationSupport\n    }\n\n    public get desktopNotificationEnabled() {\n        return this.desktopNotificationSupport && Notification.permission === 'granted'\n    }\n\n    public requestDesktopNotificationPermissions() {\n        if (this.desktopNotificationSupport && Notification.permission === 'default') {\n            Notification.requestPermission()\n                .then((value) => {this.updateSubscribers()})\n        }\n    }\n\n    public showNotification(\n        title: string,\n        options: NotificationOptions,\n        onclick: (notification: Notification, event: Event) => void = (\n            notification: Notification, event: Event\n        ) => {\n            notification.close(); window.focus()\n        }\n    ) {\n        let notification = new Notification(\n            title, options\n        )\n\n        notification.onclick = (event: Event) => (onclick(notification, event))\n    }\n}\n","import React, { Component } from 'react';\n\nimport {\n    createStyles,\n    Drawer,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    ListItemText,\n    Switch,\n    Theme,\n    WithStyles, withStyles\n} from '@material-ui/core';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport { NotificationService } from '../../services/notification';\n\nconst styles = (theme: Theme) => createStyles({\n    sideBar: {\n        width: 250\n    }\n})\n\nconst notificationService: NotificationService = NotificationService.instance\n\ninterface SidebarProps extends WithStyles<typeof styles> {\n    onOpen: Function,\n    onClose: Function\n}\n\ninterface SidebarState {\n    open: boolean,\n    notificationsEnabled: boolean\n}\n\nexport const Sidebar = withStyles(styles)(class SidebarComponent extends Component<SidebarProps, SidebarState> {\n    constructor(props: SidebarProps) {\n        super(props)\n        this.state = {\n            open: false,\n            notificationsEnabled: notificationService.desktopNotificationEnabled\n        }\n\n        // this.refreshNotificationState = this.refreshNotificationState.bind(this)\n    }\n\n    refreshNotificationState() {\n        if (this.state.notificationsEnabled !== notificationService.desktopNotificationEnabled) {\n            this.setState({\n                notificationsEnabled: notificationService.desktopNotificationEnabled\n            })\n        }\n    }\n\n    componentDidUpdate() {\n        this.refreshNotificationState()\n    }\n\n    componentDidMount() {\n        notificationService.subscribe(this.constructor.name, () => {\n            this.refreshNotificationState()\n        })\n    }\n\n    componentWillUnmount() {\n        notificationService.unsubscribe(this.constructor.name)\n    }\n\n    render() {\n        const classes = this.props.classes\n        return (\n            <Drawer\n                anchor='left'\n                open={this.props.onOpen()}\n                onClose={() => this.props.onClose()}\n            >\n                <div className={classes.sideBar} >\n                    <List>\n                        <ListItem\n                            button\n                            onClick={() => { notificationService.requestDesktopNotificationPermissions() }}\n                        >\n                            <ListItemIcon><NotificationsIcon /></ListItemIcon>\n                            <ListItemText primary=\"Notifications\" />\n                            <ListItemSecondaryAction>\n                                <Switch\n                                    edge=\"end\"\n                                    onClick={() => { notificationService.requestDesktopNotificationPermissions() }}\n                                    checked={this.state.notificationsEnabled}\n                                    inputProps={{ 'aria-labelledby': 'switch-list-label-bluetooth' }}\n                                    onFocus={() => this.refreshNotificationState()}\n                                    onBlur={() => this.refreshNotificationState()}\n                                    disabled={!notificationService.desktopNotificationSupport}\n                                />\n                            </ListItemSecondaryAction>\n                        </ListItem>\n                    </List>\n                </div>\n            </Drawer>\n        )\n    }\n\n});\n","import { Subscribable } from \"./Subscribable\";\n\nconst DEFAULT_VALUE = 0\nconst DEFAULT_MIN = 1\nconst DEFAULT_MAX = 90\nconst DEFAULT_INTERVAL_MS = 1000\n\nexport interface CountdownJsonObject {\n    startTime?: any,\n    endTime?: any,\n    running: any,\n    secondsLeft: any,\n    name: string,\n    min: number,\n    max: number,\n    value: number,\n    intervalMs: number,\n}\n\nexport class Countdown extends Subscribable {\n    private timeout: any\n\n    private startTime?: number = undefined;\n    private _endTime?: number = undefined;\n\n    private _running: boolean = false\n    private _secondsLeft: number = 0;\n\n    public constructor(\n        private _name: string = 'NO_NAME',\n        private _min: number = 1,\n        private _max: number = 90,\n        private _value: number = 0,\n        private _intervalMs: number = 1000,\n    ) {\n        super()\n\n    }\n\n    public loadFromJsonObject(jsonObject: CountdownJsonObject): Countdown {\n        this.startTime = jsonObject.startTime\n        this._endTime = jsonObject.endTime\n        this._running = jsonObject.running\n        this._secondsLeft = jsonObject.secondsLeft\n        this._name = jsonObject.name\n        this._min = jsonObject.min\n        this._max = jsonObject.max\n        this._value = jsonObject.value\n        this._intervalMs = jsonObject.intervalMs\n\n        return this\n    }\n\n    public exportToJsonObject(): CountdownJsonObject {\n        return {\n            startTime: this.startTime,\n            endTime: this.endTime,\n            running: this.running,\n            secondsLeft: this.secondsLeft,\n            name: this.name,\n            min: this.min,\n            max: this.max,\n            value: this.value,\n            intervalMs: this.intervalMs,\n        }\n    }\n\n    public get name(): string { return this._name || '' }\n\n    public get secondsLeft(): number { return this._secondsLeft }\n\n    public get running(): boolean { return this._running }\n\n    public get value(): number { return this._value ? this._value : DEFAULT_VALUE }\n    public set value(value: number) { this._value = value }\n\n    public get min(): number { return this._min ? this._min : DEFAULT_MIN }\n    public get max(): number { return this._max ? this._max : DEFAULT_MAX }\n    public get intervalMs(): number { return this._intervalMs ? this._intervalMs : DEFAULT_INTERVAL_MS }\n\n    public get endTime(): number | undefined { return this._endTime }\n\n    start() {\n        this._running = true\n        this.startTime = Date.now()\n        this._endTime = this.startTime + (this.value * 60 * 1000)\n\n        this.update()\n    }\n\n    stop() {\n        this._running = false\n        this.update()\n    }\n\n    update() {\n        if (this.endTime !== undefined) {\n            this._secondsLeft = Math.floor((this.endTime - Date.now()) / 1000)\n            if (this._running && this.secondsLeft > 0) {\n                this.timeout = setTimeout(() => this.update(), this.intervalMs)\n            } else {\n                this._running = false\n                this._secondsLeft = 0\n                clearTimeout(this.timeout)\n            }\n        }\n\n        this.updateSubscribers()\n    }\n}\n","\nexport class TimeFormat {\n    static seconds(timerSeconds: number): string {\n        let hours = Math.floor(timerSeconds / 60 / 60)\n        let minutes = Math.floor((timerSeconds - (hours * 60 * 60)) / 60)\n        let seconds = Math.floor(timerSeconds - (hours * 60 * 60) - (minutes * 60))\n\n        let returnStr: string[] = []\n\n        if (hours > 0) {\n            returnStr.push(`${hours}h`)\n        }\n\n        if (minutes > 0) {\n            returnStr.push(`${minutes}m`)\n        }\n\n        returnStr.push(`${seconds}s`)\n\n        return returnStr.join(' ')\n    }\n\n    static minutes(timerMinutes: number): string {\n        let hours = Math.floor(timerMinutes / 60)\n        let minutes = timerMinutes - (hours * 60)\n\n        let returnStr: string[] = []\n\n        if (hours > 0) {\n            returnStr.push(`${hours}h`)\n        }\n\n        returnStr.push(`${minutes}m`)\n\n        return returnStr.join(' ')\n    }\n}\n","import React, { Component } from 'react';\n\nimport {\n    AppBar,\n    createStyles,\n    Grid,\n    IconButton,\n    Paper,\n    Theme,\n    Toolbar,\n    Typography,\n    WithStyles, withStyles\n} from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Button from '@material-ui/core/Button/Button';\n\nimport './App.css';\nimport { LabelSlider } from './components/label-slider';\nimport { Sidebar } from './components/sidebar';\nimport { Countdown, CountdownJsonObject } from './data/Countdown'\nimport { TimeFormat } from './data/format/time'\n\nimport { NotificationService } from './services/notification'\n\nconst styles = (theme: Theme) => createStyles({\n    root: {\n        flexGrow: 1,\n    },\n\n    fillWidth: {\n        width: '100%',\n    },\n\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n\n    title: {\n        flexGrow: 1,\n    },\n\n    gridContainer: {\n        flexGrow: 1,\n        padding: 8,\n    },\n\n    paperContainer: {\n        padding: 8\n    },\n\n    sliderBox: {\n        paddingTop: 16\n    },\n\n});\n\ninterface AppProps extends WithStyles<typeof styles> { }\n\ninterface AppState {\n    workLength: number,\n    breakLength: number,\n    running: boolean,\n    secondsLeft: number,\n    currentCountdownIndex: number,\n    countdowns: Countdown[],\n    sidebarOpen: boolean,\n    notificationSupport: boolean,\n    endTime?: number,\n}\n\nconst APP_TITLE: string = 'Task Timer'\nconst DEFAULT_COUNTDOWNS: Countdown[] = [\n    new Countdown('Work', 1, 90, 50),\n    new Countdown('Break time', 1, 15, 10),\n]\n\nconst notificationService: NotificationService = NotificationService.instance\n\nconst App = withStyles(styles)(class AppComponent extends Component<AppProps, AppState> {\n    constructor(props: AppProps) {\n        super(props)\n\n        this.state = {\n            workLength: 50,\n            breakLength: 10,\n            running: false,\n            secondsLeft: 0,\n            sidebarOpen: false,\n            notificationSupport: \"Notification\" in window,\n            countdowns: DEFAULT_COUNTDOWNS,\n            currentCountdownIndex: 0\n        }\n\n        this.handleStartStopOnClick = this.handleStartStopOnClick.bind(this)\n        this.updateCountdownState = this.updateCountdownState.bind(this)\n        this.updateSubscriber = this.updateSubscriber.bind(this)\n    }\n\n    get currentCountdown(): Countdown {\n        return this.state.countdowns[this.state.currentCountdownIndex]\n    }\n\n    get nextCountdownIndex(): number {\n        return (this.state.currentCountdownIndex + 1) % this.state.countdowns.length\n    }\n\n    getNextCountdown(): Countdown {\n        return this.state.countdowns[this.nextCountdownIndex]\n    }\n\n    updateCountdownState(countdown: Countdown) {\n        this.setState({\n            secondsLeft: countdown.secondsLeft,\n            running: countdown.running\n        })\n\n        localStorage.setItem(\n            'countdowns',\n            JSON.stringify(\n                this.state.countdowns.map((countdown) => countdown.exportToJsonObject())\n            )\n        )\n    }\n\n    updateSubscriber() {\n        this.updateCountdownState(this.currentCountdown)\n\n        if (!this.currentCountdown.running) {\n            notificationService.showNotification(\n                APP_TITLE,\n                {\n                    body: `${this.currentCountdown.name} done`\n                }\n            )\n            this.currentCountdown.unsubscribe(this.constructor.name)\n        }\n    }\n\n    startTimer() {\n        this.currentCountdown.subscribe(this.constructor.name, this.updateSubscriber)\n        this.currentCountdown.start()\n    }\n\n    stopTimer() {\n        this.currentCountdown.unsubscribe(this.constructor.name)\n        this.currentCountdown.stop()\n        this.updateCountdownState(this.currentCountdown)\n\n        this.setState({\n            currentCountdownIndex: this.nextCountdownIndex\n        })\n\n        localStorage.setItem('currentCountdownIndex', this.nextCountdownIndex.toString())\n    }\n\n    handleStartStopOnClick() {\n        if (!this.state.running) {\n            this.startTimer()\n        } else {\n            this.stopTimer()\n        }\n    }\n\n    renderSliders() {\n        return this.state.countdowns.map((countdown) =>\n            <Grid item key={countdown.name}>\n                <LabelSlider\n                    label={countdown.name}\n                    labelSuffix=\"m\"\n                    value={countdown.value}\n                    step={1}\n                    min={countdown.min}\n                    max={countdown.max}\n                    onChange={(value: number, thisCountdown: Countdown = countdown) => {\n                        thisCountdown.value = value\n                    }}\n                    formatCallback={(value: number) => TimeFormat.minutes(value)}\n                />\n            </Grid>\n        )\n    }\n\n    componentDidMount() {\n        notificationService.requestDesktopNotificationPermissions()\n\n        // Load from state\n        const currentCountdownIndex = localStorage.getItem('currentCountdownIndex')\n        const countdownsStr = localStorage.getItem('countdowns')\n\n        if (countdownsStr !== null) {\n            const countdowns = JSON.parse(countdownsStr).map((countdownJsonObject: CountdownJsonObject) => {\n                return new Countdown().loadFromJsonObject(countdownJsonObject)\n            })\n\n            this.setState({\n                countdowns: countdowns,\n            })\n\n            const runningCountdown: Countdown = countdowns.filter((countdown: Countdown) => {return countdown.running})[0]\n\n            if (runningCountdown) {\n                runningCountdown.update()\n                runningCountdown.subscribe(this.constructor.name, this.updateSubscriber)\n                this.updateCountdownState(runningCountdown)\n            }\n        }\n\n        this.setState({\n            currentCountdownIndex: currentCountdownIndex ? parseInt(currentCountdownIndex) : this.state.currentCountdownIndex\n        })\n    }\n\n    render() {\n        const classes = this.props.classes\n        return (\n            <div className={classes.root}>\n                <AppBar position=\"static\">\n                    <Toolbar>\n                        <IconButton\n                            edge=\"start\"\n                            className={classes.menuButton}\n                            color=\"inherit\" aria-label=\"menu\"\n                            onClick={() => {\n                                this.setState({ sidebarOpen: true })\n                            }}\n                        >\n                            <MenuIcon />\n                        </IconButton>\n                        <Typography variant=\"h6\" className={classes.title}>\n                            {APP_TITLE}\n                        </Typography>\n                    </Toolbar>\n                </AppBar>\n                <Sidebar\n                    onOpen={() => this.state.sidebarOpen}\n                    onClose={() => {\n                        this.setState({sidebarOpen: false})\n                    }}\n                />\n                <Grid container className={classes.gridContainer} spacing={2}>\n                    <Grid item xs={12} lg={2}> <Paper className={classes.paperContainer}>\n                        <Grid container direction=\"column\" spacing={2}>\n                            <Grid item>\n                                <Typography variant=\"h5\">\n                                    Timers\n                                </Typography>\n                            </Grid>\n                            <Grid item>\n                                {this.renderSliders()}\n                            </Grid>\n                            <Grid item>\n                                <Button variant=\"contained\" className={classes.fillWidth} onClick={this.handleStartStopOnClick}>\n                                    {this.state.running ? 'Stop' : 'Start'}\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    </Paper> </Grid>\n                    <Grid item xs>\n                        <Paper className={classes.paperContainer}>\n                            <Typography variant=\"h5\">{this.state.running ? \"Running\" : \"On deck\"}: {this.currentCountdown.name}</Typography>\n                            <Typography variant=\"h6\">Time left {TimeFormat.seconds(this.state.secondsLeft)}</Typography>\n                            <Typography variant=\"caption\">Up next: {this.getNextCountdown().name}</Typography>\n                        </Paper>\n                    </Grid>\n                </Grid>\n            </div>\n        );\n    }\n});\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}