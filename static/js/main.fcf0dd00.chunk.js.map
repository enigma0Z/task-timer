{"version":3,"sources":["components/LabelSlider.tsx","data/Subscribable.ts","services/notification/index.ts","components/Sidebar.tsx","components/ConfirmationModal.tsx","data/Countdown.ts","data/format/Time.ts","App.tsx","index.tsx"],"names":["LabelSlider","withStyles","theme","createStyles","fullWidth","width","centeringGrid","display","listItemText","sliderSpacing","justifyContent","verticalAlign","sliderLabelContainer","marginBottom","sliderLabel","paddingRight","editPopover","padding","editContainer","props","popoverRef","state","value","label","editLabel","min","editMin","max","editMax","step","menuOpen","editing","labelError","minError","maxError","React","createRef","handleOnChange","bind","handleKeyPress","openPopover","closePopover","saveForm","cancelEdit","isNaN","event","newValue","this","setState","onChange","key","onEditSave","classes","Box","flexDirection","flex","alignItems","className","Typography","variant","formatCallback","m","Slider","getAriaValueText","valueLabelDisplay","aria-labelledby","IconButton","onClick","Popover","open","anchorEl","current","anchorOrigin","vertical","horizontal","transformOrigin","onClose","onEscapeKeyDown","Grid","container","item","xs","TextField","error","margin","size","target","onKeyPress","parseInt","getMinError","getMaxError","color","ref","renderNormalView","renderEditPopover","Component","defaultProps","Subscribable","subscribers","Map","id","callback","set","delete","forEach","map","console","log","NotificationService","_desktopNotificationSupport","window","_instance","desktopNotificationSupport","Notification","permission","requestPermission","then","updateSubscribers","title","options","onclick","notification","close","focus","notificationService","instance","Sidebar","sideBar","notificationsEnabled","desktopNotificationEnabled","refreshNotificationState","subscribe","constructor","name","unsubscribe","Drawer","anchor","List","ListItem","button","requestDesktopNotificationPermissions","ListItemIcon","ListItemText","primary","ListItemSecondaryAction","Switch","edge","checked","inputProps","onFocus","onBlur","disabled","Divider","resetCallback","ConfirmationModal","modal","border","Modal","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","Card","direction","alignContent","subtitle","onConfirm","buttonText","Countdown","_name","_min","_max","_value","_intervalMs","startTime","undefined","_endTime","_running","_secondsLeft","jsonObject","endTime","running","secondsLeft","intervalMs","Date","now","update","Math","floor","setTimeout","clearTimeout","TimeFormat","timerSeconds","hours","minutes","seconds","returnStr","push","join","timerMinutes","APP_TITLE","DEFAULT_COUNTDOWNS","App","root","flexGrow","overflow","fillWidth","menuButton","marginRight","spacing","gridContainer","paperContainer","sliderBox","paddingTop","popperCardStyle","paddingLeft","backgroundColor","palette","grey","height","popperContentsStyle","statusStyle","marginTop","sliderRefs","currentCountdownIndex","localStorage","getItem","countdownsStr","countdowns","JSON","parse","countdownJsonObject","loadFromJsonObject","runningCountdown","filter","countdown","workLength","breakLength","sidebarOpen","notificationSupport","editingOrder","confirmDeleteOpen","confirmDeleteIndex","confirmDeleteName","confirmResetOpen","handleStartStopOnClick","updateCountdownState","updateSubscriber","saveCountdownsToLocalStorage","swapCountdowns","deleteCountdown","currentCountdown","a","b","lower","higher","RangeError","newCountdowns","slice","currentCountdowns","index","nextCountdownIndex","setItem","stringify","exportToJsonObject","showNotification","body","stopTimer","start","stop","toString","startTimer","elements","i","upDisabled","downDisabled","length","justifyItems","labelSuffix","thisCountdown","forceUpdate","AppBar","position","Toolbar","aria-label","md","lg","Paper","renderSliders","sm","getNextCountdown","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fcf0dd00.chunk.js","sourcesContent":["import React, { ChangeEvent, Component, KeyboardEvent, RefObject } from \"react\";\n\nimport {\n    Box,\n    IconButton,\n    Slider,\n    Theme,\n    Typography,\n    WithStyles,\n    withStyles,\n    createStyles,\n    TextField,\n    Grid,\n    Popover\n} from \"@material-ui/core\";\n\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport CheckIcon from '@material-ui/icons/Check';\n\nconst styles = (theme: Theme) => createStyles({\n    fullWidth: {\n        width: '100%'\n    },\n\n    centeringGrid: {\n        display: 'flex'\n    },\n\n    listItemText: {\n        display: 'block'\n    },\n\n    sliderSpacing: {\n        width: '100%',\n        justifyContent: 'center',\n        verticalAlign: 'middle'\n    },\n\n    sliderLabelContainer: {\n        marginBottom: -16\n    },\n\n    sliderLabel: {\n        paddingRight: 10\n    },\n\n    editPopover: {\n        padding: 8\n    },\n\n    editContainer: {\n        paddingRight: 8,\n    }\n})\n\ninterface LabelSliderProps extends WithStyles<typeof styles> {\n    label: string,\n    labelSuffix: string,\n    value: number,\n    step: number,\n    min: number,\n    max: number,\n    editing: boolean,\n    onChange: (value: number) => void,\n    onEditSave: (name: string, min: number, max: number) => void,\n    formatCallback: Function\n}\n\ninterface LabelSliderState {\n    value: number\n    label: string,\n    editLabel: string,\n    min: number,\n    editMin: number,\n    max: number,\n    editMax: number,\n    step: number,\n    menuOpen: boolean\n    editing: boolean\n    anchor?: HTMLElement\n    labelError: boolean,\n    minError: boolean,\n    maxError: boolean,\n}\n\nexport const LabelSlider = withStyles(styles)(class LabelSliderComponent extends Component<LabelSliderProps, LabelSliderState> {\n    private popoverRef: RefObject<any>\n\n    static defaultProps = {\n        editing: false\n    }\n\n    constructor(props: LabelSliderProps) {\n        super(props)\n        this.state = {\n            value: this.props.value,\n            label: this.props.label,\n            editLabel: this.props.label,\n            min: this.props.min,\n            editMin: this.props.min,\n            max: this.props.max,\n            editMax: this.props.max,\n            step: this.props.step,\n            menuOpen: false,\n            editing: this.props.editing,\n            labelError: false,\n            minError: false,\n            maxError: false\n        }\n\n        this.popoverRef = React.createRef()\n\n        this.handleOnChange = this.handleOnChange.bind(this)\n        this.handleKeyPress = this.handleKeyPress.bind(this)\n        this.openPopover = this.openPopover.bind(this)\n        this.closePopover = this.closePopover.bind(this)\n        this.saveForm = this.saveForm.bind(this)\n        this.cancelEdit = this.cancelEdit.bind(this)\n    }\n\n    getMinError(min: number, max: number): boolean {\n        return isNaN(min) || min < 1 || min > max\n    }\n\n    getMaxError(min: number, max: number): boolean {\n        return isNaN(max) || max < 1 || max < min\n    }\n\n    handleOnChange(event: any, newValue: number | number[]) {\n        if (typeof newValue === 'number') {\n            this.setState({\n                value: newValue\n            })\n            this.props.onChange(newValue)\n        } else if (typeof newValue === 'object') {\n            this.setState({\n                value: newValue[0]\n            })\n            this.props.onChange(newValue[0])\n        }\n\n    }\n\n    handleKeyPress(event: KeyboardEvent) {\n        if (event.key === 'Enter') {\n            this.saveForm()\n        }\n    }\n\n    openPopover() {\n        this.setState({\n            editing: true,\n            editLabel: this.state.label,\n            editMin: this.state.min,\n            editMax: this.state.max\n        })\n    }\n\n    closePopover() {\n        this.setState({\n            editing: false\n        })\n    }\n\n    saveForm() {\n        if (!(this.state.labelError || this.state.minError || this.state.maxError)) {\n            let value: number\n            if (this.state.value > this.state.editMax) {\n                value = this.state.editMax\n            } else if (this.state.value < this.state.editMin) {\n                value = this.state.editMin\n            } else (\n                value = this.state.value\n            )\n\n            this.props.onEditSave(this.state.editLabel, this.state.editMin, this.state.editMax)\n\n            this.setState({\n                value: value,\n                label: this.state.editLabel,\n                min: this.state.editMin,\n                max: this.state.editMax\n            })\n\n            this.closePopover()\n        }\n\n    }\n\n    cancelEdit() {\n        this.setState({\n            labelError: false,\n            minError: false,\n            maxError: false\n        })\n        this.closePopover()\n    }\n\n    renderNormalView() {\n        const { classes } = this.props\n        return (\n            <>\n                <Box display='flex' flexDirection='row' flex='100%' alignItems='baseline' className={classes.sliderLabelContainer}>\n                    <Typography variant=\"subtitle1\" className={classes.sliderLabel}>{this.state.label}</Typography>\n                    <Typography variant=\"caption\" className={classes.sliderLabel}>({this.props.formatCallback(this.state.value)})</Typography>\n                </Box>\n                <Box display='flex' flex={1} flexDirection='row'>\n                    <Box m={1} flex='100%' display='flex' justifyContent='flex-start' alignItems='center'>\n                        <Slider\n                            value={this.state.value}\n                            step={this.state.step}\n                            min={this.state.min}\n                            max={this.state.max}\n                            onChange={this.handleOnChange}\n                            getAriaValueText={(value: number) => { return `${value}m` }}\n                            valueLabelDisplay=\"off\"\n                            aria-labelledby=\"break-length\"\n                        />\n                    </Box>\n                    <Box flex={1} display='flex' justifyContent='flex-end' alignItems='center'>\n                        <IconButton onClick={(event) => {\n                            this.openPopover()\n                        }}>\n                            <EditOutlinedIcon />\n                        </IconButton>\n                    </Box>\n                </Box>\n            </>\n        )\n    }\n\n    renderEditPopover() {\n        const classes = this.props.classes\n        return (\n            <Popover\n                open={this.state.editing}\n                anchorEl={this.popoverRef.current}\n                anchorOrigin={{ vertical: 'center', horizontal: 'left' }}\n                transformOrigin={{ vertical: 'center', horizontal: 'left' }}\n                onClose={this.cancelEdit}\n                onEscapeKeyDown={this.cancelEdit}\n            >\n                <Box display='flex' flex={1} flexDirection='row' className={classes.editPopover}>\n                    <Grid container>\n                        <Grid item xs={6} className={classes.editContainer}>\n                            <TextField\n                                fullWidth\n                                label=\"Name\"\n                                error={this.state.labelError}\n                                value={this.state.editLabel}\n                                margin='dense'\n                                size='small'\n                                variant='outlined'\n                                onChange={(event: ChangeEvent<HTMLTextAreaElement>) => {\n                                    this.setState({\n                                        editLabel: event.target.value,\n                                        labelError: (\n                                            event.target.value === ''\n                                        )\n                                    })\n                                }}\n                                onKeyPress={this.handleKeyPress}\n                            />\n                        </Grid>\n                        <Grid item xs={3} className={classes.editContainer}>\n                            <TextField\n                                label=\"Min\"\n                                error={this.state.minError}\n                                value={this.state.editMin}\n                                size='small'\n                                variant=\"outlined\"\n                                margin='dense'\n                                onChange={(event: ChangeEvent<HTMLTextAreaElement>) => {\n                                    const value = parseInt(event.target.value)\n                                    this.setState({\n                                        editMin: value || 0,\n                                        minError: this.getMinError(value, this.state.max),\n                                        maxError: this.getMaxError(value, this.state.max)\n                                    })\n                                }}\n                                onKeyPress={this.handleKeyPress}\n                            />\n                        </Grid>\n                        <Grid item xs={3} className={classes.editContainer}>\n                            <TextField\n                                label=\"Max\"\n                                error={this.state.maxError}\n                                value={this.state.editMax}\n                                size='small'\n                                variant=\"outlined\"\n                                margin='dense'\n                                onChange={(event: ChangeEvent<HTMLTextAreaElement>) => {\n                                    const value = parseInt(event.target.value)\n                                    this.setState({\n                                        editMax: value || 0,\n                                        minError: this.getMinError(this.state.min, value),\n                                        maxError: this.getMaxError(this.state.min, value)\n                                    })\n                                }}\n                                onKeyPress={this.handleKeyPress}\n                            />\n                        </Grid>\n                    </Grid>\n                    <Box flex={1} display='flex' justifyContent='flex-end' alignItems='center'>\n                        <IconButton onClick={this.saveForm}>\n                            <CheckIcon color='primary' />\n                        </IconButton>\n                        <IconButton onClick={this.cancelEdit}>\n                            <CancelIcon color='secondary' />\n                        </IconButton>\n                    </Box>\n                </Box>\n            </Popover>\n        )\n    }\n\n    render() {\n        return (\n            <div ref={this.popoverRef}> {/* So the popover can have its origin on the row */}\n                <Box display='flex' flexDirection='column'>\n                    {this.renderNormalView()}\n                    {this.renderEditPopover()}\n                </Box>\n            </div>\n        )\n    }\n});\n","export abstract class Subscribable {\n    private subscribers: Map<String, (() => void)> = new Map()\n\n    public subscribe(id: string, callback: () => void) {\n        this.subscribers.set(id, callback)\n    }\n\n    public unsubscribe(id: string) {\n        this.subscribers.delete(id)\n    }\n\n    protected updateSubscribers() {\n        this.subscribers.forEach((value, key, map) => {\n            console.log(`updating subscriber ${key}`)\n            value()\n        })\n    }\n}\n","import { Subscribable } from '../../data/Subscribable'\n\nexport class NotificationService extends Subscribable {\n    private static _instance: NotificationService;\n    private _desktopNotificationSupport: boolean = false\n\n    public static get instance(): NotificationService {\n        return this._instance || (this._instance = new this())\n    }\n\n    private constructor() {\n        super()\n        this._desktopNotificationSupport = 'Notification' in window\n    }\n\n    public get desktopNotificationSupport(): boolean {\n        return this._desktopNotificationSupport\n    }\n\n    public get desktopNotificationEnabled() {\n        return this.desktopNotificationSupport && Notification.permission === 'granted'\n    }\n\n    public requestDesktopNotificationPermissions() {\n        if (this.desktopNotificationSupport && Notification.permission === 'default') {\n            Notification.requestPermission()\n                .then((value) => { this.updateSubscribers() })\n        }\n    }\n\n    public showNotification(\n        title: string,\n        options: NotificationOptions,\n        onclick: (notification: Notification, event: Event) => void = (\n            notification: Notification, event: Event\n        ) => {\n            notification.close(); window.focus()\n        }\n    ) {\n        let notification = new Notification(\n            title, options\n        )\n\n        notification.onclick = (event: Event) => (onclick(notification, event))\n    }\n}\n","import React, { Component } from 'react';\n\nimport {\n    createStyles,\n    Divider,\n    Drawer,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    ListItemText,\n    Switch,\n    Theme,\n    WithStyles, withStyles\n} from '@material-ui/core';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport { NotificationService } from '../services/notification';\n\nconst styles = (theme: Theme) => createStyles({\n    sideBar: {\n        width: 250\n    }\n})\n\nconst notificationService: NotificationService = NotificationService.instance\n\ninterface SidebarProps extends WithStyles<typeof styles> {\n    open: boolean,\n    onClose: Function,\n    resetCallback: () => void\n}\n\ninterface SidebarState {\n    notificationsEnabled: boolean\n}\n\nexport const Sidebar = withStyles(styles)(class SidebarComponent extends Component<SidebarProps, SidebarState> {\n    constructor(props: SidebarProps) {\n        super(props)\n        this.state = {\n            notificationsEnabled: notificationService.desktopNotificationEnabled\n        }\n    }\n\n    refreshNotificationState() {\n        if (this.state.notificationsEnabled !== notificationService.desktopNotificationEnabled) {\n            this.setState({\n                notificationsEnabled: notificationService.desktopNotificationEnabled\n            })\n        }\n    }\n\n    componentDidUpdate() {\n        this.refreshNotificationState()\n    }\n\n    componentDidMount() {\n        notificationService.subscribe(this.constructor.name, () => {\n            this.refreshNotificationState()\n        })\n    }\n\n    componentWillUnmount() {\n        notificationService.unsubscribe(this.constructor.name)\n    }\n\n    render() {\n        const classes = this.props.classes\n        return (\n            <Drawer\n                anchor='left'\n                open={this.props.open}\n                onClose={() => this.props.onClose()}\n            >\n                <div className={classes.sideBar} >\n                    <List>\n                        <ListItem\n                            button\n                            onClick={() => { notificationService.requestDesktopNotificationPermissions() }}\n                        >\n                            <ListItemIcon><NotificationsIcon /></ListItemIcon>\n                            <ListItemText primary=\"Notifications\" />\n                            <ListItemSecondaryAction>\n                                <Switch\n                                    edge=\"end\"\n                                    onClick={() => { notificationService.requestDesktopNotificationPermissions() }}\n                                    checked={this.state.notificationsEnabled}\n                                    inputProps={{ 'aria-labelledby': 'switch-list-label-bluetooth' }}\n                                    onFocus={() => this.refreshNotificationState()}\n                                    onBlur={() => this.refreshNotificationState()}\n                                    disabled={!notificationService.desktopNotificationSupport}\n                                />\n                            </ListItemSecondaryAction>\n                        </ListItem>\n                        <Divider />\n                        <ListItem\n                            button\n                            onClick={this.props.resetCallback}\n                        >\n                            <ListItemText primary='Reset to defaults' />\n                        </ListItem>\n                    </List>\n                </div>\n            </Drawer>\n        )\n    }\n\n});\n","import { Backdrop, Button, Card, createStyles, Fade, Grid, Modal, Theme, Typography, WithStyles, withStyles } from \"@material-ui/core\"\nimport React, { Component } from \"react\"\n\nconst styles = (theme: Theme) => createStyles({\n    modal: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        padding: 8,\n        border: 'none'\n    },\n});\n\ninterface ConfirmationModalProps extends WithStyles<typeof styles> {\n    onClose: () => void\n    onConfirm: () => void\n    open: boolean\n    title: string\n    subtitle: string\n    buttonText: string\n}\n\ninterface ConfirmationModalState { }\n\nexport const ConfirmationModal = withStyles(styles)(class ConfirmationModalComponent extends Component<ConfirmationModalProps, ConfirmationModalState> {\n    static defaultProps = {\n        title: 'Are you sure?',\n        subtitle: 'This action cannot be undone',\n        buttonText: 'Continue'\n    }\n\n    render() {\n        const classes = this.props.classes\n        return (\n            <Modal\n                open={this.props.open}\n                onClose={this.props.onClose}\n                closeAfterTransition\n                className={classes.modal}\n                BackdropComponent={Backdrop}\n                BackdropProps={{\n                    timeout: 500,\n                }}\n            >\n                <Fade in={this.props.open}>\n                    <Card className={classes.modal}>\n                        <Grid container direction='column' alignItems='center' alignContent='center'>\n                            <Grid item xs>\n                                <Typography variant='h4'>{this.props.title}</Typography>\n                            </Grid>\n                            <Grid item xs>\n                                <Typography variant='subtitle1'>{this.props.subtitle}</Typography><br />\n                            </Grid>\n                            <Button\n                                color='secondary'\n                                variant='contained'\n                                onClick={this.props.onConfirm}\n                            >\n                                <Grid item xs>\n                                    {this.props.buttonText}\n                                </Grid>\n                            </Button>\n                        </Grid>\n                    </Card>\n                </Fade>\n            </Modal>\n        )\n    }\n})\n","import { Subscribable } from \"./Subscribable\";\n\nconst DEFAULT_VALUE = 0\nconst DEFAULT_MIN = 1\nconst DEFAULT_MAX = 90\nconst DEFAULT_INTERVAL_MS = 1000\n\nconst SHORT_TIMER = false // For debug purposes\nexport interface CountdownJsonObject {\n    startTime?: any,\n    endTime?: any,\n    running: any,\n    secondsLeft: any,\n    name: string,\n    min: number,\n    max: number,\n    value: number,\n    intervalMs: number,\n}\n\nexport class Countdown extends Subscribable {\n    private timeout: any\n\n    private startTime?: number = undefined;\n    private _endTime?: number = undefined;\n\n    private _running: boolean = false\n    private _secondsLeft: number = 0;\n\n    public constructor(\n        private _name: string = 'NEW',\n        private _min: number = 1,\n        private _max: number = 90,\n        private _value: number = 0,\n        private _intervalMs: number = 1000,\n    ) {\n        super()\n    }\n\n    public loadFromJsonObject(jsonObject: CountdownJsonObject): Countdown {\n        this.startTime = jsonObject.startTime\n        this._endTime = jsonObject.endTime\n        this._running = jsonObject.running\n        this._secondsLeft = jsonObject.secondsLeft\n        this._name = jsonObject.name\n        this._min = jsonObject.min\n        this._max = jsonObject.max\n        this._value = jsonObject.value\n        this._intervalMs = jsonObject.intervalMs\n\n        return this\n    }\n\n    public exportToJsonObject(): CountdownJsonObject {\n        return {\n            startTime: this.startTime,\n            endTime: this.endTime,\n            running: this.running,\n            secondsLeft: this.secondsLeft,\n            name: this.name,\n            min: this.min,\n            max: this.max,\n            value: this.value,\n            intervalMs: this.intervalMs,\n        }\n    }\n\n    public get name(): string { return this._name }\n    public set name(name: string) { this._name = name }\n\n    public get secondsLeft(): number { return this._secondsLeft }\n\n    public get running(): boolean { return this._running }\n\n    public get value(): number { return this._value ? this._value : DEFAULT_VALUE }\n    public set value(value: number) { this._value = value }\n\n    public get min(): number { return this._min ? this._min : DEFAULT_MIN }\n    public set min(min: number) { this._min = min }\n\n    public get max(): number { return this._max ? this._max : DEFAULT_MAX }\n    public set max(max: number) { this._max = max }\n\n    public get intervalMs(): number { return this._intervalMs ? this._intervalMs : DEFAULT_INTERVAL_MS }\n\n    public get endTime(): number | undefined { return this._endTime }\n\n    start() {\n        this._running = true\n        this.startTime = Date.now()\n        if (SHORT_TIMER) {\n            this._endTime = this.startTime + 2 * 1000\n        } else {\n            this._endTime = this.startTime + (this.value * 60 * 1000)\n        }\n\n        this.update()\n    }\n\n    stop() {\n        this._running = false\n        this.update()\n    }\n\n    update() {\n        if (this.endTime !== undefined) {\n            this._secondsLeft = Math.floor((this.endTime - Date.now()) / 1000)\n            if (this._running && this.secondsLeft > 0) {\n                this.timeout = setTimeout(() => this.update(), this.intervalMs)\n            } else {\n                this._running = false\n                this._secondsLeft = 0\n                clearTimeout(this.timeout)\n            }\n        }\n\n        this.updateSubscribers()\n    }\n}\n","\nexport class TimeFormat {\n    static seconds(timerSeconds: number): string {\n        let hours = Math.floor(timerSeconds / 60 / 60)\n        let minutes = Math.floor((timerSeconds - (hours * 60 * 60)) / 60)\n        let seconds = Math.floor(timerSeconds - (hours * 60 * 60) - (minutes * 60))\n\n        let returnStr: string[] = []\n\n        if (hours > 0) {\n            returnStr.push(`${hours}h`)\n        }\n\n        if (minutes > 0) {\n            returnStr.push(`${minutes}m`)\n        }\n\n        returnStr.push(`${seconds}s`)\n\n        return returnStr.join(' ')\n    }\n\n    static minutes(timerMinutes: number): string {\n        let hours = Math.floor(timerMinutes / 60)\n        let minutes = timerMinutes - (hours * 60)\n\n        let returnStr: string[] = []\n\n        if (hours > 0) {\n            returnStr.push(`${hours}h`)\n        }\n\n        returnStr.push(`${minutes}m`)\n\n        return returnStr.join(' ')\n    }\n}\n","import React, { Component } from 'react';\n\nimport {\n    AppBar,\n    Box,\n    Card,\n    createStyles,\n    Grid,\n    IconButton,\n    Paper,\n    Theme,\n    Toolbar,\n    Typography,\n    WithStyles, withStyles\n} from '@material-ui/core';\nimport Button from '@material-ui/core/Button/Button';\n\nimport { LabelSlider } from './components/LabelSlider';\nimport { Sidebar } from './components/Sidebar';\nimport { ConfirmationModal } from './components/ConfirmationModal';\nimport { Countdown, CountdownJsonObject } from './data/Countdown'\nimport { TimeFormat } from './data/format/Time'\n\nimport { NotificationService } from './services/notification'\n\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport AddIcon from '@material-ui/icons/Add';\n\nconst styles = (theme: Theme) => createStyles({\n    root: {\n        flexGrow: 1,\n        overflow: 'hidden'\n    },\n\n    fillWidth: {\n        width: '100%',\n    },\n\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n\n    title: {\n        flexGrow: 1,\n    },\n\n    gridContainer: {\n        flexGrow: 1,\n        padding: 8,\n    },\n\n    paperContainer: {\n        padding: 8\n    },\n\n    sliderBox: {\n        paddingTop: 16\n    },\n\n    popperCardStyle: {\n        paddingLeft: theme.spacing(1),\n        backgroundColor: theme.palette.grey[50],\n        margin: 8,\n        height: '100%'\n    },\n\n    popperContentsStyle: {\n        marginRight: 8\n    },\n\n    modal: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        padding: 8,\n        border: 'none'\n    },\n\n    statusStyle: {\n        marginTop: -0.5,\n        marginBottom: -1\n    }\n});\n\ninterface AppProps extends WithStyles<typeof styles> { }\n\ninterface AppState {\n    workLength: number,\n    breakLength: number,\n    running: boolean,\n    secondsLeft: number,\n    currentCountdownIndex: number,\n    countdowns: Countdown[],\n    sidebarOpen: boolean,\n    notificationSupport: boolean,\n    endTime?: number,\n    editingOrder: boolean,\n    confirmDeleteOpen: boolean\n    confirmDeleteIndex: number\n    confirmDeleteName: string\n    confirmResetOpen: boolean\n}\n\nconst APP_TITLE: string = 'Task Timer'\nconst DEFAULT_COUNTDOWNS: Countdown[] = [\n    new Countdown('Work', 1, 90, 50),\n    new Countdown('Break time', 1, 15, 10),\n]\n\nconst notificationService: NotificationService = NotificationService.instance\n\nconst App = withStyles(styles)(class AppComponent extends Component<AppProps, AppState> {\n    public sliderRefs: any[] = []\n\n    constructor(props: AppProps) {\n        super(props)\n\n        const currentCountdownIndex = localStorage.getItem('currentCountdownIndex')\n        const countdownsStr = localStorage.getItem('countdowns')\n        let countdowns = DEFAULT_COUNTDOWNS\n\n        if (countdownsStr !== null) {\n            countdowns = JSON.parse(countdownsStr).map((countdownJsonObject: CountdownJsonObject) => {\n                return new Countdown().loadFromJsonObject(countdownJsonObject)\n            })\n        }\n\n        let secondsLeft = 0\n        let running = false\n        const runningCountdown: Countdown = countdowns.filter((countdown: Countdown) => { return countdown.running })[0]\n\n        if (runningCountdown) {\n            runningCountdown.update()\n            secondsLeft = runningCountdown.secondsLeft\n            running = true\n        }\n\n        this.state = {\n            workLength: 50,\n            breakLength: 10,\n            running: running,\n            secondsLeft: secondsLeft,\n            sidebarOpen: false,\n            notificationSupport: \"Notification\" in window,\n            countdowns: countdowns,\n            currentCountdownIndex: currentCountdownIndex ? parseInt(currentCountdownIndex) : 0,\n            editingOrder: false,\n            confirmDeleteOpen: false,\n            confirmDeleteIndex: 0,\n            confirmDeleteName: '',\n            confirmResetOpen: false,\n        }\n\n        this.handleStartStopOnClick = this.handleStartStopOnClick.bind(this)\n        this.updateCountdownState = this.updateCountdownState.bind(this)\n        this.updateSubscriber = this.updateSubscriber.bind(this)\n        this.saveCountdownsToLocalStorage = this.saveCountdownsToLocalStorage.bind(this)\n        this.swapCountdowns = this.swapCountdowns.bind(this)\n        this.deleteCountdown = this.deleteCountdown.bind(this)\n    }\n\n    componentDidMount() {\n        notificationService.requestDesktopNotificationPermissions()\n        if (this.state.running) {\n            this.currentCountdown.subscribe(this.constructor.name, this.updateSubscriber)\n        }\n    }\n\n    get currentCountdown(): Countdown {\n        if (this.state.countdowns[this.state.currentCountdownIndex] === undefined) {\n            this.setState({\n                currentCountdownIndex: 0\n            })\n            localStorage.setItem('currentCountdownIndex', '0')\n            return this.state.countdowns[0]\n        } else {\n            return this.state.countdowns[this.state.currentCountdownIndex]\n        }\n    }\n\n    get nextCountdownIndex(): number {\n        return (this.state.currentCountdownIndex + 1) % this.state.countdowns.length\n    }\n\n    swapCountdowns(a: number, b: number) {\n        let lower: number\n        let higher: number\n        if (a < b) {\n            lower = a\n            higher = b\n        } else if (b < a) {\n            lower = b\n            higher = a\n        } else {\n            throw new RangeError('Cannot swap an element with itself')\n        }\n\n        console.log({\n            lower: lower,\n            higher: higher\n        })\n\n        if (this.state.currentCountdownIndex === lower) this.setState({ currentCountdownIndex: higher })\n        else if (this.state.currentCountdownIndex === higher) this.setState({ currentCountdownIndex: lower })\n\n        let newCountdowns = [\n            ...this.state.countdowns.slice(0, lower),\n            this.state.countdowns[higher],\n            this.state.countdowns[lower],\n            ...this.state.countdowns.slice(higher + 1)\n        ]\n\n        console.log({\n            currentCountdowns: this.state.countdowns,\n            newCountdowns: newCountdowns\n        })\n\n        this.setState({\n            countdowns: newCountdowns\n        })\n    }\n\n    deleteCountdown(index: number) {\n        let newCountdowns = [\n            ...this.state.countdowns.slice(0, index),\n            ...this.state.countdowns.slice(index + 1)\n        ]\n\n        this.saveCountdownsToLocalStorage(newCountdowns)\n\n        this.setState({\n            countdowns: newCountdowns\n        })\n    }\n\n    getNextCountdown(): Countdown {\n        return this.state.countdowns[this.nextCountdownIndex]\n    }\n\n    updateCountdownState(countdown: Countdown) {\n        this.setState({\n            secondsLeft: countdown.secondsLeft,\n            running: countdown.running\n        })\n\n        this.saveCountdownsToLocalStorage()\n    }\n\n    saveCountdownsToLocalStorage(countdowns: Countdown[] = this.state.countdowns) {\n        localStorage.setItem(\n            'countdowns',\n            JSON.stringify(\n                countdowns.map((countdown) => countdown.exportToJsonObject())\n            )\n        )\n    }\n\n    updateSubscriber() {\n\n        if (this.currentCountdown.running) {\n            this.updateCountdownState(this.currentCountdown)\n        } else {\n            console.log('Stopping countdown')\n            notificationService.showNotification(\n                APP_TITLE,\n                {\n                    body: `${this.currentCountdown.name} done`\n                }\n            )\n            this.stopTimer()\n        }\n    }\n\n    startTimer() {\n        this.currentCountdown.subscribe(this.constructor.name, this.updateSubscriber)\n        this.currentCountdown.start()\n    }\n\n    stopTimer() {\n        this.currentCountdown.unsubscribe(this.constructor.name)\n        this.currentCountdown.stop()\n        this.updateCountdownState(this.currentCountdown)\n\n        this.setState({\n            currentCountdownIndex: this.nextCountdownIndex\n        })\n\n        localStorage.setItem('currentCountdownIndex', this.nextCountdownIndex.toString())\n    }\n\n    handleStartStopOnClick() {\n        if (!this.state.running) {\n            this.startTimer()\n        } else {\n            this.stopTimer()\n        }\n    }\n\n    renderSliders() {\n        const classes = this.props.classes\n        let elements: JSX.Element[] = []\n\n        for (let i in this.state.countdowns) {\n            const index: number = parseInt(i)\n            const countdown = this.state.countdowns[i]\n            const upDisabled = index === 0\n            const downDisabled = index === this.state.countdowns.length - 1\n\n            if (this.state.editingOrder) {\n                elements.push(\n                    <Grid item key={countdown.name}>\n                        <Card className={classes.popperCardStyle}>\n                            <Box display='flex' flexDirection='row'>\n                                <Box flex='100%' display='flex' justifyContent='left' alignItems='center'>\n                                    <Typography variant='button'>\n                                        {countdown.name}\n                                    </Typography>\n                                </Box>\n                                <Box flex={1} display='flex' justifyContent='right' justifyItems='right'>\n                                    <IconButton\n                                        color='primary'\n                                        disabled={upDisabled}\n                                        onClick={() => {\n                                            this.swapCountdowns(index, index - 1)\n                                        }}\n                                    >\n                                        <ArrowUpwardIcon />\n                                    </IconButton>\n                                    <IconButton\n                                        color='primary'\n                                        disabled={downDisabled}\n                                        onClick={() => {\n                                            this.swapCountdowns(index, index + 1)\n                                        }}\n                                    >\n                                        <ArrowDownwardIcon />\n                                    </IconButton>\n                                    <IconButton\n                                        color='secondary'\n                                        onClick={() => {\n                                            this.setState({\n                                                confirmDeleteOpen: true,\n                                                confirmDeleteIndex: index,\n                                                confirmDeleteName: countdown.name\n                                            })\n                                        }}\n                                    >\n                                        <DeleteOutlineIcon />\n                                    </IconButton>\n                                </Box>\n                            </Box>\n                        </Card>\n                    </Grid>\n                )\n            } else {\n                console.log(countdown.name, countdown.value)\n                elements.push(\n                    <Grid item key={countdown.name}>\n                        <LabelSlider\n                            label={countdown.name}\n                            labelSuffix=\"m\"\n                            value={countdown.value}\n                            step={1}\n                            min={countdown.min}\n                            max={countdown.max}\n                            onChange={(value: number, thisCountdown: Countdown = countdown) => {\n                                thisCountdown.value = value\n                                console.log('value', value, this.state.countdowns, thisCountdown)\n                                this.saveCountdownsToLocalStorage()\n                            }}\n                            onEditSave={(name: string, min: number, max: number) => {\n                                countdown.name = name\n                                countdown.min = min\n                                countdown.max = max\n                                this.forceUpdate()\n                                this.saveCountdownsToLocalStorage()\n                            }}\n                            formatCallback={(value: number) => TimeFormat.minutes(value)}\n                        />\n                    </Grid>\n                )\n            }\n        }\n\n        return elements\n    }\n\n    render() {\n        const classes = this.props.classes\n        return (\n            <div className={classes.root}>\n                <AppBar position=\"static\">\n                    <Toolbar>\n                        <IconButton\n                            edge=\"start\"\n                            className={classes.menuButton}\n                            color=\"inherit\" aria-label=\"menu\"\n                            onClick={() => {\n                                this.setState({ sidebarOpen: true })\n                            }}\n                        >\n                            <MenuIcon />\n                        </IconButton>\n                        <Typography variant=\"h6\" className={classes.title}>\n                            {APP_TITLE}\n                        </Typography>\n                    </Toolbar>\n                </AppBar>\n                <Sidebar\n                    open={this.state.sidebarOpen}\n                    onClose={() => {\n                        this.setState({ sidebarOpen: false })\n                    }}\n                    resetCallback={() => {\n                        this.setState({\n                            confirmResetOpen: true,\n                            sidebarOpen: false\n                        })\n                    }}\n                />\n                <ConfirmationModal\n                    open={this.state.confirmResetOpen}\n                    onClose={() => {\n                        this.setState({\n                            confirmResetOpen: false\n                        })\n                    }}\n                    onConfirm={() => {\n                        this.setState({\n                            confirmResetOpen: false,\n                            countdowns: DEFAULT_COUNTDOWNS\n                        })\n\n                        this.saveCountdownsToLocalStorage(DEFAULT_COUNTDOWNS)\n                    }}\n                    subtitle='Resetting your countdowns cannot be undone'\n                />\n                <ConfirmationModal\n                    open={this.state.confirmDeleteOpen}\n                    onClose={() => {\n                        this.setState({\n                            confirmDeleteOpen: false\n                        })\n                    }}\n                    onConfirm={() => {\n                        this.deleteCountdown(this.state.confirmDeleteIndex)\n                        this.setState({\n                            confirmDeleteOpen: false\n                        })\n                    }}\n                    subtitle='Deleting this cannot be undone'\n                />\n                <Grid container className={classes.gridContainer} spacing={2}>\n                    <Grid item xs={12} md={8} lg={6}> <Paper className={classes.paperContainer}>\n                        <Grid container>\n                            <Grid item xs={12}>\n                                <Box display='flex' flexDirection=\"row\">\n                                    <Box flex='100%'>\n                                        <Typography variant=\"h3\"> Timers </Typography>\n                                    </Box>\n                                    <Box flex={1}>\n                                        <IconButton\n                                            disabled={this.state.editingOrder}\n                                            onClick={() => {\n                                                let newCountdowns = [\n                                                    ...this.state.countdowns,\n                                                    new Countdown(`NEW ${this.state.countdowns.length}`)\n                                                ]\n\n                                                this.saveCountdownsToLocalStorage(newCountdowns)\n\n                                                this.setState({\n                                                    countdowns: newCountdowns\n                                                })\n                                            }}\n                                        >\n                                            <AddIcon color={this.state.editingOrder ? 'disabled' : 'primary'} />\n                                        </IconButton>\n                                    </Box>\n                                    <Box flex={1}>\n                                        <IconButton\n                                            onClick={() => {\n                                                if (this.state.editingOrder) { // if we are leaving edit mode\n                                                    this.saveCountdownsToLocalStorage()\n                                                }\n\n                                                this.setState({\n                                                    editingOrder: !this.state.editingOrder\n                                                })\n                                            }}\n                                        >\n                                            <SettingsIcon color={this.state.editingOrder ? 'primary' : 'action'} />\n                                        </IconButton>\n                                    </Box>\n                                </Box>\n                            </Grid>\n                            <Grid item xs={12}>\n                                {this.renderSliders()}\n                            </Grid>\n                            <Grid item xs={12} sm={3}>\n                                <Button variant=\"contained\" className={classes.fillWidth} onClick={this.handleStartStopOnClick}>\n                                    {this.state.running ? 'Stop' : 'Start'}\n                                </Button>\n                            </Grid>\n                            <Grid item xs={4} sm={3}>\n                                <Box flexDirection='column' flex={2} display='flex' alignItems='center'>\n                                    <Box display='flex'>\n                                        <Typography variant=\"subtitle1\">{this.state.running ? \"Running\" : \"On deck\"}</Typography>\n                                    </Box>\n                                    <Box display='flex'>\n                                        <Typography variant='caption'>{this.currentCountdown.name}</Typography>\n                                    </Box>\n                                </Box>\n                            </Grid>\n                            <Grid item xs={4} sm={3}>\n                                <Box flexDirection='column' flex={2} display='flex' alignItems='center'>\n                                    <Box display='flex'>\n                                        <Typography variant=\"subtitle1\">Time left</Typography>\n                                    </Box>\n                                    <Box display='flex'>\n                                        <Typography variant='caption'>{TimeFormat.seconds(this.state.secondsLeft)}</Typography>\n                                    </Box>\n                                </Box>\n                            </Grid>\n                            <Grid item xs={4} sm={3}>\n                                <Box flexDirection='column' flex={2} display='flex' alignItems='center'>\n                                    <Box display='flex'>\n                                        <Typography variant=\"subtitle1\">Up next</Typography>\n                                    </Box>\n                                    <Box display='flex'>\n                                        <Typography variant='caption'>{this.getNextCountdown().name}</Typography>\n                                    </Box>\n                                </Box>\n                            </Grid>\n                        </Grid>\n                    </Paper> </Grid>\n                    {/* <Grid item xs={12} sm={4} lg={6}> <Paper className={classes.paperContainer}>\n                        <Typography variant=\"h5\">Test</Typography>\n                    </Paper> </Grid> */}\n                </Grid>\n            </div >\n        );\n    }\n});\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}