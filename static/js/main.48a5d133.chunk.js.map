{"version":3,"sources":["data/Subscribable.ts","services/Notification.ts","components/ConfirmationModal.tsx","data/History.ts","services/History.ts","data/Countdown.ts","services/Countdown.ts","components/Sidebar.tsx","data/format/Time.ts","widgets/TwoText.tsx","components/History.tsx","widgets/LabelSlider.tsx","components/FlexModal.tsx","components/Countdown.tsx","App.tsx","index.tsx"],"names":["Subscribable","subscribers","Map","name","id","callback","console","debug","this","constructor","set","delete","forEach","key","map","NotificationService","_desktopNotificationSupport","window","_instance","desktopNotificationSupport","Notification","permission","requestPermission","then","value","updateSubscribers","title","options","onclick","notification","event","close","focus","ConfirmationModal","withStyles","theme","createStyles","modal","display","alignItems","justifyContent","padding","border","classes","props","Modal","open","onClose","closeAfterTransition","className","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","Card","Grid","container","direction","alignContent","item","xs","Typography","variant","subtitle","Button","color","onClick","onConfirm","buttonText","Component","defaultProps","HistoryItem","start","end","HistoryItemCollection","collection","items","addItem","push","now","Date","filter","getFullYear","getMonth","getDay","HistoryService","_history","history","localStorage","getItem","JSON","parse","setItem","stringify","save","Countdown","countdown","_startTime","undefined","_endTime","_running","_paused","_name","_min","_max","_value","_intervalMs","runningCallback","startTime","endTime","running","paused","min","max","intervalMs","update","secondsLeft","setTimeout","instance","clearTimeout","Math","floor","CountdownCollection","_items","_currentIndex","currentIndex","length","current","nextIndex","countdownObject","subscribe","countdownSubscriber","index","a","b","lower","higher","RangeError","slice","previousIndex","DEFAULT_COUNTDOWNS","CountdownService","_countdowns","load","countdowns","legacyCountdowns","currentCountdown","parseInt","notificationService","Sidebar","sideBar","width","footer","top","bottom","footerButton","state","notificationsEnabled","desktopNotificationEnabled","confirmResetOpen","confirmClearHistoryOpen","setState","refreshNotificationState","unsubscribe","Drawer","anchor","reset","clear","List","ListItem","button","requestDesktopNotificationPermissions","ListItemIcon","ListItemText","primary","ListItemSecondaryAction","Switch","edge","checked","inputProps","onFocus","onBlur","disabled","Divider","Box","position","process","TimeFormat","timerSeconds","hours","minutes","seconds","returnStr","join","timerMinutes","TwoText","flexDirection","flex","caption","text","HistoryList","table","minWidth","totalsGrid","flexGrow","totals","today","sort","durationMs","reduce","previous","spacing","height","Object","keys","Paper","TableContainer","Table","size","aria-label","TableHead","TableRow","TableCell","align","TableBody","component","scope","getHours","getMinutes","getSeconds","LabelSlider","fullWidth","centeringGrid","listItemText","sliderSpacing","verticalAlign","sliderLabelContainer","marginBottom","sliderLabel","paddingRight","editPopover","editContainer","popoverRef","label","editLabel","editMin","editMax","step","menuOpen","editing","labelError","minError","maxError","React","createRef","handleOnChange","bind","handleKeyPress","openPopover","closePopover","saveForm","cancelEdit","isNaN","newValue","onChange","onEditSave","formatCallback","m","Slider","getAriaValueText","valueLabelDisplay","aria-labelledby","IconButton","Popover","anchorEl","anchorOrigin","vertical","horizontal","transformOrigin","onEscapeKeyDown","TextField","error","margin","target","onKeyPress","getMinError","getMaxError","ref","renderNormalView","renderEditPopover","FlexGrid","grid","left","right","middle","center","FlexModal","children","CountdownComponent","popperCardStyle","paddingLeft","backgroundColor","palette","grey","modalStyle","fillWidth","editingOrder","completeModalOpen","confirmDeleteOpen","confirmDeleteIndex","confirmDeleteName","warningNotificationSent","runningCountdown","handleStartStopOnClick","stop","showNotification","APP_TITLE","body","document","APP_TITLE_SHORT","elements","i","upDisabled","downDisabled","justifyItems","swapItems","labelSuffix","deleteItem","style","renderSliders","sm","ButtonGroup","pause","next","App","root","overflow","menuButton","marginRight","gridContainer","paperContainer","sliderBox","paddingTop","popperContentsStyle","statusStyle","marginTop","sliderRefs","selectedDate","lastVersion","workLength","breakLength","sidebarOpen","notificationSupport","whatsNewModalOpen","checkSchedule","log","md","href","AppBar","Toolbar","utils","DateFnsUtils","date","minutesStep","ReactDOM","render","StrictMode","getElementById"],"mappings":"gaAAsBA,EAAtB,iDACYC,YAAkD,IAAIC,IADlE,KAEgCC,UAFhC,wDAIqBC,EAAYC,GACzBC,QAAQC,MAAM,YAAaH,EAAI,KAAMI,KAAKC,YAAYN,KAAMK,MAC5DA,KAAKP,YAAYS,IAAIN,EAAIC,KANjC,kCASuBD,GACfE,QAAQC,MAAM,cAAeH,EAAI,OAAQI,KAAKC,YAAYN,KAAMK,MAChEA,KAAKP,YAAYU,OAAOP,KAXhC,0CAcmC,IAAD,OAC1BI,KAAKP,YAAYW,SAAQ,SAACP,EAAUQ,EAAKC,GACrCR,QAAQC,MAAM,oBAAqBM,EAAK,KAAM,EAAKJ,YAAYN,KAAM,GACrEE,EAAS,UAjBrB,KCEaU,EAAb,kDASI,aAAuB,IAAD,8BAClB,gBARIC,6BAAuC,EAOzB,EANHb,KAAe,sBAQ9B,EAAKa,4BAA8B,iBAAkBC,OAFnC,EAT1B,0DAMQ,OAAOT,KAAKU,YAAcV,KAAKU,UAAY,IAAIV,UANvD,6EAsBoD,IAAD,OACvCA,KAAKW,4BAA0D,YAA5BC,aAAaC,YAChDD,aAAaE,oBACRC,MAAK,SAACC,GAAY,EAAKC,yBAzBxC,uCA8BQC,EACAC,GAMD,IALCC,EAKF,uDALgE,SAC1DC,EAA4BC,GAE5BD,EAAaE,QAASd,OAAOe,SAG7BH,EAAe,IAAIT,aACnBM,EAAOC,GAGXE,EAAaD,QAAU,SAACE,GAAD,OAAmBF,EAAQC,EAAcC,MA1CxE,iDAeQ,OAAOtB,KAAKQ,8BAfpB,iDAmBQ,OAAOR,KAAKW,4BAA0D,YAA5BC,aAAaC,eAnB/D,GAAyCrB,GAA5Be,EACMG,e,qCCqBNe,EAAoBC,aArBlB,SAACC,GAAD,OAAkBC,YAAa,CAC1CC,MAAO,CACHC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,QAAS,EACTC,OAAQ,YAeiBR,EAAA,2KAQzB,IAAMS,EAAUnC,KAAKoC,MAAMD,QAC3B,OACI,cAACE,EAAA,EAAD,CACIC,KAAMtC,KAAKoC,MAAME,KACjBC,QAASvC,KAAKoC,MAAMG,QACpBC,sBAAoB,EACpBC,UAAWN,EAAQN,MACnBa,kBAAmBC,IACnBC,cAAe,CACXC,QAAS,KAPjB,SAUI,cAACC,EAAA,EAAD,CAAMC,GAAI/C,KAAKoC,MAAME,KAArB,SACI,cAACU,EAAA,EAAD,CAAMP,UAAWN,EAAQN,MAAzB,SACI,eAACoB,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASpB,WAAW,SAASqB,aAAa,SAApE,UACI,cAACH,EAAA,EAAD,CAAMI,MAAI,EAACC,IAAE,EAAb,SACI,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAApB,SAA0BxD,KAAKoC,MAAMlB,UAEzC,eAAC+B,EAAA,EAAD,CAAMI,MAAI,EAACC,IAAE,EAAb,UACI,cAACC,EAAA,EAAD,CAAYC,QAAQ,YAApB,SAAiCxD,KAAKoC,MAAMqB,WAAsB,0BAEtE,cAACC,EAAA,EAAD,CACIC,MAAM,YACNH,QAAQ,YACRI,QAAS5D,KAAKoC,MAAMyB,UAHxB,SAKI,cAACZ,EAAA,EAAD,CAAMI,MAAI,EAACC,IAAE,EAAb,SACKtD,KAAKoC,MAAM0B,4BAnCf,GAA4DC,aAA5D,EACtBC,aAAe,CAClB9C,MAAO,gBACPuC,SAAU,+BACVK,WAAY,YAJa,I,gBCfpBG,EAAb,WAKI,cAIuB,IAHnBtE,EAGkB,EAHlBA,KACAuE,EAEkB,EAFlBA,MACAC,EACkB,EADlBA,IACkB,yBARbxE,UAQa,OAPbuE,WAOa,OANbC,SAMa,EAClBnE,KAAKL,KAAOA,EACZK,KAAKkE,MAAQA,EACblE,KAAKmE,IAAMA,EAZnB,uDAgBQ,OAAOnE,KAAKmE,IAAMnE,KAAKkE,UAhB/B,KAoBaE,EAAb,kDAII,WAAYC,GAA6C,IAAD,EAEpD,GAFoD,qBACpD,gBAJKC,MAAuB,GAGwB,EAFrC3E,KAAe,wBAI9B,OAAI0E,QAAJ,IAAIA,OAAJ,EAAIA,EAAYC,MAAO,CAAC,IAAD,gBACFD,EAAWC,OADT,IACnB,2BAAmC,CAAC,IAA3BjB,EAA0B,QAC/B,EAAKkB,QAAQlB,IAFE,+BAF6B,SAJ5D,qDAcQ,MAAO,CACHiB,MAAOtE,KAAKsE,SAfxB,8BA+BmBjB,GACXrD,KAAKsE,MAAME,KAAK,IAAIP,EAAYZ,IAChCrD,KAAKiB,sBAjCb,4BAoBQ,IAAIwD,EAAM,IAAIC,KAAKA,KAAKD,OACxB,OAAOzE,KAAKsE,MAAMK,QAAO,SAACtB,GACtB,IAAIa,EAAQ,IAAIQ,KAAKrB,EAAKa,OAC1B,OACIA,EAAMU,gBAAkBH,EAAIG,eAC5BV,EAAMW,aAAeJ,EAAII,YACzBX,EAAMY,WAAaL,EAAIK,gBA1BvC,GAA2CtF,GC1B9BuF,EAAb,kDAUI,aAAuB,IAAD,uBAClB,gBARepF,KAAe,iBAOZ,EALdqF,cAKc,EAElB,IAAIC,EAAyBC,aAAaC,QAAQ,WAFhC,OAId,EAAKH,SADLC,EACgB,IAAIb,EAAsBgB,KAAKC,MAAMJ,IAErC,IAAIb,EANN,EAV1B,oDAOkD,OAAOpE,KAAKgF,WAP9D,4BAQyB,OAAOhF,KAAKiF,QAAQX,SAR7C,gCAEmD,OAAOtE,KAAKU,YAAcV,KAAKU,UAAY,IAAIV,UAFlG,4CAqBQkF,aAAaI,QAAQ,UAAWF,KAAKG,UAAUvF,KAAKiF,UACpDjF,KAAKiB,sBAtBb,8BAyBmBoC,GACXrD,KAAKgF,SAAST,QAAQlB,GACtBrD,KAAKwF,SA3Bb,8BA+BQxF,KAAKgF,SAAW,IAAIZ,EACpBpE,KAAKwF,WAhCb,GAAoChG,GAAvBuF,EACMrE,e,ECDnB,IAmBa+E,EAAb,kDAiBI,WAAmBC,GAA6B,IAAD,8BAC3C,gBAjBI7C,aAgBuC,IAdvC8C,gBAAsBC,EAciB,EAbvCC,cAAoBD,EAamB,EAXvCE,UAAoB,EAWmB,EAVvCC,SAAmB,EAUoB,EARvCC,MAAgB,MAQuB,EAPvCC,KAAe,EAOwB,EANvCC,KAAe,GAMwB,EALvCC,OAAiB,EAKsB,EAJvCC,YAAsB,IAIiB,EAFxCC,qBAEwC,EAE3C,EAAKV,WAAaD,EAAUY,UAC5B,EAAKT,SAAWH,EAAUa,QAC1B,EAAKT,UAAiC,IAAtBJ,EAAUc,QAC1B,EAAKT,SAA+B,IAArBL,EAAUe,OACzB,EAAKT,MAAQN,EAAU/F,KAAO+F,EAAU/F,KAAO,MAC/C,EAAKsG,KAAOP,EAAUgB,IAAMhB,EAAUgB,IA3C1B,EA4CZ,EAAKR,KAAOR,EAAUiB,IAAMjB,EAAUiB,IA3C1B,GA4CZ,EAAKR,OAAST,EAAU1E,MAAQ0E,EAAU1E,MAAQ,EAAKiF,KACvD,EAAKG,YAAcV,EAAUkB,WAAalB,EAAUkB,WA5ChC,IA6CpB,EAAKP,gBAAkBX,EAAUW,gBAXU,EAjBnD,qDAgCQ,MAAO,CACHC,UAAWtG,KAAKsG,UAChBC,QAASvG,KAAKuG,QACdC,QAASxG,KAAKwG,QACdC,OAAQzG,KAAKyG,OACb9G,KAAMK,KAAKL,KACX+G,IAAK1G,KAAK0G,IACVC,IAAK3G,KAAK2G,IACV3F,MAAOhB,KAAKgB,MACZ4F,WAAY5G,KAAK4G,cAzC7B,8BA0EQ5G,KAAK8F,UAAW,EAChB9F,KAAK2F,WAAajB,KAAKD,MAInBzE,KAAK6F,SAAW7F,KAAK2F,WAA2B,GAAb3F,KAAKgB,MAAa,IAGzDhB,KAAK6G,WAlFb,6BAsFQ7G,KAAK8F,UAAW,EAChB9F,KAAK+F,SAAU,EACf/F,KAAK6G,WAxFb,8BA4FY7G,KAAKwG,UACLxG,KAAK+F,SAAW/F,KAAK+F,QAChB/F,KAAKyG,SACNzG,KAAK6F,SAAWnB,KAAKD,MAA4B,IAAnBzE,KAAK8G,aAGvC9G,KAAK6G,YAlGjB,+BAsGc,IAAD,OACL,QAAqBjB,IAAjB5F,KAAKuG,UAA0BvG,KAAKyG,OAEpC,GADIzG,KAAKqG,iBAAiBrG,KAAKqG,gBAAgBrG,MAC3CA,KAAK8G,YAAc,EACnB9G,KAAK6C,QAAUkE,YAAW,kBAAM,EAAKF,WAAU7G,KAAK4G,gBACjD,CACH5G,KAAK8F,UAAW,EAChB9F,KAAK6F,SAAWnB,KAAKD,MAErB,IAAI8B,EAAkB7B,KAAKD,MAEvBzE,KAAKsG,WAAatG,KAAKuG,UACnBA,EAAUvG,KAAKuG,UACfA,EAAUvG,KAAKuG,SAGnBxB,EAAeiC,SAASzC,QAAQ,CAC5B5E,KAAMK,KAAKL,KACXuE,MAAOlE,KAAKsG,UACZnC,IAAKoC,KAIbU,aAAajH,KAAK6C,SAI1B7C,KAAKiB,sBAjIb,2BA6CgC,OAAOjB,KAAKgG,OA7C5C,aA8CoBrG,GAAgBK,KAAKgG,MAAQrG,EAAMK,KAAKiB,sBA9C5D,8BAgDoC,OAAOjB,KAAK8F,WAhDhD,6BAiDmC,OAAO9F,KAAK+F,UAjD/C,4BAmDiC,OAAO/F,KAAKmG,QAnD7C,aAoDqBnF,GAAiBhB,KAAKmG,OAASnF,IApDpD,0BAsD+B,OAAOhB,KAAKiG,KAAOjG,KAAKiG,KAzEnC,GAmBpB,aAuDmBS,GAAe1G,KAAKiG,KAAOS,EAAK1G,KAAKiB,sBAvDxD,0BAyD+B,OAAOjB,KAAKkG,KAAOlG,KAAKkG,KA3EnC,IAkBpB,aA0DmBS,GAAe3G,KAAKkG,KAAOS,EAAK3G,KAAKiB,sBA1DxD,iCA4DsC,OAAOjB,KAAKoG,YAAcpG,KAAKoG,YA7EzC,MAiB5B,gCA8DiD,OAAOpG,KAAK2F,aA9D7D,8BA+D+C,OAAO3F,KAAK6F,WA/D3D,kCAkEQ,OAAI7F,KAAKwG,SAAWxG,KAAKuG,QACdW,KAAKC,OAAOnH,KAAKuG,QAAU7B,KAAKD,OAAS,KAEzC,MArEnB,GAA+BjF,GA0IlB4H,EAAb,kDAMI,WAAY/C,GAAyC,IAAD,IAEhD,GAFgD,qBAChD,gBANIgD,OAAsB,GAKsB,EAJ5CC,cAAgB,EAI4B,EAH5Cd,SAAmB,EAGyB,EAFjC7G,KAAe,sBAI9B,OAAI0E,QAAJ,IAAIA,OAAJ,EAAIA,EAAYC,MAAO,CAAC,IAAD,gBACFD,EAAWC,OADT,IACnB,2BAAmC,CAAC,IAA3BjB,EAA0B,QAC/B,EAAKkB,QAAQlB,IAFE,+BAFyB,OAQhD,OAAIgB,QAAJ,IAAIA,OAAJ,EAAIA,EAAYkD,gBACZ,EAAKD,cAAgBjD,EAAWkD,cAGhC,EAAKD,cAAgB,EAAKhD,MAAMkD,OAAS,IACzC,EAAKF,cAAgB,IAGzB,UAAI,EAAKG,eAAT,aAAI,EAAcjB,WACd,EAAKA,SAAU,GAjB6B,EANxD,qDA2CQ,MAAO,CACHlC,MAAOtE,KAAKsE,MACZiD,aAAcvH,KAAKuH,gBA7C/B,0CAiD+B7B,GACnB1F,KAAKyH,QAAQjB,QACbxG,KAAKwG,SAAU,EACRxG,KAAKwG,UACZxG,KAAKsH,cAAgBtH,KAAK0H,UAC1B1H,KAAKwG,SAAU,GAGnBxG,KAAKiB,sBAzDb,8BA4DmB0G,GAAyC,IAAD,OACnD,GAAwB,OAApBA,EAA0B,CAC1B,IAAIjC,EAAuB,IAAID,EAAUkC,GACzCjC,EAAUkC,UAAU5H,KAAKL,MAAM,SAAC+F,GAC5B,EAAKmC,oBAAoBnC,MAG7B1F,KAAKsE,MAAME,KAAKkB,GAEpB1F,KAAKiB,sBArEb,iCAwEsB6G,UACP9H,KAAKsE,MAAMwD,GAClB9H,KAAKiB,sBA1Eb,gCA6EqB8G,EAAWC,GACxB,IAAIC,EACAC,EACJ,GAAIH,EAAIC,EACJC,EAAQF,EACRG,EAASF,MACN,MAAIA,EAAID,GAIX,MAAM,IAAII,WAAW,sCAHrBF,EAAQD,EACRE,EAASH,EAKT/H,KAAKuH,eAAiBU,EAAOjI,KAAKsH,cAAgBY,EAC7ClI,KAAKuH,eAAiBW,IAAQlI,KAAKsH,cAAgBW,GAE5DjI,KAAKqH,OAAL,sBACOrH,KAAKsE,MAAM8D,MAAM,EAAGH,IAD3B,CAEIjI,KAAKsE,MAAM4D,GACXlI,KAAKsE,MAAM2D,IAHf,YAIOjI,KAAKsE,MAAM8D,MAAMF,EAAS,KAGjClI,KAAKiB,sBApGb,8BAuGmB6G,GACX,OAAO9H,KAAKsE,MAAMwD,KAxG1B,4BA2BsC,OAAO9H,KAAKqH,SA3BlD,mCA6BwC,OAAOrH,KAAKsH,gBA7BpD,8BA8BsC,OAAOtH,KAAKsE,MAAMtE,KAAKuH,gBA9B7D,oCAgCyC,OAAQvH,KAAKsE,MAAMkD,OAASxH,KAAKuH,aAAe,GAAKvH,KAAKsE,MAAMkD,SAhCzG,+BAiCuC,OAAOxH,KAAKsE,MAAMtE,KAAKqI,iBAjC9D,gCAmCqC,OAAQrI,KAAKuH,aAAe,GAAKvH,KAAKsE,MAAMkD,SAnCjF,2BAoCmC,OAAOxH,KAAKsE,MAAMtE,KAAK0H,aApC1D,uCAuCQ,OAAO1H,KAAKsE,MAAMK,QAAO,SAACe,GAAD,OAA0BA,EAAUc,WAAS,OAvC9E,GAAyChH,GC7JnC8I,EAAgD,CAClDhE,MAAO,CACH,CAAE3E,KAAM,OAAQ+G,IAAK,EAAGC,IAAK,GAAI3F,MAAO,IACxC,CAAErB,KAAM,aAAc+G,IAAK,EAAGC,IAAK,GAAI3F,MAAO,MAIzCuH,EAAb,kDAeI,aAAuB,IAAD,8BAClB,gBAdIC,YAAmC,IAAIpB,EAazB,EAZHzH,KAAe,mBAc9B,EAAK8I,OAFa,EAf1B,uDASmD,OAAOzI,KAAKwI,cAT/D,4BAYQ,OAAOxI,KAAK0I,WAAWpE,SAZ/B,gCAMQ,OAAOtE,KAAKU,YAAcV,KAAKU,UAAY,IAAIV,UANvD,4CAoByB,IAAD,OACZ0I,EAA4BxD,aAAaC,QAAQnF,KAAKL,MAC1D,GAAI+I,EACA1I,KAAKwI,YAAc,IAAIpB,EAAoBhC,KAAKC,MAAMqD,QACnD,CACH,IAAIC,EAAkCzD,aAAaC,QAAQ,cACvDyD,EAAkC1D,aAAaC,QAAQ,oBAGvDnF,KAAKwI,YAAc,IAAIpB,EADvBuB,EAC2C,CACvCrE,MAAOc,KAAKC,MAAMsD,GAClBpB,aAAcqB,EAAmBC,SAASD,GAAoB,GAIvBN,GAInDtI,KAAKwI,YAAYZ,UAAU5H,KAAKL,MAAM,WAClC,EAAK6F,UAGTxF,KAAKwF,SA3Cb,6BA+CQN,aAAaI,QAAQtF,KAAKL,KAAMyF,KAAKG,UAAUvF,KAAK0I,aACpD1I,KAAKiB,sBAhDb,8BAoDQjB,KAAKwI,YAAc,IAAIpB,EAAoBkB,GAC3CtI,KAAKwF,WArDb,GAAsChG,GAAzB+I,EACM7H,e,ECanB,I,IAeMoI,EAA2CvI,EAAoByG,SAaxD+B,GAAUrH,aA5BR,SAACC,GAAD,OAAkBC,YAAa,CAC1CoH,QAAS,CACLC,MAAO,KAEXC,OAAQ,CACJC,IAAK,OACLC,OAAQ,EACRH,MAAO,OACPhH,QAAS,GAEboH,aAAc,CACVJ,MAAO,YAiBQvH,CAAA,kDACnB,WAAYU,GAAsB,IAAD,8BAC7B,cAAMA,IACDkH,MAAQ,CACTC,qBAAsBT,EAAoBU,2BAC1CC,kBAAkB,EAClBC,yBAAyB,GALA,EADd,uEAWX1J,KAAKsJ,MAAMC,uBAAyBT,EAAoBU,4BACxDxJ,KAAK2J,SAAS,CACVJ,qBAAsBT,EAAoBU,+BAbnC,2CAmBfxJ,KAAK4J,6BAnBU,0CAsBE,IAAD,OAChBd,EAAoBlB,UAAU,uBAAuB,WACjD,EAAKgC,gCAxBM,6CA6Bfd,EAAoBe,YAAY,yBA7BjB,+BAgCT,IAAD,OACC1H,EAAUnC,KAAKoC,MAAMD,QAC3B,OACI,eAAC2H,EAAA,EAAD,CACIC,OAAO,OACPzH,KAAMtC,KAAKoC,MAAME,KACjBC,QAAS,kBAAM,EAAKH,MAAMG,WAH9B,UAKI,cAACd,EAAD,CACIa,KAAMtC,KAAKsJ,MAAMG,iBACjBlH,QAAS,WACL,EAAKoH,SAAS,CACVF,kBAAkB,IAGtB,EAAKrH,MAAMG,WAEfsB,UAAW,WACP0E,EAAiBvB,SAASgD,QAE1B,EAAKL,SAAS,CACVF,kBAAkB,IAGtB,EAAKrH,MAAMG,WAEfkB,SAAS,+CAEb,cAAChC,EAAD,CACIa,KAAMtC,KAAKsJ,MAAMI,wBACjBnH,QAAS,WACL,EAAKoH,SAAS,CACVD,yBAAyB,IAG7B,EAAKtH,MAAMG,WAEfsB,UAAW,WACPkB,EAAeiC,SAASiD,QAExB,EAAKN,SAAS,CACVD,yBAAyB,IAG7B,EAAKtH,MAAMG,WAEfkB,SAAS,sCAEb,qBAAKhB,UAAWN,EAAQ6G,QAAxB,SACI,eAACkB,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,CACIC,QAAM,EACNxG,QAAS,WAAQkF,EAAoBuB,yCAFzC,UAII,cAACC,EAAA,EAAD,UAAc,cAAC,IAAD,MACd,cAACC,EAAA,EAAD,CAAcC,QAAQ,kBACtB,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CACIC,KAAK,MACL/G,QAAS,WAAQkF,EAAoBuB,yCACrCO,QAAS5K,KAAKsJ,MAAMC,qBACpBsB,WAAY,CAAE,kBAAmB,+BACjCC,QAAS,kBAAM,EAAKlB,4BACpBmB,OAAQ,kBAAM,EAAKnB,4BACnBoB,UAAWlC,EAAoBnI,kCAI3C,cAACsK,EAAA,EAAD,IACA,cAACd,EAAA,EAAD,CACIC,QAAM,EACNxG,QAAS,WAAQ,EAAK+F,SAAS,CAAED,yBAAyB,KAF9D,SAII,cAACa,EAAA,EAAD,CAAcC,QAAQ,oBAE1B,cAACL,EAAA,EAAD,CACIC,QAAM,EACNxG,QAAS,WAAQ,EAAK+F,SAAS,CAAEF,kBAAkB,KAFvD,SAII,cAACc,EAAA,EAAD,CAAcC,QAAQ,6BAIlC,cAACU,EAAA,EAAD,CAAKC,SAAS,QAAQ1I,UAAWN,EAAQ+G,OAAzC,SACI,cAACxF,EAAA,EAAD,UACI,eAACH,EAAA,EAAD,CAAYC,QAAQ,UAApB,qBACa4H,QADb,8BArHD,GAAkDrH,c,4GCnD5DsH,GAAb,qGACmBC,GACX,IAAIC,EAAQrE,KAAKC,MAAMmE,EAAe,GAAK,IACvCE,EAAUtE,KAAKC,OAAOmE,EAAwB,GAARC,EAAa,IAAO,IAC1DE,EAAUvE,KAAKC,MAAMmE,EAAwB,GAARC,EAAa,GAAiB,GAAVC,GAEzDE,EAAsB,GAY1B,OAVIH,EAAQ,GACRG,EAAUlH,KAAV,UAAkB+G,EAAlB,MAGAC,EAAU,GACVE,EAAUlH,KAAV,UAAkBgH,EAAlB,MAGJE,EAAUlH,KAAV,UAAkBiH,EAAlB,MAEOC,EAAUC,KAAK,OAlB9B,8BAqBmBC,GACX,IAAIL,EAAQrE,KAAKC,MAAMyE,EAAe,IAClCJ,EAAUI,EAAwB,GAARL,EAE1BG,EAAsB,GAQ1B,OANIH,EAAQ,GACRG,EAAUlH,KAAV,UAAkB+G,EAAlB,MAGJG,EAAUlH,KAAV,UAAkBgH,EAAlB,MAEOE,EAAUC,KAAK,SAjC9B,KCYaE,GAAUnK,aATR,SAACC,GAAD,OAAkBC,YAAa,MASvBF,CAAA,uKAEf,OACI,eAACwJ,EAAA,EAAD,CAAKY,cAAc,SAASC,KAAM,EAAGjK,QAAQ,OAAOC,WAAW,SAA/D,UACI,cAACmJ,EAAA,EAAD,CAAKpJ,QAAQ,OAAb,SACI,cAACyB,EAAA,EAAD,CAAYC,QAAQ,UAApB,SAA+BxD,KAAKoC,MAAM4J,YAE9C,cAACd,EAAA,EAAD,CAAKpJ,QAAQ,OAAb,SACI,cAACyB,EAAA,EAAD,CAAYC,QAAQ,YAApB,SAAiCxD,KAAKoC,MAAM6J,gBARzC,GAAiDlI,cCqB3DmI,GAAcxK,aAZZ,SAACC,GAAD,OAAkBC,YAAa,CAC1CuK,MAAO,CACHC,SAAU,KAEdC,WAAY,CAAEC,SAAU,EAAGrK,QAAS,OAQbP,CAAA,kDAGvB,WAAYU,GAA0B,IAAD,8BACjC,cAAMA,IAHOzC,KAAe,cAK5B,EAAK2J,MAAQ,CACTrE,QAASF,EAAeiC,SAAS/B,SAJJ,EAHd,gEAWF,IAAD,OAChBF,EAAeiC,SAASY,UACpB5H,KAAKL,MAAM,WAAQ,EAAKgK,SAAS,CAAE1E,QAASF,EAAeiC,SAAS/B,eAbrD,6CAkBnBF,EAAeiC,SAAS6C,YAAY7J,KAAKL,QAlBtB,+BAqBb,IAAD,SACCwC,EAAUnC,KAAKoC,MAAMD,QACvBoK,EAAqC,GAFpC,cAIYvM,KAAKsJ,MAAMrE,QAAQuH,MAAMlM,KAAI,SAAC+C,GAAD,OAAuBA,EAAK1D,QAAM8M,QAJ3E,yBAII9M,EAJJ,QAKKA,KAAQ4M,IACVA,EAAO5M,GAAQ,EAAK2J,MAAMrE,QAAQuH,MAC7B7H,QAAO,SAACtB,GAAD,OAAuBA,EAAK1D,OAASA,KAC5CW,KAAI,SAAC+C,GAAD,OAAuBA,EAAKqJ,cAChCC,QAAO,SAACC,EAAkBnF,GAAnB,OAAuCmF,EAAWnF,OALtE,2BAAyF,IAJpF,8BAaL,OAAO,eAACxE,EAAA,EAAD,CAAMC,WAAS,EAAC2J,QAAS,EAAGpK,UAAWN,EAAQkK,WAA/C,UACH,cAACpJ,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAf,SACI,cAAC4H,EAAA,EAAD,CAAKY,cAAc,SAAShK,QAAQ,OAAOC,WAAW,SAASC,eAAe,SAAS8K,OAAO,OAA9F,SACI,cAACvJ,EAAA,EAAD,CAAYC,QAAQ,KAApB,wBAIJuJ,OAAOC,KAAKT,GAAQjM,KAAI,SAACX,GAAD,OACpB,cAACsD,EAAA,EAAD,CAAMI,MAAI,EAAYC,GAAI,EAA1B,SACI,cAAC2J,EAAA,EAAD,UACI,cAACpB,GAAD,CAASG,QAASrM,EAAMsM,KAAI,UAAKZ,GAAWI,QAAQc,EAAO5M,GAAQ,WAF3DA,MAOxB,cAACsD,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAf,SACI,cAAC4J,GAAA,EAAD,UACI,eAACC,GAAA,EAAD,CAAO1K,UAAWN,EAAQgK,MAAOiB,KAAK,QAAQC,aAAW,gBAAzD,UACI,cAACC,GAAA,EAAD,UACI,eAACC,GAAA,EAAD,WACI,cAACC,GAAA,EAAD,wBACA,cAACA,GAAA,EAAD,CAAWC,MAAM,QAAjB,sBACA,cAACD,GAAA,EAAD,CAAWC,MAAM,QAAjB,mBACA,cAACD,GAAA,EAAD,CAAWC,MAAM,QAAjB,sBAGR,cAACC,GAAA,EAAD,UACK1N,KAAKsJ,MAAMrE,QAAQuH,MAAMlM,KAAI,SAAC+C,GAC3B,IAAIa,EAAc,IAAIQ,KAAKrB,EAAKa,OAC5BC,EAAY,IAAIO,KAAKrB,EAAKc,KAC9B,OACI,eAACoJ,GAAA,EAAD,WACI,cAACC,GAAA,EAAD,CAAWG,UAAU,KAAKC,MAAM,MAAhC,SACKvK,EAAK1D,OAEV,cAAC6N,GAAA,EAAD,CAAWC,MAAM,QAAjB,SAA0BpC,GAAWI,QAAQpI,EAAKqJ,WAAa,OAC/D,cAACc,GAAA,EAAD,CAAWC,MAAM,QAAjB,mBAA6BvJ,EAAM2J,WAAnC,YAAiD3J,EAAM4J,aAAvD,YAAuE5J,EAAM6J,gBAC7E,cAACP,GAAA,EAAD,CAAWC,MAAM,QAAjB,mBAA6BtJ,EAAI0J,WAAjC,YAA+C1J,EAAI2J,aAAnD,YAAmE3J,EAAI4J,kBAN5D1K,EAAK1D,KAAO0D,EAAKa,0BAjEzC,GAAqDH,c,wRCoDnEiK,GAActM,aAlEZ,SAACC,GAAD,OAAkBC,YAAa,CAC1CqM,UAAW,CACPhF,MAAO,QAGXiF,cAAe,CACXpM,QAAS,QAGbqM,aAAc,CACVrM,QAAS,SAGbsM,cAAe,CACXnF,MAAO,OACPjH,eAAgB,SAChBqM,cAAe,UAGnBC,qBAAsB,CAClBC,cAAe,IAGnBC,YAAa,CACTC,aAAc,IAGlBC,YAAa,CACTzM,QAAS,GAGb0M,cAAe,CACXF,aAAc,OAkCK/M,EAAA,sDAOvB,WAAYU,GAA0B,IAAD,8BACjC,cAAMA,IAPFwM,gBAM6B,EAEjC,EAAKtF,MAAQ,CACTtI,MAAO,EAAKoB,MAAMpB,MAClB6N,MAAO,EAAKzM,MAAMyM,MAClBC,UAAW,EAAK1M,MAAMyM,MACtBnI,IAAK,EAAKtE,MAAMsE,IAChBqI,QAAS,EAAK3M,MAAMsE,IACpBC,IAAK,EAAKvE,MAAMuE,IAChBqI,QAAS,EAAK5M,MAAMuE,IACpBsI,KAAM,EAAK7M,MAAM6M,KACjBC,UAAU,EACVC,QAAS,EAAK/M,MAAM+M,QACpBC,YAAY,EACZC,UAAU,EACVC,UAAU,GAGd,EAAKV,WAAaW,IAAMC,YAExB,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBACtB,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBACnB,EAAKG,aAAe,EAAKA,aAAaH,KAAlB,gBACpB,EAAKI,SAAW,EAAKA,SAASJ,KAAd,gBAChB,EAAKK,WAAa,EAAKA,WAAWL,KAAhB,gBAzBe,EAPd,wDAmCXhJ,EAAaC,GACrB,OAAOqJ,MAAMtJ,IAAQA,EAAM,GAAKA,EAAMC,IApCnB,kCAuCXD,EAAaC,GACrB,OAAOqJ,MAAMrJ,IAAQA,EAAM,GAAKA,EAAMD,IAxCnB,qCA2CRpF,EAAY2O,GACC,kBAAbA,GACPjQ,KAAK2J,SAAS,CACV3I,MAAOiP,IAEXjQ,KAAKoC,MAAM8N,SAASD,IACO,kBAAbA,IACdjQ,KAAK2J,SAAS,CACV3I,MAAOiP,EAAS,KAEpBjQ,KAAKoC,MAAM8N,SAASD,EAAS,OArDd,qCA0DR3O,GACO,UAAdA,EAAMjB,KACNL,KAAK8P,aA5DU,oCAiEnB9P,KAAK2J,SAAS,CACVwF,SAAS,EACTL,UAAW9O,KAAKsJ,MAAMuF,MACtBE,QAAS/O,KAAKsJ,MAAM5C,IACpBsI,QAAShP,KAAKsJ,MAAM3C,QArEL,qCA0EnB3G,KAAK2J,SAAS,CACVwF,SAAS,MA3EM,iCAiFf,IAAInO,EADFhB,KAAKsJ,MAAM8F,YAAcpP,KAAKsJ,MAAM+F,UAAYrP,KAAKsJ,MAAMgG,WAGzDtO,EADAhB,KAAKsJ,MAAMtI,MAAQhB,KAAKsJ,MAAM0F,QACtBhP,KAAKsJ,MAAM0F,QACZhP,KAAKsJ,MAAMtI,MAAQhB,KAAKsJ,MAAMyF,QAC7B/O,KAAKsJ,MAAMyF,QAEX/O,KAAKsJ,MAAMtI,MAGvBhB,KAAKoC,MAAM+N,WAAWnQ,KAAKsJ,MAAMwF,UAAW9O,KAAKsJ,MAAMyF,QAAS/O,KAAKsJ,MAAM0F,SAE3EhP,KAAK2J,SAAS,CACV3I,MAAOA,EACP6N,MAAO7O,KAAKsJ,MAAMwF,UAClBpI,IAAK1G,KAAKsJ,MAAMyF,QAChBpI,IAAK3G,KAAKsJ,MAAM0F,UAGpBhP,KAAK6P,kBAnGU,mCAyGnB7P,KAAK2J,SAAS,CACVyF,YAAY,EACZC,UAAU,EACVC,UAAU,IAEdtP,KAAK6P,iBA9Gc,yCAiHH,IAAD,OACP1N,EAAYnC,KAAKoC,MAAjBD,QACR,OACI,qCACI,eAAC+I,EAAA,EAAD,CAAKpJ,QAAQ,OAAOgK,cAAc,MAAMC,KAAK,OAAOhK,WAAW,WAAWU,UAAWN,EAAQmM,qBAA7F,UACI,cAAC/K,EAAA,EAAD,CAAYC,QAAQ,YAAYf,UAAWN,EAAQqM,YAAnD,SAAiExO,KAAKsJ,MAAMuF,QAC5E,eAACtL,EAAA,EAAD,CAAYC,QAAQ,UAAUf,UAAWN,EAAQqM,YAAjD,cAAgExO,KAAKoC,MAAMgO,eAAepQ,KAAKsJ,MAAMtI,OAArG,UAEJ,eAACkK,EAAA,EAAD,CAAKpJ,QAAQ,OAAOiK,KAAM,EAAGD,cAAc,MAA3C,UACI,cAACZ,EAAA,EAAD,CAAKmF,EAAG,EAAGtE,KAAK,OAAOjK,QAAQ,OAAOE,eAAe,aAAaD,WAAW,SAA7E,SACI,cAACuO,GAAA,EAAD,CACItP,MAAOhB,KAAKsJ,MAAMtI,MAClBiO,KAAMjP,KAAKsJ,MAAM2F,KACjBvI,IAAK1G,KAAKsJ,MAAM5C,IAChBC,IAAK3G,KAAKsJ,MAAM3C,IAChBuJ,SAAUlQ,KAAKyP,eACfc,iBAAkB,SAACvP,GAAoB,MAAM,GAAN,OAAUA,EAAV,MACvCwP,kBAAkB,MAClBC,kBAAgB,mBAGxB,cAACvF,EAAA,EAAD,CAAKa,KAAM,EAAGjK,QAAQ,OAAOE,eAAe,WAAWD,WAAW,SAAlE,SACI,cAAC2O,EAAA,EAAD,CAAY9M,QAAS,SAACtC,GAClB,EAAKsO,eADT,SAGI,cAAC,KAAD,gBA1ID,0CAkJF,IAAD,OACVzN,EAAUnC,KAAKoC,MAAMD,QAC3B,OACI,cAACwO,GAAA,EAAD,CACIrO,KAAMtC,KAAKsJ,MAAM6F,QACjByB,SAAU5Q,KAAK4O,WAAWnH,QAC1BoJ,aAAc,CAAEC,SAAU,SAAUC,WAAY,QAChDC,gBAAiB,CAAEF,SAAU,SAAUC,WAAY,QACnDxO,QAASvC,KAAK+P,WACdkB,gBAAiBjR,KAAK+P,WAN1B,SAQI,eAAC7E,EAAA,EAAD,CAAKpJ,QAAQ,OAAOiK,KAAM,EAAGD,cAAc,MAAMrJ,UAAWN,EAAQuM,YAApE,UACI,eAACzL,EAAA,EAAD,CAAMC,WAAS,EAAf,UACI,cAACD,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGb,UAAWN,EAAQwM,cAArC,SACI,cAACuC,GAAA,EAAD,CACIjD,WAAS,EACTY,MAAM,OACNsC,MAAOnR,KAAKsJ,MAAM8F,WAClBpO,MAAOhB,KAAKsJ,MAAMwF,UAClBsC,OAAO,QACPhE,KAAK,QACL5J,QAAQ,WACR0M,SAAU,SAAC5O,GACP,EAAKqI,SAAS,CACVmF,UAAWxN,EAAM+P,OAAOrQ,MACxBoO,WAC2B,KAAvB9N,EAAM+P,OAAOrQ,SAIzBsQ,WAAYtR,KAAK2P,mBAGzB,cAAC1M,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGb,UAAWN,EAAQwM,cAArC,SACI,cAACuC,GAAA,EAAD,CACIrC,MAAM,MACNsC,MAAOnR,KAAKsJ,MAAM+F,SAClBrO,MAAOhB,KAAKsJ,MAAMyF,QAClB3B,KAAK,QACL5J,QAAQ,WACR4N,OAAO,QACPlB,SAAU,SAAC5O,GACP,IAAMN,EAAQ6H,SAASvH,EAAM+P,OAAOrQ,OACpC,EAAK2I,SAAS,CACVoF,QAAS/N,GAAS,EAClBqO,SAAU,EAAKkC,YAAYvQ,EAAO,EAAKsI,MAAM3C,KAC7C2I,SAAU,EAAKkC,YAAYxQ,EAAO,EAAKsI,MAAM3C,QAGrD2K,WAAYtR,KAAK2P,mBAGzB,cAAC1M,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGb,UAAWN,EAAQwM,cAArC,SACI,cAACuC,GAAA,EAAD,CACIrC,MAAM,MACNsC,MAAOnR,KAAKsJ,MAAMgG,SAClBtO,MAAOhB,KAAKsJ,MAAM0F,QAClB5B,KAAK,QACL5J,QAAQ,WACR4N,OAAO,QACPlB,SAAU,SAAC5O,GACP,IAAMN,EAAQ6H,SAASvH,EAAM+P,OAAOrQ,OACpC,EAAK2I,SAAS,CACVqF,QAAShO,GAAS,EAClBqO,SAAU,EAAKkC,YAAY,EAAKjI,MAAM5C,IAAK1F,GAC3CsO,SAAU,EAAKkC,YAAY,EAAKlI,MAAM5C,IAAK1F,MAGnDsQ,WAAYtR,KAAK2P,sBAI7B,eAACzE,EAAA,EAAD,CAAKa,KAAM,EAAGjK,QAAQ,OAAOE,eAAe,WAAWD,WAAW,SAAlE,UACI,cAAC2O,EAAA,EAAD,CAAY9M,QAAS5D,KAAK8P,SAA1B,SACI,cAAC,KAAD,CAAWnM,MAAM,cAErB,cAAC+M,EAAA,EAAD,CAAY9M,QAAS5D,KAAK+P,WAA1B,SACI,cAAC,KAAD,CAAYpM,MAAM,0BA/NnB,+BAwOnB,OACI,sBAAK8N,IAAKzR,KAAK4O,WAAf,cACI,eAAC1D,EAAA,EAAD,CAAKpJ,QAAQ,OAAOgK,cAAc,SAAlC,UACK9L,KAAK0R,mBACL1R,KAAK2R,8BA5OC,GAAsD5N,aAAtD,EAGhBC,aAAe,CAClBmL,SAAS,GAJU,I,oBC3DrByC,G,WAGF,WAAYC,GAAmB,yBAF/BA,UAE8B,EAEtB7R,KAAK6R,KADLA,GAGY,CAAE1I,IAAK,G,gDAIS,OAAOnJ,KAAK6R,KAAK1I,IAAMnJ,KAAK6R,KAAK1I,IAAM,I,2BACtC,OAAOnJ,KAAK6R,KAAKC,KAAO9R,KAAK6R,KAAKC,KAAO,I,6BACvC,OAAO9R,KAAK6R,KAAKzI,OAASpJ,KAAK6R,KAAKzI,OAAS,I,4BAC9C,OAAOpJ,KAAK6R,KAAKE,MAAQ/R,KAAK6R,KAAKE,MAAQ,I,6BAC1C,OAAO/R,KAAK6R,KAAKG,OAAShS,KAAK6R,KAAKG,OAAS,I,6BAC7C,OAAOhS,KAAK6R,KAAKI,OAASjS,KAAK6R,KAAKI,OAAS,M,KAW3EC,GAAYxQ,cAjDV,SAACC,GAAD,OAAkBC,aAAa,CAC1CsB,UAAW,CAAE+F,MAAO,OAAQ6D,OAAQ,YAgDfpL,CAAA,kDAGrB,WAAYU,GAAwB,IAAD,8BAC/B,cAAMA,IAHFyK,aAE2B,EAE/B,EAAKA,QAAU,IAAI+E,GAASxP,EAAMyK,SAFH,EAHd,qDASjB,IAAM1K,EAAUnC,KAAKoC,MAAMD,QAC3B,OACI,cAACE,EAAA,EAAD,CACIC,KAAMtC,KAAKoC,MAAME,KACjBC,QAASvC,KAAKoC,MAAMG,QACpBC,sBAAoB,EACpBE,kBAAmBC,IACnBC,cAAe,CACXC,QAAS,KANjB,SASI,cAACC,EAAA,EAAD,CAAMC,GAAI/C,KAAKoC,MAAME,KAArB,SACI,eAAC4I,EAAA,EAAD,CAAKpJ,QAAQ,OAAOgK,cAAc,SAASrJ,UAAWN,EAAQe,UAA9D,UACI,cAACgI,EAAA,EAAD,CAAKa,KAAM/L,KAAK6M,QAAQ1D,IAAKvF,QAAS5D,KAAKoC,MAAMG,UACjD,cAAC2I,EAAA,EAAD,CAAKa,KAAM/L,KAAK6M,QAAQmF,OAAxB,SACI,eAAC9G,EAAA,EAAD,CAAKpJ,QAAQ,OAAOgK,cAAc,MAAMrJ,UAAWN,EAAQe,UAA3D,UACI,cAACgI,EAAA,EAAD,CAAKa,KAAM/L,KAAK6M,QAAQiF,KAAMlO,QAAS5D,KAAKoC,MAAMG,UAClD,cAAC2I,EAAA,EAAD,CAAKa,KAAM/L,KAAK6M,QAAQoF,OAAxB,SACKjS,KAAKoC,MAAM+P,WAEhB,cAACjH,EAAA,EAAD,CAAKa,KAAM/L,KAAK6M,QAAQkF,MAAOnO,QAAS5D,KAAKoC,MAAMG,eAG3D,cAAC2I,EAAA,EAAD,CAAKa,KAAM/L,KAAK6M,QAAQzD,OAAQxF,QAAS5D,KAAKoC,MAAMG,qBAhCnD,GAAmDwB,cCc/DqO,GAAqB1Q,aAhCnB,SAACC,GAAD,OAAkBC,YAAa,CAC1CyQ,gBAAiB,CACbC,YAAa3Q,EAAMkL,QAAQ,GAC3B0F,gBAAiB5Q,EAAM6Q,QAAQC,KAAK,IACpCrB,OAAQ,EACRtE,OAAQ,QAGZ4F,WAAY,CACRzQ,QAAS,EACT6K,OAAQ,QAGZ6F,UAAW,CACP1J,MAAO,YAkBmBvH,CAAA,kDAG9B,WAAYU,GACT,IAAD,MAe6D,GAf7D,qBACE,cAAMA,IAJF0G,yBAGN,EAGE,EAAKQ,MAAQ,CACTZ,WAAYH,EAAiBvB,SAAS0B,WACtCkK,cAAc,EACdC,mBAAmB,EACnBC,mBAAmB,EACnBC,mBAAoB,EACpBC,kBAAmB,GACnBxM,QAAO,UAAE+B,EAAiBvB,SAAS0B,WAAWjB,eAAvC,aAAE,EAA8CjB,QACvDC,QAAQ,EACRwM,yBAAyB,GAG7B,UAAI1K,EAAiBvB,SAAS0B,WAAWjB,eAAzC,aAAI,EAA8CjB,WAC9C,UAAA+B,EAAiBvB,SAAS0B,WAAWwK,wBAArC,SAAuDrM,UAhB7D,OAmBE,EAAKiC,oBAAsBvI,EAAoByG,SAE/C,EAAKmM,uBAAyB,EAAKA,uBAAuBzD,KAA5B,gBAC9B,EAAK7H,oBAAsB,EAAKA,oBAAoB6H,KAAzB,gBAtB7B,EAJ4B,gEA6BT,IAAD,OAChBnH,EAAiBvB,SAASY,UACtB,sBAAsB,WAAQ,EAAKC,2BA/Bb,6CAoC1BU,EAAiBvB,SAAS6C,YAAY,wBApCZ,+CAwCrB7J,KAAKsJ,MAAM9C,QAGZxG,KAAKoT,OAFLpT,KAAKkE,UAzCiB,8BA+CrB,IAAD,OACJlE,KAAK2J,SAAS,CAAEnD,SAAS,IACzB+B,EAAiBvB,SAAS0B,WAAWjB,QAAQpB,gBAAkB,SAACX,GACxDA,EAAUoB,YAAc,GAEnB,EAAKwC,MAAM2J,yBACTvN,EAAUoB,YAAc,KACxBpB,EAAUoB,YAAc,MAE3B,EAAK6C,SAAS,CACVsJ,yBAAyB,IAG7B,EAAKnK,oBAAoBuK,iBACrBC,GACA,CACIC,KAAK,kBAAD,OAAoBhL,EAAiBvB,SAAS0B,WAAWjB,QAAQ9H,SAI1E+F,EAAUc,UACjBjG,EAAoByG,SAASqM,iBACzBC,GACA,CACIC,KAAK,aAAD,OAAehL,EAAiBvB,SAAS0B,WAAWjB,QAAQ9H,QAGxE,EAAKgK,SAAS,CAAEkJ,mBAAmB,MAI3CtK,EAAiBvB,SAAS0B,WAAWjB,QAAQvD,UA9EnB,6BAkF1BlE,KAAK2J,SAAS,CAAEnD,SAAS,IACzB+B,EAAiBvB,SAAS0B,WAAWjB,QAAQ2L,SAnFnB,4CAwF1BpT,KAAK2J,SAAS,CAAEjB,WAAYH,EAAiBvB,SAAS0B,aAElDH,EAAiBvB,SAAS0B,WAAWjB,QAAQjB,SAC7CxG,KAAK2J,SAAS,CAAEnD,SAAS,IACzB/F,OAAO+S,SAAStS,MAAhB,UAA2BuS,GAA3B,aAA+ClL,EAAiBvB,SAAS0B,WAAWjB,QAAQ9H,KAA5F,YAAoG0L,GAAWI,QAAQlD,EAAiBvB,SAAS0B,WAAWjB,QAAQX,aAApK,OAEA9G,KAAK2J,SAAS,CACVsJ,yBAAyB,EACzBxM,QAAQ,EACRD,SAAS,IAEb/F,OAAO+S,SAAStS,MAAQuS,MAnGF,sCAuGb,IAAD,OACNtR,EAAUnC,KAAKoC,MAAMD,QACvBuR,EAA0B,GAFlB,WAIHC,GACL,IAAM7L,EAAgBe,SAAS8K,GACzBjO,EAAY6C,EAAiBvB,SAAS0B,WAAWpE,MAAMqP,GACvDC,EAAuB,IAAV9L,EACb+L,EAAe/L,IAAUS,EAAiBvB,SAAS0B,WAAWpE,MAAMkD,OAAS,EAE/E,EAAK8B,MAAMsJ,aACXc,EAASlP,KACL,cAACvB,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACL,EAAA,EAAD,CAAMP,UAAWN,EAAQkQ,gBAAzB,SACI,eAACnH,EAAA,EAAD,CAAKpJ,QAAQ,OAAOgK,cAAc,MAAlC,UACI,cAACZ,EAAA,EAAD,CAAKa,KAAK,OAAOjK,QAAQ,OAAOE,eAAe,OAAOD,WAAW,SAAjE,SACI,cAACwB,EAAA,EAAD,CAAYC,QAAQ,SAApB,SACKkC,EAAU/F,SAGnB,eAACuL,EAAA,EAAD,CAAKa,KAAM,EAAGjK,QAAQ,OAAOE,eAAe,QAAQ8R,aAAa,QAAjE,UACI,cAACpD,EAAA,EAAD,CACI/M,MAAM,UACNqH,SAAU4I,EACVhQ,QAAS,WACL2E,EAAiBvB,SAAS0B,WAAWqL,UAAUjM,EAAOA,EAAQ,IAJtE,SAOI,cAAC,KAAD,MAEJ,cAAC4I,EAAA,EAAD,CACI/M,MAAM,UACNqH,SAAU6I,EACVjQ,QAAS,WACL2E,EAAiBvB,SAAS0B,WAAWqL,UAAUjM,EAAOA,EAAQ,IAJtE,SAOI,cAAC,KAAD,MAEJ,cAAC4I,EAAA,EAAD,CACI/M,MAAM,YACNC,QAAS,WACL,EAAK+F,SAAS,CACVmJ,mBAAmB,EACnBC,mBAAoBjL,EACpBkL,kBAAmBtN,EAAU/F,QANzC,SAUI,cAAC,KAAD,eArCJ+F,EAAU/F,OA6C9B+T,EAASlP,KACL,cAACvB,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAAC2K,GAAD,CACIa,MAAOnJ,EAAU/F,KACjBqU,YAAY,IACZhT,MAAO0E,EAAU1E,MACjBiO,KAAM,EACNvI,IAAKhB,EAAUgB,IACfC,IAAKjB,EAAUiB,IACfuJ,SAAU,SAAClP,GACP0E,EAAU1E,MAAQA,GAEtBmP,WAAY,SAACxQ,EAAc+G,EAAaC,GACpCjB,EAAU/F,KAAOA,EACjB+F,EAAUgB,IAAMA,EAChBhB,EAAUiB,IAAMA,GAEpByJ,eAAgB,SAACpP,GAAD,OAAmBqK,GAAWG,QAAQxK,OAhB9C0E,EAAU/F,QAtDtC,IAAK,IAAIgU,KAAKpL,EAAiBvB,SAAS0B,WAAWpE,MAAQ,EAAlDqP,GA6ET,OAAOD,IAxLmB,+BA2LpB,IAAD,aACCvR,EAAUnC,KAAKoC,MAAMD,QAE3B,OAAO,eAACc,EAAA,EAAD,CAAMC,WAAS,EAAf,UACH,cAACzB,EAAD,CACIa,KAAMtC,KAAKsJ,MAAMwJ,kBACjBvQ,QAAS,WACL,EAAKoH,SAAS,CACVmJ,mBAAmB,KAG3BjP,UAAW,WACP0E,EAAiBvB,SAAS0B,WAAWuL,WAAW,EAAK3K,MAAMyJ,oBAC3D,EAAKpJ,SAAS,CACVmJ,mBAAmB,KAG3BrP,SAAS,mCAEb,cAACyO,GAAD,CACI5P,KAAMtC,KAAKsJ,MAAMuJ,kBACjBtQ,QAAS,WAAQ,EAAKoH,SAAS,CAAEkJ,mBAAmB,KACpDhG,QAAS,CACLmF,OAAQ,EACRC,OAAQ,IALhB,SAQI,cAACjP,EAAA,EAAD,CAAMkR,MAAO,CAAEpH,OAAQ,OAAQ7K,QAAS,GAAxC,SACI,eAACiJ,EAAA,EAAD,CAAKpJ,QAAQ,OAAOgK,cAAc,SAASoI,MAAO,CAAEpH,OAAQ,QAA5D,UACI,cAAC5B,EAAA,EAAD,CAAKpJ,QAAQ,OAAOiK,KAAM,EAAG/J,eAAe,SAASD,WAAW,SAAhE,SACI,eAACwB,EAAA,EAAD,CAAYC,QAAQ,KAApB,UAA0B+E,EAAiBvB,SAAS0B,WAAWkE,SAASjN,KAAxE,kBAEJ,cAACuL,EAAA,EAAD,CAAKpJ,QAAQ,OAAOiK,KAAM,EAAG/J,eAAe,SAA5C,SACI,cAAC0B,EAAA,EAAD,CACIF,QAAQ,YACRG,MAAM,UACNuQ,MAAO,CAAEjL,MAAO,QAChBrF,QAAS,WACL,EAAKM,QACL,EAAKyF,SAAS,CACVkJ,mBAAmB,KAP/B,SAWI,eAACtP,EAAA,EAAD,CAAYC,QAAQ,KAApB,mBACW+E,EAAiBvB,SAAS0B,WAAWjB,QAAQ9H,mBAO5E,cAACsD,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAf,SACI,eAAC4H,EAAA,EAAD,CAAKpJ,QAAQ,OAAOgK,cAAc,MAAlC,UACI,cAACZ,EAAA,EAAD,CAAKa,KAAK,OAAV,SACI,cAACxI,EAAA,EAAD,CAAYC,QAAQ,KAApB,wBAEJ,cAAC0H,EAAA,EAAD,CAAKa,KAAM,EAAX,SACI,cAAC2E,EAAA,EAAD,CACI1F,SAAUhL,KAAKsJ,MAAMsJ,aACrBhP,QAAS,WACL2E,EAAiBvB,SAAS0B,WAAWnE,QAAQ,CAAE5E,KAAK,OAAD,OAAS4I,EAAiBvB,SAAS0B,WAAWpE,MAAMkD,WAH/G,SAMI,cAAC,KAAD,CAAS7D,MAAO3D,KAAKsJ,MAAMsJ,aAAe,WAAa,gBAG/D,cAAC1H,EAAA,EAAD,CAAKa,KAAM,EAAX,SACI,cAAC2E,EAAA,EAAD,CACI9M,QAAS,WACL,EAAK+F,SAAS,CACViJ,cAAe,EAAKtJ,MAAMsJ,gBAHtC,SAOI,cAAC,KAAD,CAAcjP,MAAO3D,KAAKsJ,MAAMsJ,aAAe,UAAY,oBAK3E,cAAC3P,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAf,SACKtD,KAAKmU,kBAEV,cAAClR,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAI8Q,GAAI,EAAvB,SACI,eAACC,GAAA,EAAD,CACI5R,UAAWN,EAAQwQ,UACnBnP,QAAQ,YACRG,MACI3D,KAAKsJ,MAAM9C,QACLxG,KAAKsJ,MAAM7C,OAAS,UAAY,YAChC,UANd,UASI,cAAC/C,EAAA,EAAD,CAAQjB,UAAWN,EAAQwQ,UAAW/O,QAAS5D,KAAKmT,uBAApD,SACKnT,KAAKsJ,MAAM9C,QAAU,cAAC,KAAD,IAAe,cAAC,KAAD,MAEzC,cAAC9C,EAAA,EAAD,CAAQjB,UAAWN,EAAQwQ,UAAW3H,UAAWhL,KAAKsJ,MAAM9C,QAAS5C,QAAS,WACtE,EAAK0F,MAAM9C,UACX+B,EAAiBvB,SAAS0B,WAAWjB,QAAQ6M,QAC7C,EAAK3K,SAAS,CACVlD,QAAS,EAAK6C,MAAM7C,WAJhC,SAQKzG,KAAKsJ,MAAM7C,OAAS,cAAC,KAAD,IAA4B,cAAC,KAAD,WAI7D,cAACxD,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAG8Q,GAAI,EAAtB,SACI,cAACvI,GAAD,CACIG,QAAShM,KAAKsJ,MAAM9C,QAAUxG,KAAKsJ,MAAM7C,OAAS,SAAW,UAAY,UACzEwF,MAAM,UAAA1D,EAAiBvB,SAAS0B,WAAWjB,eAArC,eAA8C9H,OAAQ,WAGpE,cAACsD,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAG8Q,GAAI,EAAtB,SACI,cAACvI,GAAD,CACIG,QAAQ,YACRC,KAAMZ,GAAWI,QAAX,UAAmBlD,EAAiBvB,SAAS0B,WAAWjB,eAAxD,aAAmB,EAA8CX,iBAG/E,cAAC7D,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAG8Q,GAAI,EAAtB,SACI,cAACvI,GAAD,CAASG,QAAQ,UAAUC,MAAM,UAAA1D,EAAiBvB,SAAS0B,WAAW6L,YAArC,eAA2C5U,OAAQ,kBApTlE,GAAmDoE,cC2CxEuP,GAAoB,aACpBG,GAA0B,KAEjC3K,GAA2CvI,EAAoByG,SA2KtDwN,GAzKH9S,aApFG,SAACC,GAAD,OAAkBC,YAAa,CAC1C6S,KAAM,CACFnI,SAAU,EACVoI,SAAU,UAGd/B,UAAW,CACP1J,MAAO,QAGX0L,WAAY,CACRC,YAAajT,EAAMkL,QAAQ,IAG/B3L,MAAO,CACHoL,SAAU,GAGduI,cAAe,CACXvI,SAAU,EACVrK,QAAS,GAGb6S,eAAgB,CACZ7S,QAAS,GAGb8S,UAAW,CACPC,WAAY,IAGhB3C,gBAAiB,CACbC,YAAa3Q,EAAMkL,QAAQ,GAC3B0F,gBAAiB5Q,EAAM6Q,QAAQC,KAAK,IACpCrB,OAAQ,EACRtE,OAAQ,QAGZmI,oBAAqB,CACjBL,YAAa,GAGjB/S,MAAO,CACHC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,QAAS,EACTC,OAAQ,OACR+G,MAAO,OACP6D,OAAQ,QAGZoI,YAAa,CACTC,WAAY,GACZ5G,cAAe,OA8BX7M,CAAA,kDAGR,WAAYU,GAAkB,IAAD,uBACzB,cAAMA,IAHHgT,WAAoB,GAKvB,IAIMC,EAAenQ,aAAaC,QAAQ,gBACpCmQ,EAAcpQ,aAAaC,QAAQ,WARhB,OAUzB,EAAKmE,MAAQ,CACTiM,WAAY,GACZC,YAAa,GACbhP,SATU,EAUVC,QATS,EAUTK,YAZc,EAad2O,aAAa,EACbC,oBAAqB,iBAAkBjV,OACvCmS,cAAc,EACdE,mBAAmB,EACnBC,mBAAoB,EACpBC,kBAAmB,GACnBvJ,kBAAkB,EAClBwJ,yBAAyB,EACzBoC,aAAcA,EAAe,IAAI3Q,KAAKU,KAAKC,MAAMgQ,IAAiB,IAAI3Q,KAAK,EAAG,EAAG,EAAG,GAAI,EAAG,IAC3FiR,kBAAmCvK,UAAhBkK,GAGvB,EAAKM,cAAgB,EAAKA,cAAclG,KAAnB,gBA5BI,EAHrB,gEAmCJ5G,GAAoBuB,wCAGhBnF,aAAaI,QAAQ,UAAW8F,SAGpCpL,KAAK4V,kBAzCD,sCA4CS,IAAD,OACNnR,EAAM,IAAIC,KAEZD,EAAIoJ,aAAe7N,KAAKsJ,MAAM+L,aAAaxH,YACxCpJ,EAAIqJ,eAAiB9N,KAAKsJ,MAAM+L,aAAavH,cAEhDhF,GAAoBuK,iBAAiBC,GAAW,CAC5CC,KAAM,oBAIdxM,YAAW,kBAAM,EAAK6O,kBAAiB,OAvDnC,+BA0DE,IAAD,OACCzT,EAAUnC,KAAKoC,MAAMD,QAC3B,OACI,sBAAKM,UAAWN,EAAQsS,KAAxB,UACI,cAACvC,GAAD,CACI5P,KAAMtC,KAAKsJ,MAAMqM,kBACjBpT,QAAS,WAAQzC,QAAQ+V,IAAI,qBAAsB,EAAKlM,SAAS,CAAEgM,mBAAmB,KACtF9I,QAAS,CACL1D,IAAK,CAAE7F,GAAI,EAAGwS,GAAI,GAClB9D,OAAQ,CAAE1O,GAAI,EAAGwS,GAAI,GACrB7D,OAAQ,CAAE3O,GAAI,EAAGwS,GAAI,GACrB1M,OAAQ,CAAE9F,GAAI,EAAGwS,GAAI,IAP7B,SAUI,cAAC9S,EAAA,EAAD,CAAMP,UAAWN,EAAQN,MAAzB,SACI,eAACoB,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASpB,WAAW,SAASqB,aAAa,SAApE,UACI,cAACH,EAAA,EAAD,CAAMI,MAAI,EAACC,IAAE,EAAb,SACI,eAACC,EAAA,EAAD,CAAYC,QAAQ,KAApB,qBAAkC4H,aAEtC,eAACnI,EAAA,EAAD,CAAMI,MAAI,EAACC,IAAE,EAAb,UACI,cAACC,EAAA,EAAD,CAAYC,QAAQ,QAApB,2GADJ,IAIsC,0BAEtC,cAACP,EAAA,EAAD,CAAMI,MAAI,EAACC,IAAE,EAAb,SACI,cAACI,EAAA,EAAD,CACIF,QAAQ,YACRuS,KAAK,kBACL1E,OAAO,SACPzN,QAAS,WAAQ,EAAK+F,SAAS,CAAEgM,mBAAmB,KAJxD,sCAYhB,cAACK,EAAA,EAAD,CAAQ7K,SAAS,SAAjB,SACI,eAAC8K,EAAA,EAAD,WACI,cAACvF,EAAA,EAAD,CACI/F,KAAK,QACLlI,UAAWN,EAAQwS,WACnBhR,MAAM,UAAU0J,aAAW,OAC3BzJ,QAAS,WACL,EAAK+F,SAAS,CAAE8L,aAAa,KALrC,SAQI,cAAC,KAAD,MAEJ,cAAClS,EAAA,EAAD,CAAYC,QAAQ,KAAKf,UAAWN,EAAQjB,MAA5C,SACKoS,UAIb,cAACvK,GAAD,CACIzG,KAAMtC,KAAKsJ,MAAMmM,YACjBlT,QAAS,WACL,EAAKoH,SAAS,CAAE8L,aAAa,OAIrC,eAACxS,EAAA,EAAD,CAAMC,WAAS,EAACT,UAAWN,EAAQ0S,cAAehI,QAAS,EAA3D,UACI,cAAC5J,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIwS,GAAI,EAAvB,SACI,cAAC7I,EAAA,EAAD,CAAOxK,UAAWN,EAAQ2S,eAA1B,SACI,cAAC1C,GAAD,QAGR,cAACnP,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIwS,GAAI,EAAvB,SACI,cAAC7I,EAAA,EAAD,CAAOxK,UAAWN,EAAQ2S,eAA1B,SACI,eAAC7R,EAAA,EAAD,CAAMC,WAAS,EAAf,UACI,cAACD,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAf,SACI,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAApB,wBAEJ,cAACP,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAf,SACI,cAAC,KAAD,CAAyB4S,MAAOC,KAAhC,SACI,cAAC,KAAD,CACIvW,GAAG,oBACHiP,MAAM,QACN7N,MAAOhB,KAAKsJ,MAAM+L,aAClBnF,SAAU,SAACkG,GACP,EAAKzM,SAAS,CACV0L,aAAce,IAElBlR,aAAaI,QAAQ,eAAgBF,KAAKG,UAAU6Q,KAExDC,YAAa,eAOrC,cAACpT,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIwS,GAAI,EAAvB,SACI,cAAC7I,EAAA,EAAD,CAAOxK,UAAWN,EAAQ2S,eAA1B,SACI,eAAC7R,EAAA,EAAD,CAAMC,WAAS,EAAf,UACI,cAACD,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAf,SACI,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAApB,uBAEJ,cAACP,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAf,SACI,cAAC4I,GAAD,uBA9JxB,GAA8CnI,cC/G1DuS,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFhD,SAASiD,eAAe,W","file":"static/js/main.48a5d133.chunk.js","sourcesContent":["export abstract class Subscribable {\n    private subscribers: Map<String, ((obj?: any) => void)> = new Map()\n    protected abstract readonly name: string\n\n    public subscribe(id: string, callback: (obj?: any) => void) {\n        console.debug('Subscribe', id, 'to', this.constructor.name, this)\n        this.subscribers.set(id, callback)\n    }\n\n    public unsubscribe(id: string) {\n        console.debug('Unsubscribe', id, 'from', this.constructor.name, this)\n        this.subscribers.delete(id)\n    }\n\n    protected updateSubscribers() {\n        this.subscribers.forEach((callback, key, map) => {\n            console.debug('Update Subscriber', key, 'on', this.constructor.name, this)\n            callback(this)\n        })\n    }\n}\n","import { Subscribable } from '../data/Subscribable'\n\nexport class NotificationService extends Subscribable {\n    private static _instance: NotificationService;\n    private _desktopNotificationSupport: boolean = false\n    protected readonly name: string = 'NotificationService'\n\n    public static get instance(): NotificationService {\n        return this._instance || (this._instance = new this())\n    }\n\n    private constructor() {\n        super()\n        this._desktopNotificationSupport = 'Notification' in window\n    }\n\n    public get desktopNotificationSupport(): boolean {\n        return this._desktopNotificationSupport\n    }\n\n    public get desktopNotificationEnabled() {\n        return this.desktopNotificationSupport && Notification.permission === 'granted'\n    }\n\n    public requestDesktopNotificationPermissions() {\n        if (this.desktopNotificationSupport && Notification.permission === 'default') {\n            Notification.requestPermission()\n                .then((value) => { this.updateSubscribers() })\n        }\n    }\n\n    public showNotification(\n        title: string,\n        options: NotificationOptions,\n        onclick: (notification: Notification, event: Event) => void = (\n            notification: Notification, event: Event\n        ) => {\n            notification.close(); window.focus()\n        }\n    ) {\n        let notification = new Notification(\n            title, options\n        )\n\n        notification.onclick = (event: Event) => (onclick(notification, event))\n    }\n}\n","import { Backdrop, Button, Card, createStyles, Fade, Grid, Modal, Theme, Typography, WithStyles, withStyles } from \"@material-ui/core\"\nimport React, { Component } from \"react\"\n\nconst styles = (theme: Theme) => createStyles({\n    modal: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        padding: 8,\n        border: 'none'\n    },\n});\n\ninterface ConfirmationModalProps extends WithStyles<typeof styles> {\n    onClose: () => void\n    onConfirm: () => void\n    open: boolean\n    title: string\n    subtitle: string\n    buttonText: string\n}\n\ninterface ConfirmationModalState { }\n\nexport const ConfirmationModal = withStyles(styles)(class ConfirmationModalComponent extends Component<ConfirmationModalProps, ConfirmationModalState> {\n    static defaultProps = {\n        title: 'Are you sure?',\n        subtitle: 'This action cannot be undone',\n        buttonText: 'Continue'\n    }\n\n    render() {\n        const classes = this.props.classes\n        return (\n            <Modal\n                open={this.props.open}\n                onClose={this.props.onClose}\n                closeAfterTransition\n                className={classes.modal}\n                BackdropComponent={Backdrop}\n                BackdropProps={{\n                    timeout: 500,\n                }}\n            >\n                <Fade in={this.props.open}>\n                    <Card className={classes.modal}>\n                        <Grid container direction='column' alignItems='center' alignContent='center'>\n                            <Grid item xs>\n                                <Typography variant='h4'>{this.props.title}</Typography>\n                            </Grid>\n                            <Grid item xs>\n                                <Typography variant='subtitle1'>{this.props.subtitle}</Typography><br />\n                            </Grid>\n                            <Button\n                                color='secondary'\n                                variant='contained'\n                                onClick={this.props.onConfirm}\n                            >\n                                <Grid item xs>\n                                    {this.props.buttonText}\n                                </Grid>\n                            </Button>\n                        </Grid>\n                    </Card>\n                </Fade>\n            </Modal>\n        )\n    }\n})\n","import { Collection } from \"../interfaces/Collection\"\nimport { Subscribable } from \"./Subscribable\"\n\nexport interface HistoryItemObject {\n    name: string,\n    start: number,\n    end: number\n}\n\nexport class HistoryItem {\n    readonly name: string\n    readonly start: number\n    readonly end: number\n\n    constructor({\n        name,\n        start,\n        end\n    }: HistoryItemObject) {\n        this.name = name\n        this.start = start\n        this.end = end\n    }\n\n    public get durationMs(): number {\n        return this.end - this.start\n    }\n}\n\nexport class HistoryItemCollection extends Subscribable implements Collection<HistoryItem> {\n    readonly items: HistoryItem[] = []\n    protected readonly name: string = 'HistoryItemCollection'\n\n    constructor(collection?: Collection<HistoryItemObject>) {\n        super()\n        if (collection?.items) {\n            for (let item of collection.items) {\n                this.addItem(item)\n            }\n        }\n    }\n\n    public toJSON(): Collection<HistoryItemObject> {\n        return {\n            items: this.items\n        }\n    }\n\n    get today(): HistoryItem[] {\n        let now = new Date(Date.now())\n        return this.items.filter((item) => {\n            let start = new Date(item.start)\n            return (\n                start.getFullYear() === now.getFullYear() &&\n                start.getMonth() === now.getMonth() &&\n                start.getDay() === now.getDay()\n            )\n        })\n    }\n\n    public addItem(item: HistoryItemObject) {\n        this.items.push(new HistoryItem(item))\n        this.updateSubscribers()\n    }\n}\n","import { HistoryItemCollection, HistoryItemObject } from '../data/History';\nimport { Subscribable } from '../data/Subscribable'\n\nexport class HistoryService extends Subscribable {\n    private static _instance: HistoryService;\n    public static get instance(): HistoryService { return this._instance || (this._instance = new this()) }\n    protected readonly name: string = 'HistoryService'\n\n    private _history: HistoryItemCollection;\n\n    public get history(): HistoryItemCollection { return this._history }\n    public get items() { return this.history.items }\n\n    private constructor() {\n        super()\n        let history: string | null = localStorage.getItem('history')\n        if (history) {\n            this._history = new HistoryItemCollection(JSON.parse(history))\n        } else {\n            this._history = new HistoryItemCollection()\n        }\n    }\n\n    public save(): void {\n        localStorage.setItem('history', JSON.stringify(this.history))\n        this.updateSubscribers()\n    }\n\n    public addItem(item: HistoryItemObject) {\n        this._history.addItem(item)\n        this.save()\n    }\n\n    public clear(): void {\n        this._history = new HistoryItemCollection()\n        this.save()\n    }\n}\n","import { HistoryService } from \"../services/History\";\nimport { Subscribable } from \"./Subscribable\";\n\nconst DEFAULT_MIN = 1\nconst DEFAULT_MAX = 90\nconst DEFAULT_INTERVAL_MS = 1000\n\nconst SHORT_TIMER = false // For debug purposes\n\nexport interface CountdownObject {\n    name?: string,\n    min?: number,\n    max?: number,\n    startTime?: any,\n    endTime?: any,\n    running?: boolean,\n    paused?: boolean\n    value?: number,\n    intervalMs?: number,\n    runningCallback?: (countdown: Countdown) => void\n}\n\nexport class Countdown extends Subscribable {\n    private timeout: any\n\n    private _startTime?: number = undefined;\n    private _endTime?: number = undefined;\n\n    private _running: boolean = false\n    private _paused: boolean = false\n\n    private _name: string = 'NEW'\n    private _min: number = 1\n    private _max: number = 90\n    private _value: number = 0\n    private _intervalMs: number = 1000\n\n    public runningCallback?: (countdown: Countdown) => void\n\n    public constructor(countdown: CountdownObject) {\n        super()\n        this._startTime = countdown.startTime\n        this._endTime = countdown.endTime\n        this._running = countdown.running === true\n        this._paused = countdown.paused === true\n        this._name = countdown.name ? countdown.name : 'NEW'\n        this._min = countdown.min ? countdown.min : DEFAULT_MIN\n        this._max = countdown.max ? countdown.max : DEFAULT_MAX\n        this._value = countdown.value ? countdown.value : this._min\n        this._intervalMs = countdown.intervalMs ? countdown.intervalMs : DEFAULT_INTERVAL_MS\n        this.runningCallback = countdown.runningCallback\n    }\n\n    public toJSON(): CountdownObject {\n        return {\n            startTime: this.startTime,\n            endTime: this.endTime,\n            running: this.running,\n            paused: this.paused,\n            name: this.name,\n            min: this.min,\n            max: this.max,\n            value: this.value,\n            intervalMs: this.intervalMs,\n        }\n    }\n\n    public get name(): string { return this._name }\n    public set name(name: string) { this._name = name; this.updateSubscribers() }\n\n    public get running(): boolean { return this._running }\n    public get paused(): boolean { return this._paused; }\n\n    public get value(): number { return this._value }\n    public set value(value: number) { this._value = value }\n\n    public get min(): number { return this._min ? this._min : DEFAULT_MIN }\n    public set min(min: number) { this._min = min; this.updateSubscribers() }\n\n    public get max(): number { return this._max ? this._max : DEFAULT_MAX }\n    public set max(max: number) { this._max = max; this.updateSubscribers() }\n\n    public get intervalMs(): number { return this._intervalMs ? this._intervalMs : DEFAULT_INTERVAL_MS }\n\n    public get startTime(): number | undefined { return this._startTime }\n    public get endTime(): number | undefined { return this._endTime }\n\n    public get secondsLeft(): number {\n        if (this.running && this.endTime) {\n            return Math.floor((this.endTime - Date.now()) / 1000)\n        } else {\n            return 0\n        }\n    }\n\n    start() {\n        this._running = true\n        this._startTime = Date.now()\n        if (SHORT_TIMER) {\n            this._endTime = this._startTime + 3 * 1000\n        } else {\n            this._endTime = this._startTime + (this.value * 60 * 1000)\n        }\n\n        this.update()\n    }\n\n    stop() {\n        this._running = false\n        this._paused = false\n        this.update()\n    }\n\n    pause() {\n        if (this.running) {\n            this._paused = !this._paused\n            if (!this.paused) {\n                this._endTime = Date.now() + (this.secondsLeft * 1000)\n            }\n\n            this.update()\n        }\n    }\n\n    update() {\n        if (this.endTime !== undefined && !this.paused) {\n            if (this.runningCallback) this.runningCallback(this)\n            if (this.secondsLeft > 0) {\n                this.timeout = setTimeout(() => this.update(), this.intervalMs)\n            } else {\n                this._running = false\n                this._endTime = Date.now()\n\n                let endTime: number = Date.now()\n\n                if (this.startTime && this.endTime) {\n                    if (endTime > this.endTime) {\n                        endTime = this.endTime\n                    }\n\n                    HistoryService.instance.addItem({\n                        name: this.name,\n                        start: this.startTime,\n                        end: endTime\n                    })\n                }\n\n                clearTimeout(this.timeout)\n            }\n        }\n\n        this.updateSubscribers()\n    }\n}\n\nexport interface CountdownCollectionObject {\n    readonly items: CountdownObject[]\n    currentIndex?: number\n}\n\nexport class CountdownCollection extends Subscribable implements CountdownCollectionObject {\n    private _items: Countdown[] = []\n    private _currentIndex = 0\n    private running: boolean = false\n    protected readonly name: string = 'CountdownCollection'\n\n    constructor(collection?: CountdownCollectionObject) {\n        super()\n        if (collection?.items) {\n            for (let item of collection.items) {\n                this.addItem(item)\n            }\n        }\n\n        if (collection?.currentIndex) {\n            this._currentIndex = collection.currentIndex\n        }\n\n        if (this._currentIndex > this.items.length - 1) {\n            this._currentIndex = 0\n        }\n\n        if (this.current?.running) {\n            this.running = true\n        }\n    }\n\n    public get items(): Countdown[] { return this._items }\n\n    public get currentIndex(): number { return this._currentIndex }\n    public get current(): Countdown { return this.items[this.currentIndex] }\n\n    public get previousIndex(): number { return (this.items.length + this.currentIndex - 1) % this.items.length }\n    public get previous(): Countdown { return this.items[this.previousIndex] }\n\n    public get nextIndex(): number { return (this.currentIndex + 1) % this.items.length }\n    public get next(): Countdown { return this.items[this.nextIndex] }\n\n    public get runningCountdown(): Countdown | null {\n        return this.items.filter((countdown: Countdown) => countdown.running)[0]\n    }\n\n    public toJSON(): CountdownCollectionObject {\n        return {\n            items: this.items,\n            currentIndex: this.currentIndex\n        }\n    }\n\n    public countdownSubscriber(countdown: Countdown): void {\n        if (this.current.running) {\n            this.running = true\n        } else if (this.running) {\n            this._currentIndex = this.nextIndex\n            this.running = false\n        }\n\n        this.updateSubscribers()\n    }\n\n    public addItem(countdownObject: CountdownObject): void {\n        if (countdownObject !== null) {\n            let countdown: Countdown = new Countdown(countdownObject)\n            countdown.subscribe(this.name, (countdown: Countdown) => {\n                this.countdownSubscriber(countdown)\n            })\n\n            this.items.push(countdown)\n        }\n        this.updateSubscribers()\n    }\n\n    public deleteItem(index: number) {\n        delete this.items[index]\n        this.updateSubscribers()\n    }\n\n    public swapItems(a: number, b: number) {\n        let lower: number\n        let higher: number\n        if (a < b) {\n            lower = a\n            higher = b\n        } else if (b < a) {\n            lower = b\n            higher = a\n        } else {\n            throw new RangeError('Cannot swap an element with itself')\n        }\n\n        if (this.currentIndex === lower) this._currentIndex = higher;\n        else if (this.currentIndex === higher) this._currentIndex = lower;\n\n        this._items = [\n            ...this.items.slice(0, lower),\n            this.items[higher],\n            this.items[lower],\n            ...this.items.slice(higher + 1)\n        ]\n\n        this.updateSubscribers()\n    }\n\n    public getItem(index: number): Countdown {\n        return this.items[index]\n    }\n}\n","import { CountdownCollection, CountdownCollectionObject } from '../data/Countdown';\nimport { Subscribable } from '../data/Subscribable'\n\nconst DEFAULT_COUNTDOWNS: CountdownCollectionObject = {\n    items: [\n        { name: 'Work', min: 1, max: 90, value: 50 },\n        { name: 'Break time', min: 1, max: 15, value: 10 },\n    ]\n}\n\nexport class CountdownService extends Subscribable {\n    private static _instance: CountdownService;\n    private _countdowns: CountdownCollection = new CountdownCollection();\n    protected readonly name: string = 'CountdownService'\n\n    public static get instance(): CountdownService {\n        return this._instance || (this._instance = new this())\n    }\n\n    public get countdowns(): CountdownCollection { return this._countdowns }\n\n    public get items() {\n        return this.countdowns.items\n    }\n\n    private constructor() {\n        super()\n        this.load()\n    }\n\n    public load(): void {\n        let countdowns: string | null = localStorage.getItem(this.name)\n        if (countdowns) {\n            this._countdowns = new CountdownCollection(JSON.parse(countdowns))\n        } else {\n            let legacyCountdowns: string | null = localStorage.getItem('countdowns')\n            let currentCountdown: string | null = localStorage.getItem('currentCountdown')\n\n            if (legacyCountdowns) {\n                this._countdowns = new CountdownCollection({\n                    items: JSON.parse(legacyCountdowns),\n                    currentIndex: currentCountdown ? parseInt(currentCountdown) : 0\n                })\n\n            } else { // If no data is present, provide default data\n                this._countdowns = new CountdownCollection(DEFAULT_COUNTDOWNS)\n            }\n        }\n\n        this._countdowns.subscribe(this.name, () => {\n            this.save()\n        })\n\n        this.save()\n    }\n\n    public save(): void {\n        localStorage.setItem(this.name, JSON.stringify(this.countdowns))\n        this.updateSubscribers()\n    }\n\n    public reset(): void {\n        this._countdowns = new CountdownCollection(DEFAULT_COUNTDOWNS);\n        this.save()\n    }\n}\n","import React, { Component } from 'react';\n\nimport {\n    Box,\n    Button,\n    createStyles,\n    Divider,\n    Drawer,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    ListItemText,\n    Switch,\n    Theme,\n    Typography,\n    WithStyles, withStyles\n} from '@material-ui/core';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport { NotificationService } from '../services/Notification';\nimport { ConfirmationModal } from './ConfirmationModal';\nimport { CountdownService } from '../services/Countdown';\nimport { HistoryService } from '../services/History';\n\nconst styles = (theme: Theme) => createStyles({\n    sideBar: {\n        width: 250\n    },\n    footer: {\n        top: 'auto',\n        bottom: 0,\n        width: '100%',\n        padding: 8,\n    },\n    footerButton: {\n        width: '100%'\n    }\n})\n\nconst notificationService: NotificationService = NotificationService.instance\n\ninterface SidebarProps extends WithStyles<typeof styles> {\n    open: boolean,\n    onClose: Function,\n}\n\ninterface SidebarState {\n    notificationsEnabled: boolean\n    confirmResetOpen: boolean\n    confirmClearHistoryOpen: boolean\n}\n\nexport const Sidebar = withStyles(styles)(class SidebarComponent extends Component<SidebarProps, SidebarState> {\n    constructor(props: SidebarProps) {\n        super(props)\n        this.state = {\n            notificationsEnabled: notificationService.desktopNotificationEnabled,\n            confirmResetOpen: false,\n            confirmClearHistoryOpen: false\n        }\n    }\n\n    refreshNotificationState() {\n        if (this.state.notificationsEnabled !== notificationService.desktopNotificationEnabled) {\n            this.setState({\n                notificationsEnabled: notificationService.desktopNotificationEnabled\n            })\n        }\n    }\n\n    componentDidUpdate() {\n        this.refreshNotificationState()\n    }\n\n    componentDidMount() {\n        notificationService.subscribe('NotificationService', () => {\n            this.refreshNotificationState()\n        })\n    }\n\n    componentWillUnmount() {\n        notificationService.unsubscribe('NotificationService')\n    }\n\n    render() {\n        const classes = this.props.classes\n        return (\n            <Drawer\n                anchor='left'\n                open={this.props.open}\n                onClose={() => this.props.onClose()}\n            >\n                <ConfirmationModal\n                    open={this.state.confirmResetOpen}\n                    onClose={() => {\n                        this.setState({\n                            confirmResetOpen: false\n                        })\n\n                        this.props.onClose();\n                    }}\n                    onConfirm={() => {\n                        CountdownService.instance.reset()\n\n                        this.setState({\n                            confirmResetOpen: false\n                        })\n\n                        this.props.onClose();\n                    }}\n                    subtitle='Resetting your countdowns cannot be undone'\n                />\n                <ConfirmationModal\n                    open={this.state.confirmClearHistoryOpen}\n                    onClose={() => {\n                        this.setState({\n                            confirmClearHistoryOpen: false\n                        })\n\n                        this.props.onClose();\n                    }}\n                    onConfirm={() => {\n                        HistoryService.instance.clear()\n\n                        this.setState({\n                            confirmClearHistoryOpen: false\n                        })\n\n                        this.props.onClose();\n                    }}\n                    subtitle='Clearing history cannot be undone'\n                />\n                <div className={classes.sideBar} >\n                    <List>\n                        <ListItem\n                            button\n                            onClick={() => { notificationService.requestDesktopNotificationPermissions() }}\n                        >\n                            <ListItemIcon><NotificationsIcon /></ListItemIcon>\n                            <ListItemText primary=\"Notifications\" />\n                            <ListItemSecondaryAction>\n                                <Switch\n                                    edge=\"end\"\n                                    onClick={() => { notificationService.requestDesktopNotificationPermissions() }}\n                                    checked={this.state.notificationsEnabled}\n                                    inputProps={{ 'aria-labelledby': 'switch-list-label-bluetooth' }}\n                                    onFocus={() => this.refreshNotificationState()}\n                                    onBlur={() => this.refreshNotificationState()}\n                                    disabled={!notificationService.desktopNotificationSupport}\n                                />\n                            </ListItemSecondaryAction>\n                        </ListItem>\n                        <Divider />\n                        <ListItem\n                            button\n                            onClick={() => { this.setState({ confirmClearHistoryOpen: true }) }}\n                        >\n                            <ListItemText primary='Clear history' />\n                        </ListItem>\n                        <ListItem\n                            button\n                            onClick={() => { this.setState({ confirmResetOpen: true }) }}\n                        >\n                            <ListItemText primary='Reset to defaults' />\n                        </ListItem>\n                    </List>\n                </div>\n                <Box position='fixed' className={classes.footer}>\n                    <Button>\n                        <Typography variant='caption'>\n                            Version {process.env.REACT_APP_VERSION} (what's new)\n                        </Typography>\n                    </Button>\n                </Box>\n            </Drawer>\n        )\n    }\n});\n","\nexport class TimeFormat {\n    static seconds(timerSeconds: number): string {\n        let hours = Math.floor(timerSeconds / 60 / 60)\n        let minutes = Math.floor((timerSeconds - (hours * 60 * 60)) / 60)\n        let seconds = Math.floor(timerSeconds - (hours * 60 * 60) - (minutes * 60))\n\n        let returnStr: string[] = []\n\n        if (hours > 0) {\n            returnStr.push(`${hours}h`)\n        }\n\n        if (minutes > 0) {\n            returnStr.push(`${minutes}m`)\n        }\n\n        returnStr.push(`${seconds}s`)\n\n        return returnStr.join(' ')\n    }\n\n    static minutes(timerMinutes: number): string {\n        let hours = Math.floor(timerMinutes / 60)\n        let minutes = timerMinutes - (hours * 60)\n\n        let returnStr: string[] = []\n\n        if (hours > 0) {\n            returnStr.push(`${hours}h`)\n        }\n\n        returnStr.push(`${minutes}m`)\n\n        return returnStr.join(' ')\n    }\n}\n","import { Box, createStyles, Theme, Typography, withStyles, WithStyles } from \"@material-ui/core\";\nimport React from \"react\";\nimport { Component } from \"react\";\n\nconst styles = (theme: Theme) => createStyles({});\n\ninterface TwoTextProps extends WithStyles<typeof styles> {\n    caption: string,\n    text: string\n};\n\ninterface TwoTextState { }\n\nexport const TwoText = withStyles(styles)(class TwoTextInternal extends Component<TwoTextProps, TwoTextState> {\n    render() {\n        return (\n            <Box flexDirection='column' flex={2} display='flex' alignItems='center' >\n                <Box display='flex'>\n                    <Typography variant=\"caption\">{this.props.caption}</Typography>\n                </Box>\n                <Box display='flex'>\n                    <Typography variant='subtitle1'>{this.props.text}</Typography>\n                </Box>\n            </Box>\n        )\n    }\n});\n","import {\n    Box,\n    createStyles,\n    Grid,\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Theme,\n    Typography,\n    WithStyles,\n    withStyles\n} from \"@material-ui/core\"\nimport React, { Component } from \"react\"\nimport { TimeFormat } from \"../data/format/Time\";\nimport { HistoryItem, HistoryItemCollection } from \"../data/History\";\nimport { HistoryService } from \"../services/History\";\nimport { TwoText } from \"../widgets/TwoText\";\n\nconst styles = (theme: Theme) => createStyles({\n    table: {\n        minWidth: 400,\n    },\n    totalsGrid: { flexGrow: 1, padding: 8 },\n});\n\ninterface HistoryListProps extends WithStyles<typeof styles> { };\ninterface HistoryListState {\n    history: HistoryItemCollection\n};\n\nexport const HistoryList = withStyles(styles)(class HistoryListInternal extends Component<HistoryListProps, HistoryListState> {\n    private readonly name: string = 'HistoryList'\n\n    constructor(props: HistoryListProps) {\n        super(props)\n\n        this.state = {\n            history: HistoryService.instance.history\n        }\n    }\n\n    componentDidMount() {\n        HistoryService.instance.subscribe(\n            this.name, () => { this.setState({ history: HistoryService.instance.history }) }\n        )\n    }\n\n    componentWillUnmount() {\n        HistoryService.instance.unsubscribe(this.name)\n    }\n\n    render() {\n        const classes = this.props.classes\n        let totals: { [name: string]: number } = {}\n\n        for (let name of this.state.history.today.map((item: HistoryItem) => item.name).sort()) {\n            if (!(name in totals)) {\n                totals[name] = this.state.history.today\n                    .filter((item: HistoryItem) => item.name === name)\n                    .map((item: HistoryItem) => item.durationMs)\n                    .reduce((previous: number, current: number) => previous + current)\n            }\n        }\n\n        return <Grid container spacing={2} className={classes.totalsGrid}>\n            <Grid item xs={2}>\n                <Box flexDirection='column' display='flex' alignItems='center' justifyContent='center' height='100%'>\n                    <Typography variant='h5'>Totals</Typography>\n                </Box>\n            </Grid>\n            {\n                Object.keys(totals).map((name: string) => (\n                    <Grid item key={name} xs={2}>\n                        <Paper>\n                            <TwoText caption={name} text={`${TimeFormat.seconds(totals[name] / 1000)}`} />\n                        </Paper>\n                    </Grid>\n                ))\n            }\n            <Grid item xs={12}>\n                <TableContainer>\n                    <Table className={classes.table} size=\"small\" aria-label=\"a dense table\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Task Name</TableCell>\n                                <TableCell align=\"right\">Duration</TableCell>\n                                <TableCell align=\"right\">Start</TableCell>\n                                <TableCell align=\"right\">End</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {this.state.history.today.map((item: HistoryItem) => {\n                                let start: Date = new Date(item.start)\n                                let end: Date = new Date(item.end)\n                                return (\n                                    <TableRow key={item.name + item.start}>\n                                        <TableCell component=\"th\" scope=\"row\">\n                                            {item.name}\n                                        </TableCell>\n                                        <TableCell align=\"right\">{TimeFormat.seconds(item.durationMs / 1000)}</TableCell>\n                                        <TableCell align=\"right\">{`${start.getHours()}:${start.getMinutes()}:${start.getSeconds()}`}</TableCell>\n                                        <TableCell align=\"right\">{`${end.getHours()}:${end.getMinutes()}:${end.getSeconds()}`}</TableCell>\n                                    </TableRow>\n                                )\n                            })}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </Grid>\n        </Grid >\n    }\n});\n","import React, { ChangeEvent, Component, KeyboardEvent, RefObject } from \"react\";\n\nimport {\n    Box,\n    IconButton,\n    Slider,\n    Theme,\n    Typography,\n    WithStyles,\n    withStyles,\n    createStyles,\n    TextField,\n    Grid,\n    Popover\n} from \"@material-ui/core\";\n\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport CheckIcon from '@material-ui/icons/Check';\n\nconst styles = (theme: Theme) => createStyles({\n    fullWidth: {\n        width: '100%'\n    },\n\n    centeringGrid: {\n        display: 'flex'\n    },\n\n    listItemText: {\n        display: 'block'\n    },\n\n    sliderSpacing: {\n        width: '100%',\n        justifyContent: 'center',\n        verticalAlign: 'middle'\n    },\n\n    sliderLabelContainer: {\n        marginBottom: -16\n    },\n\n    sliderLabel: {\n        paddingRight: 10\n    },\n\n    editPopover: {\n        padding: 8\n    },\n\n    editContainer: {\n        paddingRight: 8,\n    }\n})\n\ninterface LabelSliderProps extends WithStyles<typeof styles> {\n    label: string,\n    labelSuffix: string,\n    value: number,\n    step: number,\n    min: number,\n    max: number,\n    editing: boolean,\n    onChange: (value: number) => void,\n    onEditSave: (name: string, min: number, max: number) => void,\n    formatCallback: Function\n}\n\ninterface LabelSliderState {\n    value: number\n    label: string,\n    editLabel: string,\n    min: number,\n    editMin: number,\n    max: number,\n    editMax: number,\n    step: number,\n    menuOpen: boolean\n    editing: boolean\n    anchor?: HTMLElement\n    labelError: boolean,\n    minError: boolean,\n    maxError: boolean,\n}\n\nexport const LabelSlider = withStyles(styles)(class LabelSliderComponent extends Component<LabelSliderProps, LabelSliderState> {\n    private popoverRef: RefObject<any>\n\n    static defaultProps = {\n        editing: false\n    }\n\n    constructor(props: LabelSliderProps) {\n        super(props)\n        this.state = {\n            value: this.props.value,\n            label: this.props.label,\n            editLabel: this.props.label,\n            min: this.props.min,\n            editMin: this.props.min,\n            max: this.props.max,\n            editMax: this.props.max,\n            step: this.props.step,\n            menuOpen: false,\n            editing: this.props.editing,\n            labelError: false,\n            minError: false,\n            maxError: false\n        }\n\n        this.popoverRef = React.createRef()\n\n        this.handleOnChange = this.handleOnChange.bind(this)\n        this.handleKeyPress = this.handleKeyPress.bind(this)\n        this.openPopover = this.openPopover.bind(this)\n        this.closePopover = this.closePopover.bind(this)\n        this.saveForm = this.saveForm.bind(this)\n        this.cancelEdit = this.cancelEdit.bind(this)\n    }\n\n    getMinError(min: number, max: number): boolean {\n        return isNaN(min) || min < 1 || min > max\n    }\n\n    getMaxError(min: number, max: number): boolean {\n        return isNaN(max) || max < 1 || max < min\n    }\n\n    handleOnChange(event: any, newValue: number | number[]) {\n        if (typeof newValue === 'number') {\n            this.setState({\n                value: newValue\n            })\n            this.props.onChange(newValue)\n        } else if (typeof newValue === 'object') {\n            this.setState({\n                value: newValue[0]\n            })\n            this.props.onChange(newValue[0])\n        }\n\n    }\n\n    handleKeyPress(event: KeyboardEvent) {\n        if (event.key === 'Enter') {\n            this.saveForm()\n        }\n    }\n\n    openPopover() {\n        this.setState({\n            editing: true,\n            editLabel: this.state.label,\n            editMin: this.state.min,\n            editMax: this.state.max\n        })\n    }\n\n    closePopover() {\n        this.setState({\n            editing: false\n        })\n    }\n\n    saveForm() {\n        if (!(this.state.labelError || this.state.minError || this.state.maxError)) {\n            let value: number\n            if (this.state.value > this.state.editMax) {\n                value = this.state.editMax\n            } else if (this.state.value < this.state.editMin) {\n                value = this.state.editMin\n            } else (\n                value = this.state.value\n            )\n\n            this.props.onEditSave(this.state.editLabel, this.state.editMin, this.state.editMax)\n\n            this.setState({\n                value: value,\n                label: this.state.editLabel,\n                min: this.state.editMin,\n                max: this.state.editMax\n            })\n\n            this.closePopover()\n        }\n\n    }\n\n    cancelEdit() {\n        this.setState({\n            labelError: false,\n            minError: false,\n            maxError: false\n        })\n        this.closePopover()\n    }\n\n    renderNormalView() {\n        const { classes } = this.props\n        return (\n            <>\n                <Box display='flex' flexDirection='row' flex='100%' alignItems='baseline' className={classes.sliderLabelContainer}>\n                    <Typography variant=\"subtitle1\" className={classes.sliderLabel}>{this.state.label}</Typography>\n                    <Typography variant=\"caption\" className={classes.sliderLabel}>({this.props.formatCallback(this.state.value)})</Typography>\n                </Box>\n                <Box display='flex' flex={1} flexDirection='row'>\n                    <Box m={1} flex='100%' display='flex' justifyContent='flex-start' alignItems='center'>\n                        <Slider\n                            value={this.state.value}\n                            step={this.state.step}\n                            min={this.state.min}\n                            max={this.state.max}\n                            onChange={this.handleOnChange}\n                            getAriaValueText={(value: number) => { return `${value}m` }}\n                            valueLabelDisplay=\"off\"\n                            aria-labelledby=\"break-length\"\n                        />\n                    </Box>\n                    <Box flex={1} display='flex' justifyContent='flex-end' alignItems='center'>\n                        <IconButton onClick={(event) => {\n                            this.openPopover()\n                        }}>\n                            <EditOutlinedIcon />\n                        </IconButton>\n                    </Box>\n                </Box>\n            </>\n        )\n    }\n\n    renderEditPopover() {\n        const classes = this.props.classes\n        return (\n            <Popover\n                open={this.state.editing}\n                anchorEl={this.popoverRef.current}\n                anchorOrigin={{ vertical: 'center', horizontal: 'left' }}\n                transformOrigin={{ vertical: 'center', horizontal: 'left' }}\n                onClose={this.cancelEdit}\n                onEscapeKeyDown={this.cancelEdit}\n            >\n                <Box display='flex' flex={1} flexDirection='row' className={classes.editPopover}>\n                    <Grid container>\n                        <Grid item xs={6} className={classes.editContainer}>\n                            <TextField\n                                fullWidth\n                                label=\"Name\"\n                                error={this.state.labelError}\n                                value={this.state.editLabel}\n                                margin='dense'\n                                size='small'\n                                variant='outlined'\n                                onChange={(event: ChangeEvent<HTMLTextAreaElement>) => {\n                                    this.setState({\n                                        editLabel: event.target.value,\n                                        labelError: (\n                                            event.target.value === ''\n                                        )\n                                    })\n                                }}\n                                onKeyPress={this.handleKeyPress}\n                            />\n                        </Grid>\n                        <Grid item xs={3} className={classes.editContainer}>\n                            <TextField\n                                label=\"Min\"\n                                error={this.state.minError}\n                                value={this.state.editMin}\n                                size='small'\n                                variant=\"outlined\"\n                                margin='dense'\n                                onChange={(event: ChangeEvent<HTMLTextAreaElement>) => {\n                                    const value = parseInt(event.target.value)\n                                    this.setState({\n                                        editMin: value || 0,\n                                        minError: this.getMinError(value, this.state.max),\n                                        maxError: this.getMaxError(value, this.state.max)\n                                    })\n                                }}\n                                onKeyPress={this.handleKeyPress}\n                            />\n                        </Grid>\n                        <Grid item xs={3} className={classes.editContainer}>\n                            <TextField\n                                label=\"Max\"\n                                error={this.state.maxError}\n                                value={this.state.editMax}\n                                size='small'\n                                variant=\"outlined\"\n                                margin='dense'\n                                onChange={(event: ChangeEvent<HTMLTextAreaElement>) => {\n                                    const value = parseInt(event.target.value)\n                                    this.setState({\n                                        editMax: value || 0,\n                                        minError: this.getMinError(this.state.min, value),\n                                        maxError: this.getMaxError(this.state.min, value)\n                                    })\n                                }}\n                                onKeyPress={this.handleKeyPress}\n                            />\n                        </Grid>\n                    </Grid>\n                    <Box flex={1} display='flex' justifyContent='flex-end' alignItems='center'>\n                        <IconButton onClick={this.saveForm}>\n                            <CheckIcon color='primary' />\n                        </IconButton>\n                        <IconButton onClick={this.cancelEdit}>\n                            <CancelIcon color='secondary' />\n                        </IconButton>\n                    </Box>\n                </Box>\n            </Popover>\n        )\n    }\n\n    render() {\n        return (\n            <div ref={this.popoverRef}> {/* So the popover can have its origin on the row */}\n                <Box display='flex' flexDirection='column'>\n                    {this.renderNormalView()}\n                    {this.renderEditPopover()}\n                </Box>\n            </div>\n        )\n    }\n});\n","import { Backdrop, Box, Fade, Modal, Theme } from \"@material-ui/core\"\nimport { createStyles, WithStyles, withStyles } from \"@material-ui/styles\"\nimport React from \"react\"\nimport { Component } from \"react\"\n\nconst styles = (theme: Theme) => createStyles({\n    container: { width: '100%', height: '100%' },\n});\n/**\n * Data values for flex box spacing of {@link FlexModal}\n * \n * @param top Spacing for the top of the modal\n * @param left Spacing left of the modal\n * @param bottom Spacing below the modal\n * @param right Spacing right of the modal\n * @param middle Vertical space allocated for the modal\n * @param center Horizontal space allocated for the modal\n */\ninterface IFlexGrid {\n    top?: number | object\n    left?: number | object\n    bottom?: number | object\n    right?: number | object\n    middle?: number | object // Vertical\n    center?: number | object // Horizontal\n}\n\nclass FlexGrid implements IFlexGrid {\n    grid: IFlexGrid\n\n    constructor(grid?: IFlexGrid) {\n        if (grid) {\n            this.grid = grid\n        } else {\n            this.grid = { top: 1 }\n        }\n    }\n\n    public get top(): number | object { return this.grid.top ? this.grid.top : 1 }\n    public get left(): number | object { return this.grid.left ? this.grid.left : 1 }\n    public get bottom(): number | object { return this.grid.bottom ? this.grid.bottom : 1 }\n    public get right(): number | object { return this.grid.right ? this.grid.right : 1 }\n    public get middle(): number | object { return this.grid.middle ? this.grid.middle : 1 }\n    public get center(): number | object { return this.grid.center ? this.grid.center : 1 }\n}\n\ninterface FlexModalProps extends WithStyles<typeof styles> {\n    open: boolean\n    onClose: () => void\n    spacing?: IFlexGrid\n};\n\ninterface FlexModalState { };\n\nexport const FlexModal = withStyles(styles)(class FlexModalInternal extends Component<FlexModalProps, FlexModalState> {\n    private spacing: FlexGrid\n\n    constructor(props: FlexModalProps) {\n        super(props)\n        this.spacing = new FlexGrid(props.spacing)\n    }\n\n    render() {\n        const classes = this.props.classes;\n        return (\n            <Modal\n                open={this.props.open}\n                onClose={this.props.onClose}\n                closeAfterTransition\n                BackdropComponent={Backdrop}\n                BackdropProps={{\n                    timeout: 500,\n                }}\n            >\n                <Fade in={this.props.open}>\n                    <Box display='flex' flexDirection='column' className={classes.container}>\n                        <Box flex={this.spacing.top} onClick={this.props.onClose} />\n                        <Box flex={this.spacing.middle}>\n                            <Box display='flex' flexDirection='row' className={classes.container}>\n                                <Box flex={this.spacing.left} onClick={this.props.onClose} />\n                                <Box flex={this.spacing.center}>\n                                    {this.props.children}\n                                </Box>\n                                <Box flex={this.spacing.right} onClick={this.props.onClose} />\n                            </Box>\n                        </Box>\n                        <Box flex={this.spacing.bottom} onClick={this.props.onClose} />\n                    </Box>\n                </Fade>\n            </Modal>\n        )\n    }\n});\n","import {\n    Box,\n    Button,\n    ButtonGroup,\n    Card,\n    createStyles,\n    Grid,\n    IconButton,\n    Theme,\n    Typography,\n    WithStyles,\n    withStyles\n} from \"@material-ui/core\"\nimport React, { Component } from \"react\"\nimport { Countdown, CountdownCollection } from \"../data/Countdown\";\nimport { TimeFormat } from \"../data/format/Time\";\nimport { CountdownService } from \"../services/Countdown\";\nimport { TwoText } from \"../widgets/TwoText\";\n\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport AddIcon from '@material-ui/icons/Add';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport StopIcon from '@material-ui/icons/Stop';\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\n\nimport { LabelSlider } from \"../widgets/LabelSlider\";\nimport { NotificationService } from \"../services/Notification\";\n\nimport { APP_TITLE, APP_TITLE_SHORT } from \"../App\";\nimport { ConfirmationModal } from \"./ConfirmationModal\";\nimport { FlexModal } from \"./FlexModal\";\n\nconst styles = (theme: Theme) => createStyles({\n    popperCardStyle: {\n        paddingLeft: theme.spacing(1),\n        backgroundColor: theme.palette.grey[50],\n        margin: 8,\n        height: '100%'\n    },\n\n    modalStyle: {\n        padding: 8,\n        height: '100%',\n    },\n\n    fillWidth: {\n        width: '100%',\n    },\n\n});\n\ninterface CountdownComponentProps extends WithStyles<typeof styles> { };\ninterface CountdownComponentState {\n    countdowns: CountdownCollection\n    editingOrder: boolean\n    completeModalOpen: boolean,\n    confirmDeleteOpen: boolean,\n    confirmDeleteIndex: number,\n    confirmDeleteName: string\n    running: boolean,\n    paused: boolean,\n    warningNotificationSent: boolean,\n};\n\nexport const CountdownComponent = withStyles(styles)(class CountdownInternal extends Component<CountdownComponentProps, CountdownComponentState> {\n    private notificationService: NotificationService\n\n    constructor(props: CountdownComponentProps\n    ) {\n        super(props)\n\n        this.state = {\n            countdowns: CountdownService.instance.countdowns,\n            editingOrder: false,\n            completeModalOpen: false,\n            confirmDeleteOpen: false,\n            confirmDeleteIndex: 0,\n            confirmDeleteName: '',\n            running: CountdownService.instance.countdowns.current?.running,\n            paused: false,\n            warningNotificationSent: false,\n        }\n\n        if (CountdownService.instance.countdowns.current?.running) {\n            CountdownService.instance.countdowns.runningCountdown?.update()\n        }\n\n        this.notificationService = NotificationService.instance\n\n        this.handleStartStopOnClick = this.handleStartStopOnClick.bind(this)\n        this.countdownSubscriber = this.countdownSubscriber.bind(this)\n    }\n\n    componentDidMount() {\n        CountdownService.instance.subscribe(\n            'CountdownComponent', () => { this.countdownSubscriber() }\n        )\n    }\n\n    componentWillUnmount() {\n        CountdownService.instance.unsubscribe('CountdownComponent')\n    }\n\n    handleStartStopOnClick() {\n        if (!this.state.running) {\n            this.start()\n        } else {\n            this.stop()\n        }\n    }\n\n    start() {\n        this.setState({ running: true })\n        CountdownService.instance.countdowns.current.runningCallback = (countdown: Countdown) => {\n            if (countdown.secondsLeft > 0) {\n                if (\n                    !this.state.warningNotificationSent\n                    && countdown.secondsLeft < 300\n                    && countdown.secondsLeft > 240\n                ) {\n                    this.setState({\n                        warningNotificationSent: true\n                    })\n\n                    this.notificationService.showNotification(\n                        APP_TITLE,\n                        {\n                            body: `Stopping soon: ${CountdownService.instance.countdowns.current.name}`\n                        }\n                    )\n                }\n            } else if (countdown.running) { // Only send a stopped notification if running is true, i.e., we stopped naturally\n                NotificationService.instance.showNotification(\n                    APP_TITLE,\n                    {\n                        body: `Complete: ${CountdownService.instance.countdowns.current.name}`\n                    }\n                )\n                this.setState({ completeModalOpen: true })\n            }\n        }\n\n        CountdownService.instance.countdowns.current.start()\n    }\n\n    stop() {\n        this.setState({ running: false })\n        CountdownService.instance.countdowns.current.stop()\n\n    }\n\n    countdownSubscriber() {\n        this.setState({ countdowns: CountdownService.instance.countdowns })\n\n        if (CountdownService.instance.countdowns.current.running) {\n            this.setState({ running: true })\n            window.document.title = `${APP_TITLE_SHORT} [${CountdownService.instance.countdowns.current.name} ${TimeFormat.seconds(CountdownService.instance.countdowns.current.secondsLeft)}]`\n        } else {\n            this.setState({\n                warningNotificationSent: false,\n                paused: false,\n                running: false\n            })\n            window.document.title = APP_TITLE_SHORT\n        }\n    }\n\n    renderSliders() {\n        const classes = this.props.classes\n        let elements: JSX.Element[] = []\n\n        for (let i in CountdownService.instance.countdowns.items) {\n            const index: number = parseInt(i)\n            const countdown = CountdownService.instance.countdowns.items[i]\n            const upDisabled = index === 0\n            const downDisabled = index === CountdownService.instance.countdowns.items.length - 1\n\n            if (this.state.editingOrder) {\n                elements.push(\n                    <Grid item key={countdown.name}>\n                        <Card className={classes.popperCardStyle}>\n                            <Box display='flex' flexDirection='row'>\n                                <Box flex='100%' display='flex' justifyContent='left' alignItems='center'>\n                                    <Typography variant='button'>\n                                        {countdown.name}\n                                    </Typography>\n                                </Box>\n                                <Box flex={1} display='flex' justifyContent='right' justifyItems='right'>\n                                    <IconButton\n                                        color='primary'\n                                        disabled={upDisabled}\n                                        onClick={() => {\n                                            CountdownService.instance.countdowns.swapItems(index, index - 1)\n                                        }}\n                                    >\n                                        <ArrowUpwardIcon />\n                                    </IconButton>\n                                    <IconButton\n                                        color='primary'\n                                        disabled={downDisabled}\n                                        onClick={() => {\n                                            CountdownService.instance.countdowns.swapItems(index, index + 1)\n                                        }}\n                                    >\n                                        <ArrowDownwardIcon />\n                                    </IconButton>\n                                    <IconButton\n                                        color='secondary'\n                                        onClick={() => {\n                                            this.setState({\n                                                confirmDeleteOpen: true,\n                                                confirmDeleteIndex: index,\n                                                confirmDeleteName: countdown.name\n                                            })\n                                        }}\n                                    >\n                                        <DeleteOutlineIcon />\n                                    </IconButton>\n                                </Box>\n                            </Box>\n                        </Card>\n                    </Grid>\n                )\n            } else {\n                elements.push(\n                    <Grid item key={countdown.name}>\n                        <LabelSlider\n                            label={countdown.name}\n                            labelSuffix=\"m\"\n                            value={countdown.value}\n                            step={1}\n                            min={countdown.min}\n                            max={countdown.max}\n                            onChange={(value: number) => {\n                                countdown.value = value\n                            }}\n                            onEditSave={(name: string, min: number, max: number) => {\n                                countdown.name = name\n                                countdown.min = min\n                                countdown.max = max\n                            }}\n                            formatCallback={(value: number) => TimeFormat.minutes(value)}\n                        />\n                    </Grid>\n                )\n            }\n        }\n\n        return elements\n    }\n\n    render() {\n        const classes = this.props.classes\n\n        return <Grid container>\n            <ConfirmationModal\n                open={this.state.confirmDeleteOpen}\n                onClose={() => {\n                    this.setState({\n                        confirmDeleteOpen: false\n                    })\n                }}\n                onConfirm={() => {\n                    CountdownService.instance.countdowns.deleteItem(this.state.confirmDeleteIndex)\n                    this.setState({\n                        confirmDeleteOpen: false\n                    })\n                }}\n                subtitle='Deleting this cannot be undone'\n            />\n            <FlexModal\n                open={this.state.completeModalOpen}\n                onClose={() => { this.setState({ completeModalOpen: false }) }}\n                spacing={{\n                    middle: 1,\n                    center: 10\n                }}\n            >\n                <Card style={{ height: '100%', padding: 8 }}>\n                    <Box display='flex' flexDirection='column' style={{ height: '100%' }}>\n                        <Box display='flex' flex={2} justifyContent='center' alignItems='center'>\n                            <Typography variant='h4'>{CountdownService.instance.countdowns.previous.name} complete!</Typography>\n                        </Box>\n                        <Box display='flex' flex={1} justifyContent='center'>\n                            <Button\n                                variant='contained'\n                                color='primary'\n                                style={{ width: '100%' }}\n                                onClick={() => {\n                                    this.start()\n                                    this.setState({\n                                        completeModalOpen: false,\n                                    })\n                                }}\n                            >\n                                <Typography variant='h5'>\n                                    Start {CountdownService.instance.countdowns.current.name}\n                                </Typography>\n                            </Button>\n                        </Box>\n                    </Box>\n                </Card>\n            </FlexModal>\n            <Grid item xs={12}>\n                <Box display='flex' flexDirection=\"row\">\n                    <Box flex='100%'>\n                        <Typography variant=\"h3\"> Timers </Typography>\n                    </Box>\n                    <Box flex={1}>\n                        <IconButton\n                            disabled={this.state.editingOrder}\n                            onClick={() => {\n                                CountdownService.instance.countdowns.addItem({ name: `NEW ${CountdownService.instance.countdowns.items.length}` })\n                            }}\n                        >\n                            <AddIcon color={this.state.editingOrder ? 'disabled' : 'primary'} />\n                        </IconButton>\n                    </Box>\n                    <Box flex={1}>\n                        <IconButton\n                            onClick={() => {\n                                this.setState({\n                                    editingOrder: !this.state.editingOrder\n                                })\n                            }}\n                        >\n                            <SettingsIcon color={this.state.editingOrder ? 'primary' : 'action'} />\n                        </IconButton>\n                    </Box>\n                </Box>\n            </Grid>\n            <Grid item xs={12}>\n                {this.renderSliders()}\n            </Grid>\n            <Grid item xs={12} sm={3}>\n                <ButtonGroup\n                    className={classes.fillWidth}\n                    variant=\"contained\"\n                    color={\n                        this.state.running\n                            ? this.state.paused ? 'default' : 'secondary'\n                            : 'primary'\n                    }\n                >\n                    <Button className={classes.fillWidth} onClick={this.handleStartStopOnClick}>\n                        {this.state.running ? <StopIcon /> : <PlayArrowIcon />}\n                    </Button>\n                    <Button className={classes.fillWidth} disabled={!this.state.running} onClick={() => {\n                        if (this.state.running) {\n                            CountdownService.instance.countdowns.current.pause()\n                            this.setState({\n                                paused: !this.state.paused\n                            })\n                        }\n                    }}>\n                        {this.state.paused ? <PlayCircleOutlineIcon /> : <PauseIcon />}\n                    </Button>\n                </ButtonGroup>\n            </Grid>\n            <Grid item xs={4} sm={3}>\n                <TwoText\n                    caption={this.state.running ? this.state.paused ? 'Paused' : \"Running\" : \"On deck\"}\n                    text={CountdownService.instance.countdowns.current?.name || 'NONE'}\n                />\n            </Grid>\n            <Grid item xs={4} sm={3}>\n                <TwoText\n                    caption=\"Time left\"\n                    text={TimeFormat.seconds(CountdownService.instance.countdowns.current?.secondsLeft)}\n                />\n            </Grid>\n            <Grid item xs={4} sm={3}>\n                <TwoText caption=\"Up next\" text={CountdownService.instance.countdowns.next?.name || 'NONE'} />\n            </Grid>\n        </Grid>\n    }\n});\n","import React, { Component } from 'react';\n\nimport {\n    AppBar,\n    Button,\n    Card,\n    createStyles,\n    Grid,\n    IconButton,\n    Paper,\n    Theme,\n    Toolbar,\n    Typography,\n    WithStyles, withStyles\n} from '@material-ui/core';\n\nimport { Sidebar } from './components/Sidebar';\n\nimport { NotificationService } from './services/Notification'\n\nimport MenuIcon from '@material-ui/icons/Menu';\n\nimport 'date-fns';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardTimePicker,\n} from '@material-ui/pickers';\nimport { HistoryList } from './components/History';\nimport { CountdownComponent } from './components/Countdown';\nimport { FlexModal } from './components/FlexModal';\n\nconst styles = (theme: Theme) => createStyles({\n    root: {\n        flexGrow: 1,\n        overflow: 'hidden'\n    },\n\n    fillWidth: {\n        width: '100%',\n    },\n\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n\n    title: {\n        flexGrow: 1,\n    },\n\n    gridContainer: {\n        flexGrow: 1,\n        padding: 8,\n    },\n\n    paperContainer: {\n        padding: 8\n    },\n\n    sliderBox: {\n        paddingTop: 16\n    },\n\n    popperCardStyle: {\n        paddingLeft: theme.spacing(1),\n        backgroundColor: theme.palette.grey[50],\n        margin: 8,\n        height: '100%'\n    },\n\n    popperContentsStyle: {\n        marginRight: 8\n    },\n\n    modal: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        padding: 8,\n        border: 'none',\n        width: '100%',\n        height: '100%'\n    },\n\n    statusStyle: {\n        marginTop: -0.5,\n        marginBottom: -1\n    }\n});\n\ninterface AppProps extends WithStyles<typeof styles> { }\n\ninterface AppState {\n    workLength: number,\n    breakLength: number,\n    running: boolean,\n    paused: boolean,\n    secondsLeft: number,\n    sidebarOpen: boolean,\n    notificationSupport: boolean,\n    endTime?: number,\n    editingOrder: boolean,\n    confirmDeleteOpen: boolean\n    confirmDeleteIndex: number\n    confirmDeleteName: string\n    confirmResetOpen: boolean\n    warningNotificationSent: boolean\n    selectedDate: Date,\n    whatsNewModalOpen: boolean,\n}\n\nexport const APP_TITLE: string = 'Task Timer'\nexport const APP_TITLE_SHORT: string = 'TT'\n\nconst notificationService: NotificationService = NotificationService.instance\n\nconst App = withStyles(styles)(class AppComponent extends Component<AppProps, AppState> {\n    public sliderRefs: any[] = []\n\n    constructor(props: AppProps) {\n        super(props)\n\n        let secondsLeft = 0\n        let running = false\n        let paused = false\n\n        const selectedDate = localStorage.getItem('selectedDate')\n        const lastVersion = localStorage.getItem('version')\n\n        this.state = {\n            workLength: 50,\n            breakLength: 10,\n            running: running,\n            paused: paused,\n            secondsLeft: secondsLeft,\n            sidebarOpen: false,\n            notificationSupport: \"Notification\" in window,\n            editingOrder: false,\n            confirmDeleteOpen: false,\n            confirmDeleteIndex: 0,\n            confirmDeleteName: '',\n            confirmResetOpen: false,\n            warningNotificationSent: false,\n            selectedDate: selectedDate ? new Date(JSON.parse(selectedDate)) : new Date(0, 0, 0, 12, 0, 10),\n            whatsNewModalOpen: lastVersion !== process.env.REACT_APP_VERSION\n        }\n\n        this.checkSchedule = this.checkSchedule.bind(this)\n    }\n\n    componentDidMount() {\n        notificationService.requestDesktopNotificationPermissions()\n\n        if (process.env.REACT_APP_VERSION) {\n            localStorage.setItem('version', process.env.REACT_APP_VERSION)\n        }\n\n        this.checkSchedule()\n    }\n\n    checkSchedule() {\n        const now = new Date()\n        if (\n            now.getHours() === this.state.selectedDate.getHours()\n            && now.getMinutes() === this.state.selectedDate.getMinutes()\n        ) {\n            notificationService.showNotification(APP_TITLE, {\n                body: \"It's lunchtime!\"\n            })\n        }\n\n        setTimeout(() => this.checkSchedule(), 1000 * 50)\n    }\n\n    render() {\n        const classes = this.props.classes\n        return (\n            <div className={classes.root}>\n                <FlexModal\n                    open={this.state.whatsNewModalOpen}\n                    onClose={() => { console.log('App.tsx onClose()'); this.setState({ whatsNewModalOpen: false }) }}\n                    spacing={{\n                        top: { xs: 1, md: 2 },\n                        middle: { xs: 1, md: 1 },\n                        center: { xs: 5, md: 1 },\n                        bottom: { xs: 1, md: 2 },\n                    }}\n                >\n                    <Card className={classes.modal}>\n                        <Grid container direction='column' alignItems='center' alignContent='center'>\n                            <Grid item xs>\n                                <Typography variant='h4'>Version {process.env.REACT_APP_VERSION}</Typography>\n                            </Grid>\n                            <Grid item xs>\n                                <Typography variant='body1'>\n                                    Task Timer has been updated since the last time you were here. Click below to\n                                    see what's new!\n                                                    </Typography> <br />\n                            </Grid>\n                            <Grid item xs>\n                                <Button\n                                    variant='contained'\n                                    href='/WHATS_NEW.html'\n                                    target='_blank'\n                                    onClick={() => { this.setState({ whatsNewModalOpen: false }) }}\n                                >\n                                    See what's new!\n                                            </Button>\n                            </Grid>\n                        </Grid>\n                    </Card>\n                </FlexModal>\n                <AppBar position=\"static\">\n                    <Toolbar>\n                        <IconButton\n                            edge=\"start\"\n                            className={classes.menuButton}\n                            color=\"inherit\" aria-label=\"menu\"\n                            onClick={() => {\n                                this.setState({ sidebarOpen: true })\n                            }}\n                        >\n                            <MenuIcon />\n                        </IconButton>\n                        <Typography variant=\"h6\" className={classes.title}>\n                            {APP_TITLE}\n                        </Typography>\n                    </Toolbar>\n                </AppBar>\n                <Sidebar\n                    open={this.state.sidebarOpen}\n                    onClose={() => {\n                        this.setState({ sidebarOpen: false })\n                    }}\n                />\n\n                <Grid container className={classes.gridContainer} spacing={2}>\n                    <Grid item xs={12} md={8}>\n                        <Paper className={classes.paperContainer}>\n                            <CountdownComponent />\n                        </Paper>\n                    </Grid>\n                    <Grid item xs={12} md={4}>\n                        <Paper className={classes.paperContainer}>\n                            <Grid container>\n                                <Grid item xs={12}>\n                                    <Typography variant=\"h3\">Schedule</Typography>\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                                        <KeyboardTimePicker\n                                            id=\"lunch-time-picker\"\n                                            label=\"Lunch\"\n                                            value={this.state.selectedDate}\n                                            onChange={(date: any) => {\n                                                this.setState({\n                                                    selectedDate: date\n                                                })\n                                                localStorage.setItem('selectedDate', JSON.stringify(date))\n                                            }}\n                                            minutesStep={5}\n                                        />\n                                    </MuiPickersUtilsProvider>\n                                </Grid>\n                            </Grid>\n                        </Paper>\n                    </Grid>\n                    <Grid item xs={12} md={8}>\n                        <Paper className={classes.paperContainer}>\n                            <Grid container>\n                                <Grid item xs={12}>\n                                    <Typography variant=\"h3\">History</Typography>\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <HistoryList />\n                                </Grid>\n                            </Grid>\n                        </Paper>\n                    </Grid>\n                </Grid>\n            </div >\n        );\n    }\n});\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}