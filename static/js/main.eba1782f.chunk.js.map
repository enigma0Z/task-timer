{"version":3,"sources":["components/LabelSlider.tsx","data/Subscribable.ts","services/notification/index.ts","components/Sidebar.tsx","data/Countdown.ts","data/format/Time.ts","App.tsx","index.tsx"],"names":["LabelSlider","withStyles","theme","createStyles","fullWidth","width","centeringGrid","display","listItemText","sliderSpacing","justifyContent","verticalAlign","sliderLabelContainer","marginBottom","sliderLabel","paddingRight","editPopover","padding","editContainer","props","popoverRef","state","value","label","editLabel","min","editMin","max","editMax","step","menuOpen","editing","labelError","minError","maxError","React","createRef","handleOnChange","bind","handleKeyPress","openPopover","closePopover","saveForm","cancelEdit","handleEscapeKeypress","document","removeEventListener","this","event","keyCode","newValue","setState","onChange","key","addEventListener","onEditSave","classes","Box","flexDirection","flex","alignItems","className","Typography","variant","formatCallback","m","Slider","getAriaValueText","valueLabelDisplay","aria-labelledby","IconButton","onClick","Popover","open","anchorEl","current","Grid","container","item","xs","TextField","error","margin","size","target","onKeyPress","parseInt","isNaN","ref","renderNormalView","renderEditPopover","Component","Subscribable","subscribers","Map","id","callback","set","delete","forEach","map","console","log","NotificationService","_desktopNotificationSupport","window","_instance","desktopNotificationSupport","Notification","permission","requestPermission","then","updateSubscribers","title","options","onclick","notification","close","focus","notificationService","instance","Sidebar","sideBar","notificationsEnabled","desktopNotificationEnabled","refreshNotificationState","subscribe","constructor","name","unsubscribe","Drawer","anchor","onOpen","onClose","List","ListItem","button","requestDesktopNotificationPermissions","ListItemIcon","ListItemText","primary","ListItemSecondaryAction","Switch","edge","checked","inputProps","onFocus","onBlur","disabled","Countdown","_name","_min","_max","_value","_intervalMs","timeout","startTime","undefined","_endTime","_running","_secondsLeft","jsonObject","endTime","running","secondsLeft","intervalMs","Date","now","update","Math","floor","setTimeout","clearTimeout","TimeFormat","timerSeconds","hours","minutes","seconds","returnStr","push","join","timerMinutes","APP_TITLE","DEFAULT_COUNTDOWNS","App","root","flexGrow","fillWidth","menuButton","marginRight","spacing","gridContainer","paperContainer","sliderBox","paddingTop","workLength","breakLength","sidebarOpen","notificationSupport","countdowns","currentCountdownIndex","handleStartStopOnClick","updateCountdownState","updateSubscriber","saveCountdownsToLocalStorage","nextCountdownIndex","countdown","localStorage","setItem","JSON","stringify","exportToJsonObject","currentCountdown","showNotification","body","start","stop","toString","stopTimer","startTimer","labelSuffix","thisCountdown","getItem","countdownsStr","parse","countdownJsonObject","loadFromJsonObject","runningCountdown","filter","AppBar","position","Toolbar","color","aria-label","lg","Paper","direction","renderSliders","getNextCountdown","length","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.eba1782f.chunk.js","sourcesContent":["import React, { ChangeEvent, Component, KeyboardEvent, RefObject } from \"react\";\n\nimport {\n    Box,\n    IconButton,\n    Menu,\n    MenuItem,\n    Slider,\n    Theme,\n    Typography,\n    WithStyles, withStyles, createStyles, TextField, Card, Grid, Popover\n} from \"@material-ui/core\";\n\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport CheckIcon from '@material-ui/icons/Check';\n\nconst styles = (theme: Theme) => createStyles({\n    fullWidth: {\n        width: '100%'\n    },\n\n    centeringGrid: {\n        display: 'flex'\n    },\n\n    listItemText: {\n        display: 'block'\n    },\n\n    sliderSpacing: {\n        width: '100%',\n        justifyContent: 'center',\n        verticalAlign: 'middle'\n    },\n\n    sliderLabelContainer: {\n        marginBottom: -16\n    },\n\n    sliderLabel: {\n        paddingRight: 10\n    },\n\n    editPopover: {\n        padding: 8\n    },\n\n    editContainer: {\n        paddingRight: 8,\n    }\n})\n\ninterface LabelSliderProps extends WithStyles<typeof styles> {\n    label: string,\n    labelSuffix: string,\n    value: number,\n    step: number,\n    min: number,\n    max: number,\n    onChange: Function,\n    onEditSave: (name: string, min: number, max: number) => void,\n    formatCallback: Function\n}\n\ninterface LabelSliderState {\n    value: number\n    label: string,\n    editLabel: string,\n    min: number,\n    editMin: number,\n    max: number,\n    editMax: number,\n    step: number,\n    menuOpen: boolean\n    editing: boolean\n    anchor?: HTMLElement\n    labelError: boolean,\n    minError: boolean,\n    maxError: boolean,\n}\n\nexport const LabelSlider = withStyles(styles)(class LabelSliderComponent extends Component<LabelSliderProps, LabelSliderState> {\n    private popoverRef: RefObject<any>\n\n    constructor(props: LabelSliderProps) {\n        super(props)\n        this.state = {\n            value: this.props.value,\n            label: this.props.label,\n            editLabel: this.props.label,\n            min: this.props.min,\n            editMin: this.props.min,\n            max: this.props.max,\n            editMax: this.props.max,\n            step: this.props.step,\n            menuOpen: false,\n            editing: false,\n            labelError: false,\n            minError: false,\n            maxError: false\n        }\n\n        this.popoverRef = React.createRef()\n\n        this.handleOnChange = this.handleOnChange.bind(this)\n        this.handleKeyPress = this.handleKeyPress.bind(this)\n        this.openPopover = this.openPopover.bind(this)\n        this.closePopover = this.closePopover.bind(this)\n        this.saveForm = this.saveForm.bind(this)\n        this.cancelEdit = this.cancelEdit.bind(this)\n        this.handleEscapeKeypress = this.handleEscapeKeypress.bind(this)\n    }\n\n    componentDidMount() {\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener(\"keydown\", this.handleEscapeKeypress, false);\n    }\n\n    handleEscapeKeypress(event: any) {\n        if (event.keyCode === 27) {\n            this.cancelEdit()\n        }\n    }\n\n    handleOnChange(event: any, newValue: number | number[]) {\n        if (typeof newValue === 'number') {\n            this.setState({\n                value: newValue\n            })\n        } else if (typeof newValue === 'object') {\n            this.setState({\n                value: newValue[0]\n            })\n        }\n\n        this.props.onChange(this.state.value)\n    }\n\n    handleKeyPress(event: KeyboardEvent) {\n        if (event.key === 'Enter') {\n            this.saveForm()\n        }\n    }\n\n    openPopover() {\n        this.setState({\n            editing: true,\n            editLabel: this.state.label,\n            editMin: this.state.min,\n            editMax: this.state.max\n        })\n\n        document.addEventListener(\"keydown\", this.handleEscapeKeypress, false);\n    }\n\n    closePopover() {\n        this.setState({\n            editing: false\n        })\n\n        document.removeEventListener(\"keydown\", this.handleEscapeKeypress, false);\n    }\n\n    saveForm() {\n        let value: number\n        if (this.state.value > this.state.max) {\n            value = this.state.max\n        } else if (this.state.value < this.state.min) {\n            value = this.state.min\n        } else (\n            value = this.state.value\n        )\n\n        this.props.onEditSave(this.state.editLabel, this.state.editMin, this.state.editMax)\n        this.setState({\n            value: value,\n            label: this.state.editLabel,\n            min: this.state.editMin,\n            max: this.state.editMax\n        })\n\n        this.closePopover()\n    }\n\n    cancelEdit() {\n        this.closePopover()\n    }\n\n    renderNormalView() {\n        const { classes } = this.props\n        return (\n            <>\n                <Box display='flex' flexDirection='row' flex='100%' alignItems='baseline' className={classes.sliderLabelContainer}>\n                    <Typography variant=\"subtitle1\" className={classes.sliderLabel}>{this.state.label}</Typography>\n                    <Typography variant=\"caption\" className={classes.sliderLabel}>({this.props.formatCallback(this.state.value)})</Typography>\n                </Box>\n                <Box display='flex' flex={1} flexDirection='row'>\n                    <Box m={1} flex='100%' display='flex' justifyContent='flex-start' alignItems='center'>\n                        <Slider\n                            value={this.state.value}\n                            step={this.state.step}\n                            min={this.state.min}\n                            max={this.state.max}\n                            onChange={this.handleOnChange}\n                            getAriaValueText={(value: number) => { return `${value}m` }}\n                            valueLabelDisplay=\"off\"\n                            aria-labelledby=\"break-length\"\n                        />\n                    </Box>\n                    <Box flex={1} display='flex' justifyContent='flex-end' alignItems='center'>\n                        <IconButton onClick={(event) => {\n                            this.openPopover()\n                        }}>\n                            <SettingsIcon />\n                        </IconButton>\n                    </Box>\n                </Box>\n            </>\n        )\n    }\n\n    renderEditPopover() {\n        const classes = this.props.classes\n        return (\n            <Popover open={this.state.editing} anchorEl={this.popoverRef.current}>\n                <Box display='flex' flex={1} flexDirection='row' className={classes.editPopover}>\n                    <Grid container>\n                        <Grid item xs={6} className={classes.editContainer}>\n                            <TextField\n                                fullWidth\n                                label=\"Name\"\n                                error={this.state.labelError}\n                                value={this.state.editLabel}\n                                margin='dense'\n                                size='small'\n                                variant=\"standard\"\n                                onChange={(event: ChangeEvent<HTMLTextAreaElement>) => {\n                                    this.setState({\n                                        editLabel: event.target.value,\n                                        labelError: (\n                                            event.target.value === ''\n                                        )\n                                    })\n                                }}\n                                onKeyPress={this.handleKeyPress}\n                            />\n                        </Grid>\n                        <Grid item xs={3} className={classes.editContainer}>\n                            <TextField\n                                label=\"Min\"\n                                error={this.state.minError}\n                                value={this.state.editMin}\n                                size='small'\n                                variant=\"outlined\"\n                                margin='dense'\n                                onChange={(event: ChangeEvent<HTMLTextAreaElement>) => {\n                                    const value = parseInt(event.target.value)\n                                    this.setState({\n                                        editMin: value || 0,\n                                        minError: (\n                                            isNaN(value) || value < 1\n                                        )\n                                    })\n                                }}\n                                onKeyPress={this.handleKeyPress}\n                            />\n                        </Grid>\n                        <Grid item xs={3} className={classes.editContainer}>\n                            <TextField\n                                label=\"Max\"\n                                error={this.state.maxError}\n                                value={this.state.editMax}\n                                size='small'\n                                variant=\"outlined\"\n                                margin='dense'\n                                onChange={(event: ChangeEvent<HTMLTextAreaElement>) => {\n                                    const value = parseInt(event.target.value)\n                                    this.setState({\n                                        editMax: value || 0,\n                                        maxError: (\n                                            isNaN(value) || value < 1 || value < this.state.min\n                                        )\n                                    })\n                                }}\n                                onKeyPress={this.handleKeyPress}\n                            />\n                        </Grid>\n                    </Grid>\n                    <Box flex={1} display='flex' justifyContent='flex-end' alignItems='center'>\n                        <IconButton onClick={this.saveForm}>\n                            <CheckIcon />\n                        </IconButton>\n                        <IconButton onClick={(event) => {\n                            this.cancelEdit()\n                        }}>\n                            <CancelIcon />\n                        </IconButton>\n                    </Box>\n                </Box>\n            </Popover>\n        )\n    }\n\n    render() {\n        return (\n            <div ref={this.popoverRef}> {/* So the popover can have its origin on the row */}\n                <Box display='flex' flexDirection='column'>\n                    {this.renderNormalView()}\n                    {this.renderEditPopover()}\n                </Box>\n            </div>\n        )\n    }\n});\n","export abstract class Subscribable {\n    private subscribers: Map<String, (() => void)> = new Map()\n\n    public subscribe(id: string, callback: () => void) {\n        this.subscribers.set(id, callback)\n    }\n\n    public unsubscribe(id: string) {\n        this.subscribers.delete(id)\n    }\n\n    protected updateSubscribers() {\n        this.subscribers.forEach((value, key, map) => {\n            console.log(`updating subscriber ${key}`)\n            value()\n        })\n    }\n}\n","import { Component } from 'react';\nimport { Subscribable } from '../../data/Subscribable'\n\nexport class NotificationService extends Subscribable {\n    private static _instance: NotificationService;\n    private _desktopNotificationSupport: boolean = false\n\n    public static get instance(): NotificationService {\n        return this._instance || (this._instance = new this())\n    }\n\n    private constructor() {\n        super()\n        this._desktopNotificationSupport = 'Notification' in window\n    }\n\n    public get desktopNotificationSupport(): boolean {\n        return this._desktopNotificationSupport\n    }\n\n    public get desktopNotificationEnabled() {\n        return this.desktopNotificationSupport && Notification.permission === 'granted'\n    }\n\n    public requestDesktopNotificationPermissions() {\n        if (this.desktopNotificationSupport && Notification.permission === 'default') {\n            Notification.requestPermission()\n                .then((value) => {this.updateSubscribers()})\n        }\n    }\n\n    public showNotification(\n        title: string,\n        options: NotificationOptions,\n        onclick: (notification: Notification, event: Event) => void = (\n            notification: Notification, event: Event\n        ) => {\n            notification.close(); window.focus()\n        }\n    ) {\n        let notification = new Notification(\n            title, options\n        )\n\n        notification.onclick = (event: Event) => (onclick(notification, event))\n    }\n}\n","import React, { Component } from 'react';\n\nimport {\n    createStyles,\n    Drawer,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    ListItemText,\n    Switch,\n    Theme,\n    WithStyles, withStyles\n} from '@material-ui/core';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport { NotificationService } from '../services/notification';\n\nconst styles = (theme: Theme) => createStyles({\n    sideBar: {\n        width: 250\n    }\n})\n\nconst notificationService: NotificationService = NotificationService.instance\n\ninterface SidebarProps extends WithStyles<typeof styles> {\n    onOpen: Function,\n    onClose: Function\n}\n\ninterface SidebarState {\n    open: boolean,\n    notificationsEnabled: boolean\n}\n\nexport const Sidebar = withStyles(styles)(class SidebarComponent extends Component<SidebarProps, SidebarState> {\n    constructor(props: SidebarProps) {\n        super(props)\n        this.state = {\n            open: false,\n            notificationsEnabled: notificationService.desktopNotificationEnabled\n        }\n\n        // this.refreshNotificationState = this.refreshNotificationState.bind(this)\n    }\n\n    refreshNotificationState() {\n        if (this.state.notificationsEnabled !== notificationService.desktopNotificationEnabled) {\n            this.setState({\n                notificationsEnabled: notificationService.desktopNotificationEnabled\n            })\n        }\n    }\n\n    componentDidUpdate() {\n        this.refreshNotificationState()\n    }\n\n    componentDidMount() {\n        notificationService.subscribe(this.constructor.name, () => {\n            this.refreshNotificationState()\n        })\n    }\n\n    componentWillUnmount() {\n        notificationService.unsubscribe(this.constructor.name)\n    }\n\n    render() {\n        const classes = this.props.classes\n        return (\n            <Drawer\n                anchor='left'\n                open={this.props.onOpen()}\n                onClose={() => this.props.onClose()}\n            >\n                <div className={classes.sideBar} >\n                    <List>\n                        <ListItem\n                            button\n                            onClick={() => { notificationService.requestDesktopNotificationPermissions() }}\n                        >\n                            <ListItemIcon><NotificationsIcon /></ListItemIcon>\n                            <ListItemText primary=\"Notifications\" />\n                            <ListItemSecondaryAction>\n                                <Switch\n                                    edge=\"end\"\n                                    onClick={() => { notificationService.requestDesktopNotificationPermissions() }}\n                                    checked={this.state.notificationsEnabled}\n                                    inputProps={{ 'aria-labelledby': 'switch-list-label-bluetooth' }}\n                                    onFocus={() => this.refreshNotificationState()}\n                                    onBlur={() => this.refreshNotificationState()}\n                                    disabled={!notificationService.desktopNotificationSupport}\n                                />\n                            </ListItemSecondaryAction>\n                        </ListItem>\n                    </List>\n                </div>\n            </Drawer>\n        )\n    }\n\n});\n","import { Subscribable } from \"./Subscribable\";\n\nconst DEFAULT_VALUE = 0\nconst DEFAULT_MIN = 1\nconst DEFAULT_MAX = 90\nconst DEFAULT_INTERVAL_MS = 1000\n\nexport interface CountdownJsonObject {\n    startTime?: any,\n    endTime?: any,\n    running: any,\n    secondsLeft: any,\n    name: string,\n    min: number,\n    max: number,\n    value: number,\n    intervalMs: number,\n}\n\nexport class Countdown extends Subscribable {\n    private timeout: any\n\n    private startTime?: number = undefined;\n    private _endTime?: number = undefined;\n\n    private _running: boolean = false\n    private _secondsLeft: number = 0;\n\n    public constructor(\n        private _name: string = 'NO_NAME',\n        private _min: number = 1,\n        private _max: number = 90,\n        private _value: number = 0,\n        private _intervalMs: number = 1000,\n    ) {\n        super()\n\n    }\n\n    public loadFromJsonObject(jsonObject: CountdownJsonObject): Countdown {\n        this.startTime = jsonObject.startTime\n        this._endTime = jsonObject.endTime\n        this._running = jsonObject.running\n        this._secondsLeft = jsonObject.secondsLeft\n        this._name = jsonObject.name\n        this._min = jsonObject.min\n        this._max = jsonObject.max\n        this._value = jsonObject.value\n        this._intervalMs = jsonObject.intervalMs\n\n        return this\n    }\n\n    public exportToJsonObject(): CountdownJsonObject {\n        return {\n            startTime: this.startTime,\n            endTime: this.endTime,\n            running: this.running,\n            secondsLeft: this.secondsLeft,\n            name: this.name,\n            min: this.min,\n            max: this.max,\n            value: this.value,\n            intervalMs: this.intervalMs,\n        }\n    }\n\n    public get name(): string { return this._name }\n    public set name(name: string) { this._name = name }\n\n    public get secondsLeft(): number { return this._secondsLeft }\n\n    public get running(): boolean { return this._running }\n\n    public get value(): number { return this._value ? this._value : DEFAULT_VALUE }\n    public set value(value: number) { this._value = value }\n\n    public get min(): number { return this._min ? this._min : DEFAULT_MIN }\n    public set min(min: number) { this._min = min }\n\n    public get max(): number { return this._max ? this._max : DEFAULT_MAX }\n    public set max(max: number) { this._max = max }\n\n    public get intervalMs(): number { return this._intervalMs ? this._intervalMs : DEFAULT_INTERVAL_MS }\n\n    public get endTime(): number | undefined { return this._endTime }\n\n    start() {\n        this._running = true\n        this.startTime = Date.now()\n        this._endTime = this.startTime + (this.value * 60 * 1000)\n\n        this.update()\n    }\n\n    stop() {\n        this._running = false\n        this.update()\n    }\n\n    update() {\n        if (this.endTime !== undefined) {\n            this._secondsLeft = Math.floor((this.endTime - Date.now()) / 1000)\n            if (this._running && this.secondsLeft > 0) {\n                this.timeout = setTimeout(() => this.update(), this.intervalMs)\n            } else {\n                this._running = false\n                this._secondsLeft = 0\n                clearTimeout(this.timeout)\n            }\n        }\n\n        this.updateSubscribers()\n    }\n}\n","\nexport class TimeFormat {\n    static seconds(timerSeconds: number): string {\n        let hours = Math.floor(timerSeconds / 60 / 60)\n        let minutes = Math.floor((timerSeconds - (hours * 60 * 60)) / 60)\n        let seconds = Math.floor(timerSeconds - (hours * 60 * 60) - (minutes * 60))\n\n        let returnStr: string[] = []\n\n        if (hours > 0) {\n            returnStr.push(`${hours}h`)\n        }\n\n        if (minutes > 0) {\n            returnStr.push(`${minutes}m`)\n        }\n\n        returnStr.push(`${seconds}s`)\n\n        return returnStr.join(' ')\n    }\n\n    static minutes(timerMinutes: number): string {\n        let hours = Math.floor(timerMinutes / 60)\n        let minutes = timerMinutes - (hours * 60)\n\n        let returnStr: string[] = []\n\n        if (hours > 0) {\n            returnStr.push(`${hours}h`)\n        }\n\n        returnStr.push(`${minutes}m`)\n\n        return returnStr.join(' ')\n    }\n}\n","import React, { Component } from 'react';\n\nimport {\n    AppBar,\n    createStyles,\n    Grid,\n    IconButton,\n    Paper,\n    Theme,\n    Toolbar,\n    Typography,\n    WithStyles, withStyles\n} from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Button from '@material-ui/core/Button/Button';\n\nimport './App.css';\nimport { LabelSlider } from './components/LabelSlider';\nimport { Sidebar } from './components/Sidebar';\nimport { Countdown, CountdownJsonObject } from './data/Countdown'\nimport { TimeFormat } from './data/format/Time'\n\nimport { NotificationService } from './services/notification'\n\nconst styles = (theme: Theme) => createStyles({\n    root: {\n        flexGrow: 1,\n    },\n\n    fillWidth: {\n        width: '100%',\n    },\n\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n\n    title: {\n        flexGrow: 1,\n    },\n\n    gridContainer: {\n        flexGrow: 1,\n        padding: 8,\n    },\n\n    paperContainer: {\n        padding: 8\n    },\n\n    sliderBox: {\n        paddingTop: 16\n    },\n\n});\n\ninterface AppProps extends WithStyles<typeof styles> { }\n\ninterface AppState {\n    workLength: number,\n    breakLength: number,\n    running: boolean,\n    secondsLeft: number,\n    currentCountdownIndex: number,\n    countdowns: Countdown[],\n    sidebarOpen: boolean,\n    notificationSupport: boolean,\n    endTime?: number,\n}\n\nconst APP_TITLE: string = 'Task Timer'\nconst DEFAULT_COUNTDOWNS: Countdown[] = [\n    new Countdown('Work', 1, 90, 50),\n    new Countdown('Break time', 1, 15, 10),\n]\n\nconst notificationService: NotificationService = NotificationService.instance\n\nconst App = withStyles(styles)(class AppComponent extends Component<AppProps, AppState> {\n    constructor(props: AppProps) {\n        super(props)\n\n        this.state = {\n            workLength: 50,\n            breakLength: 10,\n            running: false,\n            secondsLeft: 0,\n            sidebarOpen: false,\n            notificationSupport: \"Notification\" in window,\n            countdowns: DEFAULT_COUNTDOWNS,\n            currentCountdownIndex: 0\n        }\n\n        this.handleStartStopOnClick = this.handleStartStopOnClick.bind(this)\n        this.updateCountdownState = this.updateCountdownState.bind(this)\n        this.updateSubscriber = this.updateSubscriber.bind(this)\n        this.saveCountdownsToLocalStorage = this.saveCountdownsToLocalStorage.bind(this)\n    }\n\n    get currentCountdown(): Countdown {\n        return this.state.countdowns[this.state.currentCountdownIndex]\n    }\n\n    get nextCountdownIndex(): number {\n        return (this.state.currentCountdownIndex + 1) % this.state.countdowns.length\n    }\n\n    getNextCountdown(): Countdown {\n        return this.state.countdowns[this.nextCountdownIndex]\n    }\n\n    updateCountdownState(countdown: Countdown) {\n        this.setState({\n            secondsLeft: countdown.secondsLeft,\n            running: countdown.running\n        })\n\n        this.saveCountdownsToLocalStorage()\n    }\n\n    saveCountdownsToLocalStorage() {\n        localStorage.setItem(\n            'countdowns',\n            JSON.stringify(\n                this.state.countdowns.map((countdown) => countdown.exportToJsonObject())\n            )\n        )\n    }\n\n    updateSubscriber() {\n        this.updateCountdownState(this.currentCountdown)\n\n        if (!this.currentCountdown.running) {\n            notificationService.showNotification(\n                APP_TITLE,\n                {\n                    body: `${this.currentCountdown.name} done`\n                }\n            )\n            this.currentCountdown.unsubscribe(this.constructor.name)\n        }\n    }\n\n    startTimer() {\n        this.currentCountdown.subscribe(this.constructor.name, this.updateSubscriber)\n        this.currentCountdown.start()\n    }\n\n    stopTimer() {\n        this.currentCountdown.unsubscribe(this.constructor.name)\n        this.currentCountdown.stop()\n        this.updateCountdownState(this.currentCountdown)\n\n        this.setState({\n            currentCountdownIndex: this.nextCountdownIndex\n        })\n\n        localStorage.setItem('currentCountdownIndex', this.nextCountdownIndex.toString())\n    }\n\n    handleStartStopOnClick() {\n        if (!this.state.running) {\n            this.startTimer()\n        } else {\n            this.stopTimer()\n        }\n    }\n\n    renderSliders() {\n        return this.state.countdowns.map((countdown) =>\n            <Grid item key={countdown.name}>\n                <LabelSlider\n                    label={countdown.name}\n                    labelSuffix=\"m\"\n                    value={countdown.value}\n                    step={1}\n                    min={countdown.min}\n                    max={countdown.max}\n                    onChange={(value: number, thisCountdown: Countdown = countdown) => {\n                        thisCountdown.value = value\n                        this.saveCountdownsToLocalStorage()\n                    }}\n                    onEditSave={(name: string, min: number, max: number) => {\n                        countdown.name = name\n                        countdown.min = min\n                        countdown.max = max\n                        this.saveCountdownsToLocalStorage()\n                    }}\n                    formatCallback={(value: number) => TimeFormat.minutes(value)}\n                />\n            </Grid>\n        )\n    }\n\n    componentDidMount() {\n        notificationService.requestDesktopNotificationPermissions()\n\n        // Load from state\n        const currentCountdownIndex = localStorage.getItem('currentCountdownIndex')\n        const countdownsStr = localStorage.getItem('countdowns')\n\n        if (countdownsStr !== null) {\n            const countdowns = JSON.parse(countdownsStr).map((countdownJsonObject: CountdownJsonObject) => {\n                return new Countdown().loadFromJsonObject(countdownJsonObject)\n            })\n\n            this.setState({\n                countdowns: countdowns,\n            })\n\n            const runningCountdown: Countdown = countdowns.filter((countdown: Countdown) => {return countdown.running})[0]\n\n            if (runningCountdown) {\n                runningCountdown.update()\n                runningCountdown.subscribe(this.constructor.name, this.updateSubscriber)\n                this.updateCountdownState(runningCountdown)\n            }\n        }\n\n        this.setState({\n            currentCountdownIndex: currentCountdownIndex ? parseInt(currentCountdownIndex) : this.state.currentCountdownIndex\n        })\n    }\n\n    render() {\n        const classes = this.props.classes\n        return (\n            <div className={classes.root}>\n                <AppBar position=\"static\">\n                    <Toolbar>\n                        <IconButton\n                            edge=\"start\"\n                            className={classes.menuButton}\n                            color=\"inherit\" aria-label=\"menu\"\n                            onClick={() => {\n                                this.setState({ sidebarOpen: true })\n                            }}\n                        >\n                            <MenuIcon />\n                        </IconButton>\n                        <Typography variant=\"h6\" className={classes.title}>\n                            {APP_TITLE}\n                        </Typography>\n                    </Toolbar>\n                </AppBar>\n                <Sidebar\n                    onOpen={() => this.state.sidebarOpen}\n                    onClose={() => {\n                        this.setState({sidebarOpen: false})\n                    }}\n                />\n                <Grid container className={classes.gridContainer} spacing={2}>\n                    <Grid item xs={12} lg={2}> <Paper className={classes.paperContainer}>\n                        <Grid container direction=\"column\" spacing={2}>\n                            <Grid item>\n                                <Typography variant=\"h5\">\n                                    Timers\n                                </Typography>\n                            </Grid>\n                            <Grid item>\n                                {this.renderSliders()}\n                            </Grid>\n                            <Grid item>\n                                <Button variant=\"contained\" className={classes.fillWidth} onClick={this.handleStartStopOnClick}>\n                                    {this.state.running ? 'Stop' : 'Start'}\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    </Paper> </Grid>\n                    <Grid item xs>\n                        <Paper className={classes.paperContainer}>\n                            <Typography variant=\"h5\">{this.state.running ? \"Running\" : \"On deck\"}: {this.currentCountdown.name}</Typography>\n                            <Typography variant=\"h6\">Time left {TimeFormat.seconds(this.state.secondsLeft)}</Typography>\n                            <Typography variant=\"caption\">Up next: {this.getNextCountdown().name}</Typography>\n                        </Paper>\n                    </Grid>\n                </Grid>\n            </div>\n        );\n    }\n});\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}