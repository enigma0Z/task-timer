{"version":3,"sources":["components/label-slider/index.tsx","data/Subscribable.ts","services/notification/index.ts","components/sidebar/index.tsx","data/Countdown.ts","data/format/Time.ts","App.tsx","index.tsx"],"names":["LabelSlider","withStyles","theme","createStyles","fullWidth","width","centeringGrid","display","listItemText","sliderSpacing","justifyContent","verticalAlign","sliderLabelContainer","marginBottom","sliderLabel","paddingRight","editContainer","marginTop","props","startingLabel","undefined","startingMin","startingMax","state","value","min","max","step","label","menuOpen","editing","labelError","minError","maxError","handleOnChange","bind","event","newValue","this","setState","onChange","classes","Fragment","id","keepMounted","open","anchorEl","anchor","onClose","MenuItem","onClick","Box","flexDirection","flex","alignItems","className","Typography","variant","formatCallback","m","Slider","getAriaValueText","valueLabelDisplay","aria-labelledby","IconButton","currentTarget","TextField","error","margin","size","target","parseInt","isNaN","onEditSave","renderEditView","renderNormalView","renderCurrentView","Component","Subscribable","subscribers","Map","callback","set","delete","forEach","key","map","console","log","NotificationService","_desktopNotificationSupport","window","_instance","desktopNotificationSupport","Notification","permission","requestPermission","then","updateSubscribers","title","options","onclick","notification","close","focus","notificationService","instance","Sidebar","sideBar","notificationsEnabled","desktopNotificationEnabled","refreshNotificationState","subscribe","constructor","name","unsubscribe","Drawer","onOpen","List","ListItem","button","requestDesktopNotificationPermissions","ListItemIcon","ListItemText","primary","ListItemSecondaryAction","Switch","edge","checked","inputProps","onFocus","onBlur","disabled","Countdown","_name","_min","_max","_value","_intervalMs","timeout","startTime","_endTime","_running","_secondsLeft","jsonObject","endTime","running","secondsLeft","intervalMs","Date","now","update","Math","floor","setTimeout","clearTimeout","TimeFormat","timerSeconds","hours","minutes","seconds","returnStr","push","join","timerMinutes","APP_TITLE","DEFAULT_COUNTDOWNS","App","root","flexGrow","fillWidth","menuButton","marginRight","spacing","gridContainer","padding","paperContainer","sliderBox","paddingTop","workLength","breakLength","sidebarOpen","notificationSupport","countdowns","currentCountdownIndex","handleStartStopOnClick","updateCountdownState","updateSubscriber","saveCountdownsToLocalStorage","nextCountdownIndex","countdown","localStorage","setItem","JSON","stringify","exportToJsonObject","currentCountdown","showNotification","body","start","stop","toString","stopTimer","startTimer","Grid","item","labelSuffix","thisCountdown","getItem","countdownsStr","parse","countdownJsonObject","loadFromJsonObject","runningCountdown","filter","AppBar","position","Toolbar","color","aria-label","container","xs","lg","Paper","direction","renderSliders","getNextCountdown","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ddd0ec57.chunk.js","sourcesContent":["import React, { ChangeEvent, Component } from \"react\";\n\nimport {\n    Box,\n    IconButton,\n    Menu,\n    MenuItem,\n    Slider,\n    Theme,\n    Typography,\n    WithStyles, withStyles, createStyles, TextField,\n} from \"@material-ui/core\";\n\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport CheckIcon from '@material-ui/icons/Check';\n\nconst styles = (theme: Theme) => createStyles({\n    fullWidth: {\n        width: '100%'\n    },\n\n    centeringGrid: {\n        display: 'flex'\n    },\n\n    listItemText: {\n        display: 'block'\n    },\n\n    sliderSpacing: {\n        width: '100%',\n        justifyContent: 'center',\n        verticalAlign: 'middle'\n    },\n\n    sliderLabelContainer: {\n        marginBottom: -16\n    },\n\n    sliderLabel: {\n        paddingRight: 10\n    },\n\n    editContainer: {\n        paddingRight: 8,\n        marginTop: -6,\n        marginBottom: -7\n    }\n})\n\ninterface LabelSliderProps extends WithStyles<typeof styles> {\n    label: string,\n    labelSuffix: string,\n    value: number,\n    step: number,\n    min: number,\n    max: number,\n    onChange: Function,\n    onEditSave: (name: string, min: number, max: number) => void,\n    formatCallback: Function\n}\n\ninterface LabelSliderState {\n    label: string,\n    value: number\n    min: number,\n    max: number,\n    step: number,\n    menuOpen: boolean\n    editing: boolean\n    anchor?: HTMLButtonElement\n    labelError: boolean,\n    minError: boolean,\n    maxError: boolean\n}\n\nexport const LabelSlider = withStyles(styles)(class LabelSliderComponent extends Component<LabelSliderProps, LabelSliderState> {\n    private startingLabel?: string = undefined\n    private startingMin?: number = undefined\n    private startingMax?: number = undefined\n\n    constructor(props: LabelSliderProps) {\n        super(props)\n        this.state = {\n            value: this.props.value,\n            min: this.props.min,\n            max: this.props.max,\n            step: this.props.step,\n            label: this.props.label,\n            menuOpen: false,\n            editing: false,\n            labelError: false,\n            minError: false,\n            maxError: false\n        }\n\n        this.handleOnChange = this.handleOnChange.bind(this)\n    }\n\n    handleOnChange(event: any, newValue: number | number[]) {\n        if (typeof newValue === 'number') {\n            this.setState({\n                value: newValue\n            })\n        } else if (typeof newValue === 'object') {\n            this.setState({\n                value: newValue[0]\n            })\n        }\n\n        this.props.onChange(this.state.value)\n    };\n\n    renderNormalView() {\n        const { classes } = this.props\n        return (\n            <React.Fragment>\n                <Menu\n                    id=\"normalMenu\"\n                    keepMounted\n                    open={this.state.menuOpen}\n                    anchorEl={this.state.anchor}\n                    onClose={() => {\n                        this.setState({ menuOpen: false })\n                    }}\n                >\n                    <MenuItem onClick={() => {\n                        this.startingLabel = this.state.label\n                        this.startingMin = this.state.min\n                        this.startingMax = this.state.max\n                        this.setState({ editing: true })\n                    }}>\n                        Edit\n                    </MenuItem>\n                    <MenuItem>Delete</MenuItem>\n                </Menu>\n                <Box display='flex' flexDirection='row' flex='100%' alignItems='baseline' className={classes.sliderLabelContainer}>\n                    <Typography variant=\"subtitle1\" className={classes.sliderLabel}>{this.state.label}</Typography>\n                    <Typography variant=\"caption\" className={classes.sliderLabel}>({this.props.formatCallback(this.state.value)})</Typography>\n                </Box>\n                <Box display='flex' flex={1} flexDirection='row'>\n                    <Box m={1} flex='100%' display='flex' justifyContent='flex-start' alignItems='center'>\n                        <Slider\n                            value={this.state.value}\n                            step={this.state.step}\n                            min={this.state.min}\n                            max={this.state.max}\n                            onChange={this.handleOnChange}\n                            getAriaValueText={(value: number) => { return `${value}m` }}\n                            valueLabelDisplay=\"off\"\n                            aria-labelledby=\"break-length\"\n                        />\n                    </Box>\n                    <Box flex={1} display='flex' justifyContent='flex-end' alignItems='center'>\n                        <IconButton onClick={(event) => {\n                            this.setState({\n                                anchor: event.currentTarget,\n                                menuOpen: true\n                            })\n                        }}>\n                            <SettingsIcon />\n                        </IconButton>\n                    </Box>\n                </Box>\n            </React.Fragment>\n        )\n    }\n\n    renderEditView() {\n        const classes = this.props.classes\n        return (\n            <React.Fragment>\n                <Box display='flex' flex={1} flexDirection='row'>\n                    <Box m={1} flex='100%' display='flex' justifyContent='flex-start' alignItems='center'>\n                        <Box className={classes.editContainer} flex={3}>\n                            <TextField\n                                fullWidth\n                                label=\"Name\"\n                                error={this.state.labelError}\n                                value={this.state.label}\n                                margin='dense'\n                                size='small'\n                                variant=\"standard\"\n                                onChange={(event: ChangeEvent<HTMLTextAreaElement>) => {\n                                    this.setState({\n                                        label: event.target.value,\n                                        labelError: (\n                                            event.target.value === ''\n                                        )\n                                    })\n                                }}\n                            />\n                        </Box>\n                        <Box className={classes.editContainer} flex={1}>\n                            <TextField\n                                label=\"Min\"\n                                error={this.state.minError}\n                                size='small'\n                                variant=\"outlined\"\n                                margin='dense'\n                                value={this.state.min}\n                                onChange={(event: ChangeEvent<HTMLTextAreaElement>) => {\n                                    const value = parseInt(event.target.value)\n                                    this.setState({\n                                        min: value || 0,\n                                        minError: (\n                                            isNaN(value) || value < 1\n                                        )\n                                    })\n                                }}\n                            />\n                        </Box>\n                        <Box className={classes.editContainer} flex={1}>\n                            <TextField\n                                label=\"Max\"\n                                error={this.state.maxError}\n                                size='small'\n                                variant=\"outlined\"\n                                margin='dense'\n                                value={this.state.max}\n                                onChange={(event: ChangeEvent<HTMLTextAreaElement>) => {\n                                    const value = parseInt(event.target.value)\n                                    this.setState({\n                                        max: value || 0,\n                                        maxError: (\n                                            isNaN(value) || value < 1 || value < this.state.min\n                                        )\n                                    })\n                                }}\n                            />\n                        </Box>\n                    </Box>\n                    <Box flex={1} display='flex' justifyContent='flex-end' alignItems='center'>\n                        <IconButton onClick={(event) => {\n                            let value: number\n                            if (this.state.value > this.state.max) {\n                                value = this.state.max\n                            } else if (this.state.value < this.state.min) {\n                                value = this.state.min\n                            } else (\n                                value = this.state.value\n                            )\n\n                            this.props.onEditSave(this.state.label, this.state.min, this.state.max)\n                            this.setState({\n                                menuOpen: false,\n                                editing: false,\n                                value: value\n                            })\n                        }}>\n                            <CheckIcon />\n                        </IconButton>\n                        <IconButton onClick={(event) => {\n                            this.setState({\n                                menuOpen: false,\n                                editing: false,\n                            })\n\n                            if (\n                                this.startingLabel !== undefined &&\n                                this.startingMin !== undefined &&\n                                this.startingMax !== undefined\n                            ) {\n                                this.setState({\n                                    label: this.startingLabel,\n                                    min: this.startingMin,\n                                    max: this.startingMax\n                                })\n                            }\n                        }}>\n                            <CancelIcon />\n                        </IconButton>\n                    </Box>\n                </Box>\n            </React.Fragment>\n        )\n    }\n\n    renderCurrentView() {\n        if (this.state.editing) {\n            return this.renderEditView()\n        } else {\n            return this.renderNormalView()\n        }\n    }\n\n    render() {\n        return (\n            <Box display='flex' flexDirection='column'>\n                {this.renderCurrentView()}\n            </Box>\n        )\n    }\n});\n","export abstract class Subscribable {\n    private subscribers: Map<String, (() => void)> = new Map()\n\n    public subscribe(id: string, callback: () => void) {\n        this.subscribers.set(id, callback)\n    }\n\n    public unsubscribe(id: string) {\n        this.subscribers.delete(id)\n    }\n\n    protected updateSubscribers() {\n        this.subscribers.forEach((value, key, map) => {\n            console.log(`updating subscriber ${key}`)\n            value()\n        })\n    }\n}\n","import { Component } from 'react';\nimport { Subscribable } from '../../data/Subscribable'\n\nexport class NotificationService extends Subscribable {\n    private static _instance: NotificationService;\n    private _desktopNotificationSupport: boolean = false\n\n    public static get instance(): NotificationService {\n        return this._instance || (this._instance = new this())\n    }\n\n    private constructor() {\n        super()\n        this._desktopNotificationSupport = 'Notification' in window\n    }\n\n    public get desktopNotificationSupport(): boolean {\n        return this._desktopNotificationSupport\n    }\n\n    public get desktopNotificationEnabled() {\n        return this.desktopNotificationSupport && Notification.permission === 'granted'\n    }\n\n    public requestDesktopNotificationPermissions() {\n        if (this.desktopNotificationSupport && Notification.permission === 'default') {\n            Notification.requestPermission()\n                .then((value) => {this.updateSubscribers()})\n        }\n    }\n\n    public showNotification(\n        title: string,\n        options: NotificationOptions,\n        onclick: (notification: Notification, event: Event) => void = (\n            notification: Notification, event: Event\n        ) => {\n            notification.close(); window.focus()\n        }\n    ) {\n        let notification = new Notification(\n            title, options\n        )\n\n        notification.onclick = (event: Event) => (onclick(notification, event))\n    }\n}\n","import React, { Component } from 'react';\n\nimport {\n    createStyles,\n    Drawer,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    ListItemText,\n    Switch,\n    Theme,\n    WithStyles, withStyles\n} from '@material-ui/core';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport { NotificationService } from '../../services/notification';\n\nconst styles = (theme: Theme) => createStyles({\n    sideBar: {\n        width: 250\n    }\n})\n\nconst notificationService: NotificationService = NotificationService.instance\n\ninterface SidebarProps extends WithStyles<typeof styles> {\n    onOpen: Function,\n    onClose: Function\n}\n\ninterface SidebarState {\n    open: boolean,\n    notificationsEnabled: boolean\n}\n\nexport const Sidebar = withStyles(styles)(class SidebarComponent extends Component<SidebarProps, SidebarState> {\n    constructor(props: SidebarProps) {\n        super(props)\n        this.state = {\n            open: false,\n            notificationsEnabled: notificationService.desktopNotificationEnabled\n        }\n\n        // this.refreshNotificationState = this.refreshNotificationState.bind(this)\n    }\n\n    refreshNotificationState() {\n        if (this.state.notificationsEnabled !== notificationService.desktopNotificationEnabled) {\n            this.setState({\n                notificationsEnabled: notificationService.desktopNotificationEnabled\n            })\n        }\n    }\n\n    componentDidUpdate() {\n        this.refreshNotificationState()\n    }\n\n    componentDidMount() {\n        notificationService.subscribe(this.constructor.name, () => {\n            this.refreshNotificationState()\n        })\n    }\n\n    componentWillUnmount() {\n        notificationService.unsubscribe(this.constructor.name)\n    }\n\n    render() {\n        const classes = this.props.classes\n        return (\n            <Drawer\n                anchor='left'\n                open={this.props.onOpen()}\n                onClose={() => this.props.onClose()}\n            >\n                <div className={classes.sideBar} >\n                    <List>\n                        <ListItem\n                            button\n                            onClick={() => { notificationService.requestDesktopNotificationPermissions() }}\n                        >\n                            <ListItemIcon><NotificationsIcon /></ListItemIcon>\n                            <ListItemText primary=\"Notifications\" />\n                            <ListItemSecondaryAction>\n                                <Switch\n                                    edge=\"end\"\n                                    onClick={() => { notificationService.requestDesktopNotificationPermissions() }}\n                                    checked={this.state.notificationsEnabled}\n                                    inputProps={{ 'aria-labelledby': 'switch-list-label-bluetooth' }}\n                                    onFocus={() => this.refreshNotificationState()}\n                                    onBlur={() => this.refreshNotificationState()}\n                                    disabled={!notificationService.desktopNotificationSupport}\n                                />\n                            </ListItemSecondaryAction>\n                        </ListItem>\n                    </List>\n                </div>\n            </Drawer>\n        )\n    }\n\n});\n","import { Subscribable } from \"./Subscribable\";\n\nconst DEFAULT_VALUE = 0\nconst DEFAULT_MIN = 1\nconst DEFAULT_MAX = 90\nconst DEFAULT_INTERVAL_MS = 1000\n\nexport interface CountdownJsonObject {\n    startTime?: any,\n    endTime?: any,\n    running: any,\n    secondsLeft: any,\n    name: string,\n    min: number,\n    max: number,\n    value: number,\n    intervalMs: number,\n}\n\nexport class Countdown extends Subscribable {\n    private timeout: any\n\n    private startTime?: number = undefined;\n    private _endTime?: number = undefined;\n\n    private _running: boolean = false\n    private _secondsLeft: number = 0;\n\n    public constructor(\n        private _name: string = 'NO_NAME',\n        private _min: number = 1,\n        private _max: number = 90,\n        private _value: number = 0,\n        private _intervalMs: number = 1000,\n    ) {\n        super()\n\n    }\n\n    public loadFromJsonObject(jsonObject: CountdownJsonObject): Countdown {\n        this.startTime = jsonObject.startTime\n        this._endTime = jsonObject.endTime\n        this._running = jsonObject.running\n        this._secondsLeft = jsonObject.secondsLeft\n        this._name = jsonObject.name\n        this._min = jsonObject.min\n        this._max = jsonObject.max\n        this._value = jsonObject.value\n        this._intervalMs = jsonObject.intervalMs\n\n        return this\n    }\n\n    public exportToJsonObject(): CountdownJsonObject {\n        return {\n            startTime: this.startTime,\n            endTime: this.endTime,\n            running: this.running,\n            secondsLeft: this.secondsLeft,\n            name: this.name,\n            min: this.min,\n            max: this.max,\n            value: this.value,\n            intervalMs: this.intervalMs,\n        }\n    }\n\n    public get name(): string { return this._name }\n    public set name(name: string) { this._name = name }\n\n    public get secondsLeft(): number { return this._secondsLeft }\n\n    public get running(): boolean { return this._running }\n\n    public get value(): number { return this._value ? this._value : DEFAULT_VALUE }\n    public set value(value: number) { this._value = value }\n\n    public get min(): number { return this._min ? this._min : DEFAULT_MIN }\n    public set min(min: number) { this._min = min }\n\n    public get max(): number { return this._max ? this._max : DEFAULT_MAX }\n    public set max(max: number) { this._max = max }\n\n    public get intervalMs(): number { return this._intervalMs ? this._intervalMs : DEFAULT_INTERVAL_MS }\n\n    public get endTime(): number | undefined { return this._endTime }\n\n    start() {\n        this._running = true\n        this.startTime = Date.now()\n        this._endTime = this.startTime + (this.value * 60 * 1000)\n\n        this.update()\n    }\n\n    stop() {\n        this._running = false\n        this.update()\n    }\n\n    update() {\n        if (this.endTime !== undefined) {\n            this._secondsLeft = Math.floor((this.endTime - Date.now()) / 1000)\n            if (this._running && this.secondsLeft > 0) {\n                this.timeout = setTimeout(() => this.update(), this.intervalMs)\n            } else {\n                this._running = false\n                this._secondsLeft = 0\n                clearTimeout(this.timeout)\n            }\n        }\n\n        this.updateSubscribers()\n    }\n}\n","\nexport class TimeFormat {\n    static seconds(timerSeconds: number): string {\n        let hours = Math.floor(timerSeconds / 60 / 60)\n        let minutes = Math.floor((timerSeconds - (hours * 60 * 60)) / 60)\n        let seconds = Math.floor(timerSeconds - (hours * 60 * 60) - (minutes * 60))\n\n        let returnStr: string[] = []\n\n        if (hours > 0) {\n            returnStr.push(`${hours}h`)\n        }\n\n        if (minutes > 0) {\n            returnStr.push(`${minutes}m`)\n        }\n\n        returnStr.push(`${seconds}s`)\n\n        return returnStr.join(' ')\n    }\n\n    static minutes(timerMinutes: number): string {\n        let hours = Math.floor(timerMinutes / 60)\n        let minutes = timerMinutes - (hours * 60)\n\n        let returnStr: string[] = []\n\n        if (hours > 0) {\n            returnStr.push(`${hours}h`)\n        }\n\n        returnStr.push(`${minutes}m`)\n\n        return returnStr.join(' ')\n    }\n}\n","import React, { Component } from 'react';\n\nimport {\n    AppBar,\n    createStyles,\n    Grid,\n    IconButton,\n    Paper,\n    Theme,\n    Toolbar,\n    Typography,\n    WithStyles, withStyles\n} from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Button from '@material-ui/core/Button/Button';\n\nimport './App.css';\nimport { LabelSlider } from './components/label-slider';\nimport { Sidebar } from './components/sidebar';\nimport { Countdown, CountdownJsonObject } from './data/Countdown'\nimport { TimeFormat } from './data/format/Time'\n\nimport { NotificationService } from './services/notification'\n\nconst styles = (theme: Theme) => createStyles({\n    root: {\n        flexGrow: 1,\n    },\n\n    fillWidth: {\n        width: '100%',\n    },\n\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n\n    title: {\n        flexGrow: 1,\n    },\n\n    gridContainer: {\n        flexGrow: 1,\n        padding: 8,\n    },\n\n    paperContainer: {\n        padding: 8\n    },\n\n    sliderBox: {\n        paddingTop: 16\n    },\n\n});\n\ninterface AppProps extends WithStyles<typeof styles> { }\n\ninterface AppState {\n    workLength: number,\n    breakLength: number,\n    running: boolean,\n    secondsLeft: number,\n    currentCountdownIndex: number,\n    countdowns: Countdown[],\n    sidebarOpen: boolean,\n    notificationSupport: boolean,\n    endTime?: number,\n}\n\nconst APP_TITLE: string = 'Task Timer'\nconst DEFAULT_COUNTDOWNS: Countdown[] = [\n    new Countdown('Work', 1, 90, 50),\n    new Countdown('Break time', 1, 15, 10),\n]\n\nconst notificationService: NotificationService = NotificationService.instance\n\nconst App = withStyles(styles)(class AppComponent extends Component<AppProps, AppState> {\n    constructor(props: AppProps) {\n        super(props)\n\n        this.state = {\n            workLength: 50,\n            breakLength: 10,\n            running: false,\n            secondsLeft: 0,\n            sidebarOpen: false,\n            notificationSupport: \"Notification\" in window,\n            countdowns: DEFAULT_COUNTDOWNS,\n            currentCountdownIndex: 0\n        }\n\n        this.handleStartStopOnClick = this.handleStartStopOnClick.bind(this)\n        this.updateCountdownState = this.updateCountdownState.bind(this)\n        this.updateSubscriber = this.updateSubscriber.bind(this)\n        this.saveCountdownsToLocalStorage = this.saveCountdownsToLocalStorage.bind(this)\n    }\n\n    get currentCountdown(): Countdown {\n        return this.state.countdowns[this.state.currentCountdownIndex]\n    }\n\n    get nextCountdownIndex(): number {\n        return (this.state.currentCountdownIndex + 1) % this.state.countdowns.length\n    }\n\n    getNextCountdown(): Countdown {\n        return this.state.countdowns[this.nextCountdownIndex]\n    }\n\n    updateCountdownState(countdown: Countdown) {\n        this.setState({\n            secondsLeft: countdown.secondsLeft,\n            running: countdown.running\n        })\n\n        this.saveCountdownsToLocalStorage()\n    }\n\n    saveCountdownsToLocalStorage() {\n        localStorage.setItem(\n            'countdowns',\n            JSON.stringify(\n                this.state.countdowns.map((countdown) => countdown.exportToJsonObject())\n            )\n        )\n    }\n\n    updateSubscriber() {\n        this.updateCountdownState(this.currentCountdown)\n\n        if (!this.currentCountdown.running) {\n            notificationService.showNotification(\n                APP_TITLE,\n                {\n                    body: `${this.currentCountdown.name} done`\n                }\n            )\n            this.currentCountdown.unsubscribe(this.constructor.name)\n        }\n    }\n\n    startTimer() {\n        this.currentCountdown.subscribe(this.constructor.name, this.updateSubscriber)\n        this.currentCountdown.start()\n    }\n\n    stopTimer() {\n        this.currentCountdown.unsubscribe(this.constructor.name)\n        this.currentCountdown.stop()\n        this.updateCountdownState(this.currentCountdown)\n\n        this.setState({\n            currentCountdownIndex: this.nextCountdownIndex\n        })\n\n        localStorage.setItem('currentCountdownIndex', this.nextCountdownIndex.toString())\n    }\n\n    handleStartStopOnClick() {\n        if (!this.state.running) {\n            this.startTimer()\n        } else {\n            this.stopTimer()\n        }\n    }\n\n    renderSliders() {\n        return this.state.countdowns.map((countdown) =>\n            <Grid item key={countdown.name}>\n                <LabelSlider\n                    label={countdown.name}\n                    labelSuffix=\"m\"\n                    value={countdown.value}\n                    step={1}\n                    min={countdown.min}\n                    max={countdown.max}\n                    onChange={(value: number, thisCountdown: Countdown = countdown) => {\n                        thisCountdown.value = value\n                        this.saveCountdownsToLocalStorage()\n                    }}\n                    onEditSave={(name: string, min: number, max: number) => {\n                        countdown.name = name\n                        countdown.min = min\n                        countdown.max = max\n                        this.saveCountdownsToLocalStorage()\n                    }}\n                    formatCallback={(value: number) => TimeFormat.minutes(value)}\n                />\n            </Grid>\n        )\n    }\n\n    componentDidMount() {\n        notificationService.requestDesktopNotificationPermissions()\n\n        // Load from state\n        const currentCountdownIndex = localStorage.getItem('currentCountdownIndex')\n        const countdownsStr = localStorage.getItem('countdowns')\n\n        if (countdownsStr !== null) {\n            const countdowns = JSON.parse(countdownsStr).map((countdownJsonObject: CountdownJsonObject) => {\n                return new Countdown().loadFromJsonObject(countdownJsonObject)\n            })\n\n            this.setState({\n                countdowns: countdowns,\n            })\n\n            const runningCountdown: Countdown = countdowns.filter((countdown: Countdown) => {return countdown.running})[0]\n\n            if (runningCountdown) {\n                runningCountdown.update()\n                runningCountdown.subscribe(this.constructor.name, this.updateSubscriber)\n                this.updateCountdownState(runningCountdown)\n            }\n        }\n\n        this.setState({\n            currentCountdownIndex: currentCountdownIndex ? parseInt(currentCountdownIndex) : this.state.currentCountdownIndex\n        })\n    }\n\n    render() {\n        const classes = this.props.classes\n        return (\n            <div className={classes.root}>\n                <AppBar position=\"static\">\n                    <Toolbar>\n                        <IconButton\n                            edge=\"start\"\n                            className={classes.menuButton}\n                            color=\"inherit\" aria-label=\"menu\"\n                            onClick={() => {\n                                this.setState({ sidebarOpen: true })\n                            }}\n                        >\n                            <MenuIcon />\n                        </IconButton>\n                        <Typography variant=\"h6\" className={classes.title}>\n                            {APP_TITLE}\n                        </Typography>\n                    </Toolbar>\n                </AppBar>\n                <Sidebar\n                    onOpen={() => this.state.sidebarOpen}\n                    onClose={() => {\n                        this.setState({sidebarOpen: false})\n                    }}\n                />\n                <Grid container className={classes.gridContainer} spacing={2}>\n                    <Grid item xs={12} lg={2}> <Paper className={classes.paperContainer}>\n                        <Grid container direction=\"column\" spacing={2}>\n                            <Grid item>\n                                <Typography variant=\"h5\">\n                                    Timers\n                                </Typography>\n                            </Grid>\n                            <Grid item>\n                                {this.renderSliders()}\n                            </Grid>\n                            <Grid item>\n                                <Button variant=\"contained\" className={classes.fillWidth} onClick={this.handleStartStopOnClick}>\n                                    {this.state.running ? 'Stop' : 'Start'}\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    </Paper> </Grid>\n                    <Grid item xs>\n                        <Paper className={classes.paperContainer}>\n                            <Typography variant=\"h5\">{this.state.running ? \"Running\" : \"On deck\"}: {this.currentCountdown.name}</Typography>\n                            <Typography variant=\"h6\">Time left {TimeFormat.seconds(this.state.secondsLeft)}</Typography>\n                            <Typography variant=\"caption\">Up next: {this.getNextCountdown().name}</Typography>\n                        </Paper>\n                    </Grid>\n                </Grid>\n            </div>\n        );\n    }\n});\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}