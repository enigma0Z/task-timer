{"version":3,"sources":["components/label-slider/index.tsx","data/model/countdown/index.ts","data/format/time/index.ts","App.tsx","index.tsx"],"names":["LabelSlider","withStyles","theme","createStyles","fullWidth","width","centeringGrid","display","listItemText","sliderSpacing","justifyContent","verticalAlign","sliderLabelContainer","marginBottom","sliderLabel","paddingRight","props","state","value","menuOpen","handleOnChange","bind","event","newValue","this","setState","onChange","classes","Box","flexDirection","id","keepMounted","open","anchorEl","anchor","onClose","MenuItem","flex","alignItems","className","Typography","variant","label","formatCallback","m","Slider","step","min","max","getAriaValueText","valueLabelDisplay","aria-labelledby","IconButton","onClick","currentTarget","Component","Countdown","name","next","notification","timer","TimeFormat","timerSeconds","hours","Math","floor","minutes","seconds","returnStr","push","join","timerMinutes","APP_TITLE","DEFAULT_COUNTDOWNS","setNext","App","root","flexGrow","fillWidth","menuButton","marginRight","spacing","title","gridContainer","padding","paperContainer","sliderBox","paddingTop","sideBar","workLength","breakLength","running","secondsLeft","sidebarOpen","notificationSupport","window","countdowns","currentCountdown","getButtonText","handleStartStopOnClick","updateSecondsLeft","requestNotificationPermission","undefined","endTime","newSecondsLeft","Date","now","localStorage","setItem","toString","setUpdateTimer","stopTimer","setTimeout","clearTimeout","newEndTime","showNotification","Notification","body","onclick","close","focus","getNextCountdown","clearUpdateTimer","startTimer","map","countdown","Grid","item","labelSuffix","thisCountdown","permission","requestPermission","alert","getItem","find","parseInt","AppBar","position","Toolbar","edge","color","aria-label","Drawer","List","ListItem","button","ListItemIcon","ListItemText","primary","ListItemSecondaryAction","Switch","checked","inputProps","disabled","container","xs","lg","Paper","direction","renderSliders","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6348441e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport {\n    Box,\n    IconButton,\n    Menu,\n    MenuItem,\n    Slider,\n    Theme,\n    Typography,\n    WithStyles, withStyles, createStyles,\n} from \"@material-ui/core\";\n\nimport SettingsIcon from '@material-ui/icons/Settings';\n\nconst styles = (theme: Theme) => createStyles({\n    fullWidth: {\n        width: '100%'\n    },\n\n    centeringGrid: {\n        display: 'flex'\n    },\n\n    listItemText: {\n        display: 'block'\n    },\n\n    sliderSpacing: {\n        width: '100%',\n        justifyContent: 'center',\n        verticalAlign: 'middle'\n    },\n\n    sliderLabelContainer: {\n        marginBottom: -16\n    },\n\n    sliderLabel: {\n        paddingRight: 10\n    }\n})\n\ninterface LabelSliderProps extends WithStyles<typeof styles> {\n    label: string,\n    labelSuffix: string,\n    value: number,\n    step: number,\n    min: number,\n    max: number,\n    onChange: Function,\n    formatCallback: Function\n}\n\ninterface LabelSliderState {\n    value: number\n    menuOpen: boolean\n    anchor?: HTMLButtonElement\n}\n\nexport const LabelSlider = withStyles(styles)(class LabelSliderComponent extends Component<LabelSliderProps, LabelSliderState> {\n    constructor(props: LabelSliderProps) {\n        super(props)\n        this.state = {\n            value: this.props.value,\n            menuOpen: false\n        }\n\n        this.handleOnChange = this.handleOnChange.bind(this)\n    }\n\n    handleOnChange(event: any, newValue: number | number[]) {\n        if (typeof newValue === 'number') {\n            this.setState({\n                value: newValue\n            })\n        } else if (typeof newValue === 'object') {\n            this.setState({\n                value: newValue[0]\n            })\n        }\n\n        this.props.onChange(this.state.value)\n    };\n\n\n    render() {\n        const { classes } = this.props\n        return (\n            <Box display='flex' flexDirection='column'>\n                <Menu\n                    id=\"simple-menu\"\n                    keepMounted\n                    open={this.state.menuOpen}\n                    anchorEl={this.state.anchor}\n                    onClose={() => {\n                        this.setState({ menuOpen: false })\n                    }}\n                >\n                    <MenuItem>Edit</MenuItem>\n                    <MenuItem>Delete</MenuItem>\n                </Menu>\n                <Box display='flex' flexDirection='row' flex='100%' alignItems='baseline' className={classes.sliderLabelContainer}>\n                    <Typography variant=\"subtitle1\" className={classes.sliderLabel}>{this.props.label}</Typography>\n                    <Typography variant=\"caption\" className={classes.sliderLabel}>({this.props.formatCallback(this.state.value)})</Typography>\n                </Box>\n                <Box display='flex' flex={1} flexDirection='row'>\n                    <Box m={1} flex='100%' display='flex' justifyContent='flex-start' alignItems='center'>\n                        <Slider\n                            value={this.state.value}\n                            step={this.props.step}\n                            min={this.props.min}\n                            max={this.props.max}\n                            onChange={this.handleOnChange}\n                            getAriaValueText={(value: number) => { return `${value}m` }}\n                            valueLabelDisplay=\"off\"\n                            aria-labelledby=\"break-length\"\n                        />\n                    </Box>\n                    <Box flex={1} display='flex' justifyContent='flex-end' alignItems='center'>\n                        <IconButton onClick={(event) => {\n                            this.setState({\n                                anchor: event.currentTarget,\n                                menuOpen: true\n                            })\n                        }}>\n                            <SettingsIcon />\n                        </IconButton>\n                    </Box>\n                </Box>\n            </Box>\n        )\n    }\n});\n","export class Countdown {\n    constructor(\n        public name: string,\n        public min: number,\n        public max: number,\n        public value: number,\n        public next?: Countdown,\n        public notification?: any,\n    ) { }\n\n    setNext(timer: Countdown) {\n        this.next = timer\n    }\n}\n","\nexport class TimeFormat {\n    static seconds(timerSeconds: number): string {\n        let hours = Math.floor(timerSeconds / 60 / 60)\n        let minutes = Math.floor((timerSeconds - (hours * 60 * 60)) / 60)\n        let seconds = Math.floor(timerSeconds - (hours * 60 * 60) - (minutes * 60))\n\n        let returnStr: string[] = []\n\n        if (hours > 0) {\n            returnStr.push(`${hours}h`)\n        }\n\n        if (minutes > 0) {\n            returnStr.push(`${minutes}m`)\n        }\n\n        returnStr.push(`${seconds}s`)\n\n        return returnStr.join(' ')\n    }\n\n    static minutes(timerMinutes: number): string {\n        let hours = Math.floor(timerMinutes / 60)\n        let minutes = timerMinutes - (hours * 60)\n\n        let returnStr: string[] = []\n\n        if (hours > 0) {\n            returnStr.push(`${hours}h`)\n        }\n\n        returnStr.push(`${minutes}m`)\n\n        return returnStr.join(' ')\n    }\n}\n","import React, { Component } from 'react';\n\nimport {\n    AppBar,\n    createStyles,\n    Drawer,\n    Grid,\n    IconButton,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    ListItemText,\n    Paper,\n    Switch,\n    Theme,\n    Toolbar,\n    Typography,\n    WithStyles, withStyles\n} from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport Button from '@material-ui/core/Button/Button';\n\nimport './App.css';\nimport { LabelSlider } from './components/label-slider';\nimport { Countdown } from './data/model/countdown'\nimport { TimeFormat } from './data/format/time'\n\nconst styles = (theme: Theme) => createStyles({\n    root: {\n        flexGrow: 1,\n    },\n\n    fillWidth: {\n        width: '100%',\n    },\n\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n\n    title: {\n        flexGrow: 1,\n    },\n\n    gridContainer: {\n        flexGrow: 1,\n        padding: 8,\n    },\n\n    paperContainer: {\n        padding: 8\n    },\n\n    sliderBox: {\n        paddingTop: 16\n    },\n\n    sideBar: {\n        width: 250\n    }\n});\n\ninterface AppProps extends WithStyles<typeof styles> { }\n\ninterface AppState {\n    workLength: number,\n    breakLength: number,\n    running: boolean,\n    secondsLeft: number,\n    currentCountdown: Countdown,\n    countdowns: Countdown[],\n    sidebarOpen: boolean,\n    notificationSupport: boolean,\n    endTime?: number,\n}\n\nconst APP_TITLE: string = 'Task Timer'\nconst DEFAULT_COUNTDOWNS: Countdown[] = [\n    new Countdown('Work', 1, 90, 50),\n    new Countdown('Break time', 1, 15, 10),\n]\n\nDEFAULT_COUNTDOWNS[0].setNext(DEFAULT_COUNTDOWNS[1])\nDEFAULT_COUNTDOWNS[1].setNext(DEFAULT_COUNTDOWNS[0])\n\nconst App = withStyles(styles)(class AppComponent extends Component<AppProps, AppState> {\n    private timer: any;\n    public notification: any;\n\n    constructor(props: AppProps) {\n        super(props)\n\n        this.state = {\n            workLength: 50,\n            breakLength: 10,\n            running: false,\n            secondsLeft: 0,\n            sidebarOpen: false,\n            notificationSupport: \"Notification\" in window,\n            countdowns: DEFAULT_COUNTDOWNS,\n            currentCountdown: DEFAULT_COUNTDOWNS[0]\n        }\n\n        this.getButtonText = this.getButtonText.bind(this)\n        this.handleStartStopOnClick = this.handleStartStopOnClick.bind(this)\n        this.updateSecondsLeft = this.updateSecondsLeft.bind(this)\n        this.requestNotificationPermission = this.requestNotificationPermission.bind(this)\n    }\n\n\n\n    getButtonText() {\n        if (this.state.running) {\n            return \"Stop\"\n        } else {\n            return \"Start\"\n        }\n    }\n\n    getNextCountdown(): Countdown {\n        if (this.state.currentCountdown.next !== undefined) {\n            return this.state.currentCountdown.next\n        }\n\n        return this.state.currentCountdown\n    }\n\n    updateSecondsLeft() {\n        if (this.state.endTime !== undefined) {\n            let newSecondsLeft = (this.state.endTime - Date.now()) / 1000\n            if (this.state.running && newSecondsLeft > 0) {\n                this.setState({\n                    secondsLeft: Math.floor(newSecondsLeft)\n                })\n\n                localStorage.setItem('secondsLeft', Math.floor(newSecondsLeft).toString())\n\n                this.setUpdateTimer()\n            } else {\n                this.stopTimer()\n            }\n        } else {\n            return 0\n        }\n    }\n\n    setUpdateTimer() {\n        this.timer = setTimeout(() => { this.updateSecondsLeft() }, 1000)\n    }\n\n    clearUpdateTimer() {\n        clearTimeout(this.timer)\n    }\n\n    startTimer() {\n        let now = Date.now()\n        let newEndTime = now + (this.state.currentCountdown.value * 60 * 1000)\n        let newSecondsLeft = this.state.currentCountdown.value * 60\n\n        this.setState({\n            running: true,\n            endTime: newEndTime,\n            secondsLeft: newSecondsLeft\n        })\n\n        localStorage.setItem('running', true.toString())\n        localStorage.setItem('endTime', newEndTime.toString())\n        localStorage.setItem('secondsLeft', newSecondsLeft.toString())\n        localStorage.setItem('currentCountdownName', this.state.currentCountdown.name)\n\n        this.setUpdateTimer()\n    }\n\n    stopTimer(showNotification: boolean = true) {\n        if (showNotification && this.state.notificationSupport) {\n            let notification = new Notification(\n                APP_TITLE,\n                {\n                    body: `${this.state.currentCountdown.name} completed!`,\n                }\n            )\n\n            notification.onclick = (event: Event) => { notification.close(); window.focus() }\n        }\n\n        this.setState({\n            running: false,\n            secondsLeft: 0,\n            currentCountdown: this.getNextCountdown()\n        })\n\n        localStorage.setItem('running', false.toString())\n        localStorage.setItem('secondsLeft', '0')\n        localStorage.setItem('currentCountdownName', this.getNextCountdown().name)\n\n        this.clearUpdateTimer()\n    }\n\n    handleStartStopOnClick() {\n        if (!this.state.running) {\n            this.startTimer()\n        } else {\n            this.stopTimer(false)\n        }\n    }\n\n    renderSliders() {\n        return this.state.countdowns.map((countdown) =>\n            <Grid item key={countdown.name}>\n                <LabelSlider\n                    label={countdown.name}\n                    labelSuffix=\"m\"\n                    value={countdown.value}\n                    step={1}\n                    min={countdown.min}\n                    max={countdown.max}\n                    onChange={(value: number, thisCountdown: Countdown = countdown) => {\n                        thisCountdown.value = value\n                    }}\n                    formatCallback={(value: number) => TimeFormat.minutes(value)}\n                />\n            </Grid>\n        )\n    }\n\n    requestNotificationPermission() {\n        if (this.state.notificationSupport) {\n            if (Notification.permission === 'default') {\n                Notification.requestPermission()\n            } else if (Notification.permission === 'denied') {\n                alert('Notifications have been disabled, enable them in your browser')\n            }\n        }\n    }\n\n    componentDidMount() {\n        this.requestNotificationPermission()\n\n        // Load from state\n        const running = localStorage.getItem('running') === 'true'\n        const endTime = localStorage.getItem('endTime')\n        const secondsLeft = localStorage.getItem('secondsLeft')\n        const currentCountdown = this.state.countdowns.find((countdown: Countdown) => { return countdown.name === localStorage.getItem('currentCountdownName') })\n\n        this.setState({\n            running: running,\n            endTime: endTime ? parseInt(endTime) : this.state.endTime,\n            secondsLeft: secondsLeft ? parseInt(secondsLeft) : this.state.secondsLeft,\n            currentCountdown: currentCountdown ? currentCountdown : this.state.currentCountdown\n        })\n\n        if (running) {\n            this.setUpdateTimer()\n        }\n    }\n\n    render() {\n        const classes = this.props.classes\n        return (\n            <div className={classes.root}>\n                <AppBar position=\"static\">\n                    <Toolbar>\n                        <IconButton\n                            edge=\"start\"\n                            className={classes.menuButton}\n                            color=\"inherit\" aria-label=\"menu\"\n                            onClick={() => { this.setState({ sidebarOpen: true }) }}\n                        >\n                            <MenuIcon />\n                        </IconButton>\n                        <Typography variant=\"h6\" className={classes.title}>\n                            {APP_TITLE}\n                        </Typography>\n                    </Toolbar>\n                </AppBar>\n                <Drawer\n                    anchor='left'\n                    open={this.state.sidebarOpen}\n                    onClose={() => { this.setState({ sidebarOpen: false }) }}\n                >\n                    <div className={classes.sideBar} >\n                        <List>\n                            <ListItem\n                                button\n                                onClick={this.requestNotificationPermission}\n                            >\n                                <ListItemIcon><NotificationsIcon /></ListItemIcon>\n                                <ListItemText primary=\"Notifications\" />\n                                <ListItemSecondaryAction>\n                                    <Switch\n                                        edge=\"end\"\n                                        onClick={this.requestNotificationPermission}\n                                        checked={this.state.notificationSupport && Notification.permission === 'granted'}\n                                        inputProps={{ 'aria-labelledby': 'switch-list-label-bluetooth' }}\n                                        disabled={this.state.notificationSupport === false}\n                                    />\n                                </ListItemSecondaryAction>\n                            </ListItem>\n                        </List>\n                    </div>\n                </Drawer>\n                <Grid container className={classes.gridContainer} spacing={2}>\n                    <Grid item xs={12} lg={2}> <Paper className={classes.paperContainer}>\n                        <Grid container direction=\"column\" spacing={2}>\n                            <Grid item>\n                                <Typography variant=\"h5\">\n                                    Timers\n                                </Typography>\n                            </Grid>\n                            <Grid item>\n                                {this.renderSliders()}\n                            </Grid>\n                            <Grid item>\n                                <Button variant=\"contained\" className={classes.fillWidth} onClick={this.handleStartStopOnClick}>\n                                    {this.getButtonText()}\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    </Paper> </Grid>\n                    <Grid item xs>\n                        <Paper className={classes.paperContainer}>\n                            <Typography variant=\"h5\">{this.state.running ? \"Running\" : \"On deck\"}: {this.state.currentCountdown.name}</Typography>\n                            <Typography variant=\"h6\">Time left {TimeFormat.seconds(this.state.secondsLeft)}</Typography>\n                            <Typography variant=\"caption\">Up next: {this.getNextCountdown().name}</Typography>\n                        </Paper>\n                    </Grid>\n                </Grid>\n            </div>\n        );\n    }\n});\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}