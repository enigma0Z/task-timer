{"version":3,"sources":["components/LabelSlider.tsx","data/Subscribable.ts","services/notification/index.ts","components/Sidebar.tsx","data/Countdown.ts","data/format/Time.ts","App.tsx","index.tsx"],"names":["LabelSlider","withStyles","theme","createStyles","fullWidth","width","centeringGrid","display","listItemText","sliderSpacing","justifyContent","verticalAlign","sliderLabelContainer","marginBottom","sliderLabel","paddingRight","editPopover","padding","editContainer","props","popoverRef","state","value","label","editLabel","min","editMin","max","editMax","step","menuOpen","editing","labelError","minError","maxError","React","createRef","handleOnChange","bind","handleKeyPress","openPopover","closePopover","saveForm","cancelEdit","isNaN","event","newValue","this","setState","onChange","key","onEditSave","classes","Box","flexDirection","flex","alignItems","className","Typography","variant","formatCallback","m","Slider","getAriaValueText","valueLabelDisplay","aria-labelledby","IconButton","onClick","Popover","open","anchorEl","current","anchorOrigin","vertical","horizontal","transformOrigin","onClose","onEscapeKeyDown","Grid","container","item","xs","TextField","error","margin","size","target","onKeyPress","parseInt","getMinError","getMaxError","color","ref","renderNormalView","renderEditPopover","Component","defaultProps","Subscribable","subscribers","Map","id","callback","set","delete","forEach","map","console","log","NotificationService","_desktopNotificationSupport","window","_instance","desktopNotificationSupport","Notification","permission","requestPermission","then","updateSubscribers","title","options","onclick","notification","close","focus","notificationService","instance","Sidebar","sideBar","notificationsEnabled","desktopNotificationEnabled","refreshNotificationState","subscribe","constructor","name","unsubscribe","Drawer","anchor","onOpen","List","ListItem","button","requestDesktopNotificationPermissions","ListItemIcon","ListItemText","primary","ListItemSecondaryAction","Switch","edge","checked","inputProps","onFocus","onBlur","disabled","resetCallback","Countdown","_name","_min","_max","_value","_intervalMs","timeout","startTime","undefined","_endTime","_running","_secondsLeft","jsonObject","endTime","running","secondsLeft","intervalMs","Date","now","update","Math","floor","setTimeout","clearTimeout","TimeFormat","timerSeconds","hours","minutes","seconds","returnStr","push","join","timerMinutes","APP_TITLE","DEFAULT_COUNTDOWNS","App","root","flexGrow","fillWidth","menuButton","marginRight","spacing","gridContainer","paperContainer","sliderBox","paddingTop","popperStyle","popperCardStyle","paddingLeft","backgroundColor","palette","grey","popperContentsStyle","modal","border","sliderRefs","workLength","breakLength","sidebarOpen","notificationSupport","countdowns","currentCountdownIndex","editingOrder","confirmDeleteOpen","confirmDeleteIndex","confirmDeleteName","confirmResetOpen","handleStartStopOnClick","updateCountdownState","updateSubscriber","saveCountdownsToLocalStorage","swapCountdowns","deleteCountdown","localStorage","getItem","countdownsStr","JSON","parse","countdownJsonObject","loadFromJsonObject","runningCountdown","filter","countdown","a","b","lower","higher","RangeError","newCountdowns","slice","currentCountdowns","index","nextCountdownIndex","setItem","stringify","exportToJsonObject","currentCountdown","showNotification","body","start","stop","toString","stopTimer","startTimer","elements","i","upDisabled","downDisabled","length","Card","justifyItems","labelSuffix","thisCountdown","AppBar","position","Toolbar","aria-label","Modal","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","Fade","in","direction","alignContent","md","lg","Paper","renderSliders","getNextCountdown","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.28112554.chunk.js","sourcesContent":["import React, { ChangeEvent, Component, KeyboardEvent, RefObject } from \"react\";\n\nimport {\n    Box,\n    IconButton,\n    Slider,\n    Theme,\n    Typography,\n    WithStyles,\n    withStyles,\n    createStyles,\n    TextField,\n    Grid,\n    Popover\n} from \"@material-ui/core\";\n\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport CheckIcon from '@material-ui/icons/Check';\n\nconst styles = (theme: Theme) => createStyles({\n    fullWidth: {\n        width: '100%'\n    },\n\n    centeringGrid: {\n        display: 'flex'\n    },\n\n    listItemText: {\n        display: 'block'\n    },\n\n    sliderSpacing: {\n        width: '100%',\n        justifyContent: 'center',\n        verticalAlign: 'middle'\n    },\n\n    sliderLabelContainer: {\n        marginBottom: -16\n    },\n\n    sliderLabel: {\n        paddingRight: 10\n    },\n\n    editPopover: {\n        padding: 8\n    },\n\n    editContainer: {\n        paddingRight: 8,\n    }\n})\n\ninterface LabelSliderProps extends WithStyles<typeof styles> {\n    label: string,\n    labelSuffix: string,\n    value: number,\n    step: number,\n    min: number,\n    max: number,\n    editing: boolean,\n    onChange: Function,\n    onEditSave: (name: string, min: number, max: number) => void,\n    formatCallback: Function\n}\n\ninterface LabelSliderState {\n    value: number\n    label: string,\n    editLabel: string,\n    min: number,\n    editMin: number,\n    max: number,\n    editMax: number,\n    step: number,\n    menuOpen: boolean\n    editing: boolean\n    anchor?: HTMLElement\n    labelError: boolean,\n    minError: boolean,\n    maxError: boolean,\n}\n\nexport const LabelSlider = withStyles(styles)(class LabelSliderComponent extends Component<LabelSliderProps, LabelSliderState> {\n    private popoverRef: RefObject<any>\n\n    static defaultProps = {\n        editing: false\n    }\n\n    constructor(props: LabelSliderProps) {\n        super(props)\n        this.state = {\n            value: this.props.value,\n            label: this.props.label,\n            editLabel: this.props.label,\n            min: this.props.min,\n            editMin: this.props.min,\n            max: this.props.max,\n            editMax: this.props.max,\n            step: this.props.step,\n            menuOpen: false,\n            editing: this.props.editing,\n            labelError: false,\n            minError: false,\n            maxError: false\n        }\n\n        this.popoverRef = React.createRef()\n\n        this.handleOnChange = this.handleOnChange.bind(this)\n        this.handleKeyPress = this.handleKeyPress.bind(this)\n        this.openPopover = this.openPopover.bind(this)\n        this.closePopover = this.closePopover.bind(this)\n        this.saveForm = this.saveForm.bind(this)\n        this.cancelEdit = this.cancelEdit.bind(this)\n    }\n\n    getMinError(min: number, max: number): boolean {\n        return isNaN(min) || min < 1 || min > max\n    }\n\n    getMaxError(min: number, max: number): boolean {\n        return isNaN(max) || max < 1 || max < min\n    }\n\n    handleOnChange(event: any, newValue: number | number[]) {\n        if (typeof newValue === 'number') {\n            this.setState({\n                value: newValue\n            })\n        } else if (typeof newValue === 'object') {\n            this.setState({\n                value: newValue[0]\n            })\n        }\n\n        this.props.onChange(this.state.value)\n    }\n\n    handleKeyPress(event: KeyboardEvent) {\n        if (event.key === 'Enter') {\n            this.saveForm()\n        }\n    }\n\n    openPopover() {\n        this.setState({\n            editing: true,\n            editLabel: this.state.label,\n            editMin: this.state.min,\n            editMax: this.state.max\n        })\n    }\n\n    closePopover() {\n        this.setState({\n            editing: false\n        })\n    }\n\n    saveForm() {\n        if (!(this.state.labelError || this.state.minError || this.state.maxError)) {\n            let value: number\n            if (this.state.value > this.state.editMax) {\n                value = this.state.editMax\n            } else if (this.state.value < this.state.editMin) {\n                value = this.state.editMin\n            } else (\n                value = this.state.value\n            )\n\n            this.props.onEditSave(this.state.editLabel, this.state.editMin, this.state.editMax)\n\n            this.setState({\n                value: value,\n                label: this.state.editLabel,\n                min: this.state.editMin,\n                max: this.state.editMax\n            })\n\n            this.closePopover()\n        }\n\n    }\n\n    cancelEdit() {\n        this.setState({\n            labelError: false,\n            minError: false,\n            maxError: false\n        })\n        this.closePopover()\n    }\n\n    renderNormalView() {\n        const { classes } = this.props\n        return (\n            <>\n                <Box display='flex' flexDirection='row' flex='100%' alignItems='baseline' className={classes.sliderLabelContainer}>\n                    <Typography variant=\"subtitle1\" className={classes.sliderLabel}>{this.state.label}</Typography>\n                    <Typography variant=\"caption\" className={classes.sliderLabel}>({this.props.formatCallback(this.state.value)})</Typography>\n                </Box>\n                <Box display='flex' flex={1} flexDirection='row'>\n                    <Box m={1} flex='100%' display='flex' justifyContent='flex-start' alignItems='center'>\n                        <Slider\n                            value={this.state.value}\n                            step={this.state.step}\n                            min={this.state.min}\n                            max={this.state.max}\n                            onChange={this.handleOnChange}\n                            getAriaValueText={(value: number) => { return `${value}m` }}\n                            valueLabelDisplay=\"off\"\n                            aria-labelledby=\"break-length\"\n                        />\n                    </Box>\n                    <Box flex={1} display='flex' justifyContent='flex-end' alignItems='center'>\n                        <IconButton onClick={(event) => {\n                            this.openPopover()\n                        }}>\n                            <EditOutlinedIcon />\n                        </IconButton>\n                    </Box>\n                </Box>\n            </>\n        )\n    }\n\n    renderEditPopover() {\n        const classes = this.props.classes\n        return (\n            <Popover\n                open={this.state.editing}\n                anchorEl={this.popoverRef.current}\n                anchorOrigin={{ vertical: 'center', horizontal: 'left' }}\n                transformOrigin={{ vertical: 'center', horizontal: 'left' }}\n                onClose={this.cancelEdit}\n                onEscapeKeyDown={this.cancelEdit}\n            >\n                <Box display='flex' flex={1} flexDirection='row' className={classes.editPopover}>\n                    <Grid container>\n                        <Grid item xs={6} className={classes.editContainer}>\n                            <TextField\n                                fullWidth\n                                label=\"Name\"\n                                error={this.state.labelError}\n                                value={this.state.editLabel}\n                                margin='dense'\n                                size='small'\n                                variant='outlined'\n                                onChange={(event: ChangeEvent<HTMLTextAreaElement>) => {\n                                    this.setState({\n                                        editLabel: event.target.value,\n                                        labelError: (\n                                            event.target.value === ''\n                                        )\n                                    })\n                                }}\n                                onKeyPress={this.handleKeyPress}\n                            />\n                        </Grid>\n                        <Grid item xs={3} className={classes.editContainer}>\n                            <TextField\n                                label=\"Min\"\n                                error={this.state.minError}\n                                value={this.state.editMin}\n                                size='small'\n                                variant=\"outlined\"\n                                margin='dense'\n                                onChange={(event: ChangeEvent<HTMLTextAreaElement>) => {\n                                    const value = parseInt(event.target.value)\n                                    this.setState({\n                                        editMin: value || 0,\n                                        minError: this.getMinError(value, this.state.max),\n                                        maxError: this.getMaxError(value, this.state.max)\n                                    })\n                                }}\n                                onKeyPress={this.handleKeyPress}\n                            />\n                        </Grid>\n                        <Grid item xs={3} className={classes.editContainer}>\n                            <TextField\n                                label=\"Max\"\n                                error={this.state.maxError}\n                                value={this.state.editMax}\n                                size='small'\n                                variant=\"outlined\"\n                                margin='dense'\n                                onChange={(event: ChangeEvent<HTMLTextAreaElement>) => {\n                                    const value = parseInt(event.target.value)\n                                    this.setState({\n                                        editMax: value || 0,\n                                        minError: this.getMinError(this.state.min, value),\n                                        maxError: this.getMaxError(this.state.min, value)\n                                    })\n                                }}\n                                onKeyPress={this.handleKeyPress}\n                            />\n                        </Grid>\n                    </Grid>\n                    <Box flex={1} display='flex' justifyContent='flex-end' alignItems='center'>\n                        <IconButton onClick={this.saveForm}>\n                            <CheckIcon color='primary' />\n                        </IconButton>\n                        <IconButton onClick={this.cancelEdit}>\n                            <CancelIcon color='secondary' />\n                        </IconButton>\n                    </Box>\n                </Box>\n            </Popover>\n        )\n    }\n\n    render() {\n        return (\n            <div ref={this.popoverRef}> {/* So the popover can have its origin on the row */}\n                <Box display='flex' flexDirection='column'>\n                    {this.renderNormalView()}\n                    {this.renderEditPopover()}\n                </Box>\n            </div>\n        )\n    }\n});\n","export abstract class Subscribable {\n    private subscribers: Map<String, (() => void)> = new Map()\n\n    public subscribe(id: string, callback: () => void) {\n        this.subscribers.set(id, callback)\n    }\n\n    public unsubscribe(id: string) {\n        this.subscribers.delete(id)\n    }\n\n    protected updateSubscribers() {\n        this.subscribers.forEach((value, key, map) => {\n            console.log(`updating subscriber ${key}`)\n            value()\n        })\n    }\n}\n","import { Subscribable } from '../../data/Subscribable'\n\nexport class NotificationService extends Subscribable {\n    private static _instance: NotificationService;\n    private _desktopNotificationSupport: boolean = false\n\n    public static get instance(): NotificationService {\n        return this._instance || (this._instance = new this())\n    }\n\n    private constructor() {\n        super()\n        this._desktopNotificationSupport = 'Notification' in window\n    }\n\n    public get desktopNotificationSupport(): boolean {\n        return this._desktopNotificationSupport\n    }\n\n    public get desktopNotificationEnabled() {\n        return this.desktopNotificationSupport && Notification.permission === 'granted'\n    }\n\n    public requestDesktopNotificationPermissions() {\n        if (this.desktopNotificationSupport && Notification.permission === 'default') {\n            Notification.requestPermission()\n                .then((value) => { this.updateSubscribers() })\n        }\n    }\n\n    public showNotification(\n        title: string,\n        options: NotificationOptions,\n        onclick: (notification: Notification, event: Event) => void = (\n            notification: Notification, event: Event\n        ) => {\n            notification.close(); window.focus()\n        }\n    ) {\n        let notification = new Notification(\n            title, options\n        )\n\n        notification.onclick = (event: Event) => (onclick(notification, event))\n    }\n}\n","import React, { Component } from 'react';\n\nimport {\n    createStyles,\n    Drawer,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    ListItemText,\n    Switch,\n    Theme,\n    WithStyles, withStyles\n} from '@material-ui/core';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport { NotificationService } from '../services/notification';\nimport App from '../App';\n\nconst styles = (theme: Theme) => createStyles({\n    sideBar: {\n        width: 250\n    }\n})\n\nconst notificationService: NotificationService = NotificationService.instance\n\ninterface SidebarProps extends WithStyles<typeof styles> {\n    onOpen: Function,\n    onClose: Function,\n    resetCallback: () => void\n}\n\ninterface SidebarState {\n    open: boolean,\n    notificationsEnabled: boolean\n}\n\nexport const Sidebar = withStyles(styles)(class SidebarComponent extends Component<SidebarProps, SidebarState> {\n    constructor(props: SidebarProps) {\n        super(props)\n        this.state = {\n            open: false,\n            notificationsEnabled: notificationService.desktopNotificationEnabled\n        }\n\n        // this.refreshNotificationState = this.refreshNotificationState.bind(this)\n    }\n\n    refreshNotificationState() {\n        if (this.state.notificationsEnabled !== notificationService.desktopNotificationEnabled) {\n            this.setState({\n                notificationsEnabled: notificationService.desktopNotificationEnabled\n            })\n        }\n    }\n\n    componentDidUpdate() {\n        this.refreshNotificationState()\n    }\n\n    componentDidMount() {\n        notificationService.subscribe(this.constructor.name, () => {\n            this.refreshNotificationState()\n        })\n    }\n\n    componentWillUnmount() {\n        notificationService.unsubscribe(this.constructor.name)\n    }\n\n    render() {\n        const classes = this.props.classes\n        return (\n            <Drawer\n                anchor='left'\n                open={this.props.onOpen()}\n                onClose={() => this.props.onClose()}\n            >\n                <div className={classes.sideBar} >\n                    <List>\n                        <ListItem\n                            button\n                            onClick={() => { notificationService.requestDesktopNotificationPermissions() }}\n                        >\n                            <ListItemIcon><NotificationsIcon /></ListItemIcon>\n                            <ListItemText primary=\"Notifications\" />\n                            <ListItemSecondaryAction>\n                                <Switch\n                                    edge=\"end\"\n                                    onClick={() => { notificationService.requestDesktopNotificationPermissions() }}\n                                    checked={this.state.notificationsEnabled}\n                                    inputProps={{ 'aria-labelledby': 'switch-list-label-bluetooth' }}\n                                    onFocus={() => this.refreshNotificationState()}\n                                    onBlur={() => this.refreshNotificationState()}\n                                    disabled={!notificationService.desktopNotificationSupport}\n                                />\n                            </ListItemSecondaryAction>\n                        </ListItem>\n                        <ListItem\n                            button\n                            onClick={this.props.resetCallback}\n                        >\n                            <ListItemText primary='Reset to defaults' />\n                        </ListItem>\n                    </List>\n                </div>\n            </Drawer>\n        )\n    }\n\n});\n","import { Subscribable } from \"./Subscribable\";\n\nconst DEFAULT_VALUE = 0\nconst DEFAULT_MIN = 1\nconst DEFAULT_MAX = 90\nconst DEFAULT_INTERVAL_MS = 1000\n\nexport interface CountdownJsonObject {\n    startTime?: any,\n    endTime?: any,\n    running: any,\n    secondsLeft: any,\n    name: string,\n    min: number,\n    max: number,\n    value: number,\n    intervalMs: number,\n}\n\nexport class Countdown extends Subscribable {\n    private timeout: any\n\n    private startTime?: number = undefined;\n    private _endTime?: number = undefined;\n\n    private _running: boolean = false\n    private _secondsLeft: number = 0;\n\n    public constructor(\n        private _name: string = 'NEW',\n        private _min: number = 1,\n        private _max: number = 90,\n        private _value: number = 0,\n        private _intervalMs: number = 1000,\n    ) {\n        super()\n    }\n\n    public loadFromJsonObject(jsonObject: CountdownJsonObject): Countdown {\n        this.startTime = jsonObject.startTime\n        this._endTime = jsonObject.endTime\n        this._running = jsonObject.running\n        this._secondsLeft = jsonObject.secondsLeft\n        this._name = jsonObject.name\n        this._min = jsonObject.min\n        this._max = jsonObject.max\n        this._value = jsonObject.value\n        this._intervalMs = jsonObject.intervalMs\n\n        return this\n    }\n\n    public exportToJsonObject(): CountdownJsonObject {\n        return {\n            startTime: this.startTime,\n            endTime: this.endTime,\n            running: this.running,\n            secondsLeft: this.secondsLeft,\n            name: this.name,\n            min: this.min,\n            max: this.max,\n            value: this.value,\n            intervalMs: this.intervalMs,\n        }\n    }\n\n    public get name(): string { return this._name }\n    public set name(name: string) { this._name = name }\n\n    public get secondsLeft(): number { return this._secondsLeft }\n\n    public get running(): boolean { return this._running }\n\n    public get value(): number { return this._value ? this._value : DEFAULT_VALUE }\n    public set value(value: number) { this._value = value }\n\n    public get min(): number { return this._min ? this._min : DEFAULT_MIN }\n    public set min(min: number) { this._min = min }\n\n    public get max(): number { return this._max ? this._max : DEFAULT_MAX }\n    public set max(max: number) { this._max = max }\n\n    public get intervalMs(): number { return this._intervalMs ? this._intervalMs : DEFAULT_INTERVAL_MS }\n\n    public get endTime(): number | undefined { return this._endTime }\n\n    start() {\n        this._running = true\n        this.startTime = Date.now()\n        this._endTime = this.startTime + (this.value * 60 * 1000)\n\n        this.update()\n    }\n\n    stop() {\n        this._running = false\n        this.update()\n    }\n\n    update() {\n        if (this.endTime !== undefined) {\n            this._secondsLeft = Math.floor((this.endTime - Date.now()) / 1000)\n            if (this._running && this.secondsLeft > 0) {\n                this.timeout = setTimeout(() => this.update(), this.intervalMs)\n            } else {\n                this._running = false\n                this._secondsLeft = 0\n                clearTimeout(this.timeout)\n            }\n        }\n\n        this.updateSubscribers()\n    }\n}\n","\nexport class TimeFormat {\n    static seconds(timerSeconds: number): string {\n        let hours = Math.floor(timerSeconds / 60 / 60)\n        let minutes = Math.floor((timerSeconds - (hours * 60 * 60)) / 60)\n        let seconds = Math.floor(timerSeconds - (hours * 60 * 60) - (minutes * 60))\n\n        let returnStr: string[] = []\n\n        if (hours > 0) {\n            returnStr.push(`${hours}h`)\n        }\n\n        if (minutes > 0) {\n            returnStr.push(`${minutes}m`)\n        }\n\n        returnStr.push(`${seconds}s`)\n\n        return returnStr.join(' ')\n    }\n\n    static minutes(timerMinutes: number): string {\n        let hours = Math.floor(timerMinutes / 60)\n        let minutes = timerMinutes - (hours * 60)\n\n        let returnStr: string[] = []\n\n        if (hours > 0) {\n            returnStr.push(`${hours}h`)\n        }\n\n        returnStr.push(`${minutes}m`)\n\n        return returnStr.join(' ')\n    }\n}\n","import React, { Component } from 'react';\n\nimport {\n    AppBar,\n    Backdrop,\n    Box,\n    Card,\n    createStyles,\n    Fade,\n    Grid,\n    IconButton,\n    Modal,\n    Paper,\n    Theme,\n    Toolbar,\n    Typography,\n    WithStyles, withStyles\n} from '@material-ui/core';\nimport Button from '@material-ui/core/Button/Button';\n\nimport './App.css';\nimport { LabelSlider } from './components/LabelSlider';\nimport { Sidebar } from './components/Sidebar';\nimport { Countdown, CountdownJsonObject } from './data/Countdown'\nimport { TimeFormat } from './data/format/Time'\n\nimport { NotificationService } from './services/notification'\n\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport AddIcon from '@material-ui/icons/Add';\n\nconst styles = (theme: Theme) => createStyles({\n    root: {\n        flexGrow: 1,\n    },\n\n    fillWidth: {\n        width: '100%',\n    },\n\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n\n    title: {\n        flexGrow: 1,\n    },\n\n    gridContainer: {\n        flexGrow: 1,\n        padding: 8,\n    },\n\n    paperContainer: {\n        padding: 8\n    },\n\n    sliderBox: {\n        paddingTop: 16\n    },\n\n    popperStyle: {\n        width: '100%',\n    },\n\n    popperCardStyle: {\n        paddingLeft: theme.spacing(1),\n        backgroundColor: theme.palette.grey[50],\n        margin: 8,\n    },\n\n    popperContentsStyle: {\n        marginRight: 8\n    },\n\n    modal: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        padding: 8,\n        border: 'none'\n    },\n});\n\ninterface AppProps extends WithStyles<typeof styles> { }\n\ninterface AppState {\n    workLength: number,\n    breakLength: number,\n    running: boolean,\n    secondsLeft: number,\n    currentCountdownIndex: number,\n    countdowns: Countdown[],\n    sidebarOpen: boolean,\n    notificationSupport: boolean,\n    endTime?: number,\n    editingOrder: boolean,\n    confirmDeleteOpen: boolean\n    confirmDeleteIndex: number\n    confirmDeleteName: string\n    confirmResetOpen: boolean\n}\n\nconst APP_TITLE: string = 'Task Timer'\nconst DEFAULT_COUNTDOWNS: Countdown[] = [\n    new Countdown('Work', 1, 90, 50),\n    new Countdown('Break time', 1, 15, 10),\n]\n\nconst notificationService: NotificationService = NotificationService.instance\n\nconst App = withStyles(styles)(class AppComponent extends Component<AppProps, AppState> {\n    public sliderRefs: any[] = []\n\n    constructor(props: AppProps) {\n        super(props)\n\n        this.state = {\n            workLength: 50,\n            breakLength: 10,\n            running: false,\n            secondsLeft: 0,\n            sidebarOpen: false,\n            notificationSupport: \"Notification\" in window,\n            countdowns: DEFAULT_COUNTDOWNS,\n            currentCountdownIndex: 0,\n            editingOrder: false,\n            confirmDeleteOpen: false,\n            confirmDeleteIndex: 0,\n            confirmDeleteName: '',\n            confirmResetOpen: false,\n        }\n\n        this.handleStartStopOnClick = this.handleStartStopOnClick.bind(this)\n        this.updateCountdownState = this.updateCountdownState.bind(this)\n        this.updateSubscriber = this.updateSubscriber.bind(this)\n        this.saveCountdownsToLocalStorage = this.saveCountdownsToLocalStorage.bind(this)\n        this.swapCountdowns = this.swapCountdowns.bind(this)\n        this.deleteCountdown = this.deleteCountdown.bind(this)\n    }\n\n    componentDidMount() {\n        notificationService.requestDesktopNotificationPermissions()\n\n        // Load from state\n        const currentCountdownIndex = localStorage.getItem('currentCountdownIndex')\n        const countdownsStr = localStorage.getItem('countdowns')\n\n        if (countdownsStr !== null) {\n            const countdowns = JSON.parse(countdownsStr).map((countdownJsonObject: CountdownJsonObject) => {\n                return new Countdown().loadFromJsonObject(countdownJsonObject)\n            })\n\n            this.setState({\n                countdowns: countdowns,\n            })\n\n            const runningCountdown: Countdown = countdowns.filter((countdown: Countdown) => { return countdown.running })[0]\n\n            if (runningCountdown) {\n                runningCountdown.update()\n                runningCountdown.subscribe(this.constructor.name, this.updateSubscriber)\n                this.updateCountdownState(runningCountdown)\n            }\n        }\n\n        this.setState({\n            currentCountdownIndex: currentCountdownIndex ? parseInt(currentCountdownIndex) : this.state.currentCountdownIndex\n        })\n    }\n\n    get currentCountdown(): Countdown {\n        return this.state.countdowns[this.state.currentCountdownIndex]\n    }\n\n    get nextCountdownIndex(): number {\n        return (this.state.currentCountdownIndex + 1) % this.state.countdowns.length\n    }\n\n    swapCountdowns(a: number, b: number) {\n        let lower: number\n        let higher: number\n        if (a < b) {\n            lower = a\n            higher = b\n        } else if (b < a) {\n            lower = b\n            higher = a\n        } else {\n            throw new RangeError('Cannot swap an element with itself')\n        }\n\n        console.log({\n            lower: lower,\n            higher: higher\n        })\n\n        if (this.state.currentCountdownIndex === lower) this.setState({ currentCountdownIndex: higher })\n        else if (this.state.currentCountdownIndex === higher) this.setState({ currentCountdownIndex: lower })\n\n        let newCountdowns = [\n            ...this.state.countdowns.slice(0, lower),\n            this.state.countdowns[higher],\n            this.state.countdowns[lower],\n            ...this.state.countdowns.slice(higher + 1)\n        ]\n\n        console.log({\n            currentCountdowns: this.state.countdowns,\n            newCountdowns: newCountdowns\n        })\n\n        this.setState({\n            countdowns: newCountdowns\n        })\n    }\n\n    deleteCountdown(index: number) {\n        let newCountdowns = [\n            ...this.state.countdowns.slice(0, index),\n            ...this.state.countdowns.slice(index + 1)\n        ]\n\n        this.saveCountdownsToLocalStorage(newCountdowns)\n\n        this.setState({\n            countdowns: newCountdowns\n        })\n    }\n\n    getNextCountdown(): Countdown {\n        return this.state.countdowns[this.nextCountdownIndex]\n    }\n\n    updateCountdownState(countdown: Countdown) {\n        this.setState({\n            secondsLeft: countdown.secondsLeft,\n            running: countdown.running\n        })\n\n        this.saveCountdownsToLocalStorage()\n    }\n\n    saveCountdownsToLocalStorage(countdowns: Countdown[] = this.state.countdowns) {\n        localStorage.setItem(\n            'countdowns',\n            JSON.stringify(\n                countdowns.map((countdown) => countdown.exportToJsonObject())\n            )\n        )\n    }\n\n    updateSubscriber() {\n        this.updateCountdownState(this.currentCountdown)\n\n        if (!this.currentCountdown.running) {\n            notificationService.showNotification(\n                APP_TITLE,\n                {\n                    body: `${this.currentCountdown.name} done`\n                }\n            )\n            this.currentCountdown.unsubscribe(this.constructor.name)\n        }\n    }\n\n    startTimer() {\n        this.currentCountdown.subscribe(this.constructor.name, this.updateSubscriber)\n        this.currentCountdown.start()\n    }\n\n    stopTimer() {\n        this.currentCountdown.unsubscribe(this.constructor.name)\n        this.currentCountdown.stop()\n        this.updateCountdownState(this.currentCountdown)\n\n        this.setState({\n            currentCountdownIndex: this.nextCountdownIndex\n        })\n\n        localStorage.setItem('currentCountdownIndex', this.nextCountdownIndex.toString())\n    }\n\n    handleStartStopOnClick() {\n        if (!this.state.running) {\n            this.startTimer()\n        } else {\n            this.stopTimer()\n        }\n    }\n\n    renderSliders() {\n        const classes = this.props.classes\n        let elements: JSX.Element[] = []\n\n        for (let i in this.state.countdowns) {\n            const index: number = parseInt(i)\n            const countdown = this.state.countdowns[i]\n            const upDisabled = index === 0\n            const downDisabled = index === this.state.countdowns.length - 1\n\n            if (this.state.editingOrder) {\n                elements.push(\n                    <Grid item key={countdown.name}>\n                        <Card className={classes.popperCardStyle}>\n                            <Box display='flex' flexDirection='row'>\n                                <Box flex='100%' display='flex' justifyContent='left' alignItems='center'>\n                                    <Typography variant='button'>\n                                        {countdown.name}\n                                    </Typography>\n                                </Box>\n                                <Box flex={1} display='flex' justifyContent='right' justifyItems='right'>\n                                    <IconButton\n                                        color='primary'\n                                        disabled={upDisabled}\n                                        onClick={() => {\n                                            this.swapCountdowns(index, index - 1)\n                                        }}\n                                    >\n                                        <ArrowUpwardIcon />\n                                    </IconButton>\n                                    <IconButton\n                                        color='primary'\n                                        disabled={downDisabled}\n                                        onClick={() => {\n                                            this.swapCountdowns(index, index + 1)\n                                        }}\n                                    >\n                                        <ArrowDownwardIcon />\n                                    </IconButton>\n                                    <IconButton\n                                        color='secondary'\n                                        onClick={() => {\n                                            this.setState({\n                                                confirmDeleteOpen: true,\n                                                confirmDeleteIndex: index,\n                                                confirmDeleteName: countdown.name\n                                            })\n                                        }}\n                                    >\n                                        <DeleteOutlineIcon />\n                                    </IconButton>\n                                </Box>\n                            </Box>\n                        </Card>\n                    </Grid>\n                )\n            } else {\n                elements.push(\n                    <Grid item key={countdown.name}>\n                        <LabelSlider\n                            label={countdown.name}\n                            labelSuffix=\"m\"\n                            value={countdown.value}\n                            step={1}\n                            min={countdown.min}\n                            max={countdown.max}\n                            onChange={(value: number, thisCountdown: Countdown = countdown) => {\n                                thisCountdown.value = value\n                                this.saveCountdownsToLocalStorage()\n                            }}\n                            onEditSave={(name: string, min: number, max: number) => {\n                                countdown.name = name\n                                countdown.min = min\n                                countdown.max = max\n                                this.saveCountdownsToLocalStorage()\n                            }}\n                            formatCallback={(value: number) => TimeFormat.minutes(value)}\n                        />\n                    </Grid>\n                )\n            }\n        }\n\n        return elements\n    }\n\n    render() {\n        const classes = this.props.classes\n        return (\n            <div className={classes.root}>\n                <AppBar position=\"static\">\n                    <Toolbar>\n                        <IconButton\n                            edge=\"start\"\n                            className={classes.menuButton}\n                            color=\"inherit\" aria-label=\"menu\"\n                            onClick={() => {\n                                this.setState({ sidebarOpen: true })\n                            }}\n                        >\n                            <MenuIcon />\n                        </IconButton>\n                        <Typography variant=\"h6\" className={classes.title}>\n                            {APP_TITLE}\n                        </Typography>\n                    </Toolbar>\n                </AppBar>\n                <Sidebar\n                    onOpen={() => this.state.sidebarOpen}\n                    onClose={() => {\n                        this.setState({ sidebarOpen: false })\n                    }}\n                    resetCallback={() => {\n                        this.setState({\n                            confirmResetOpen: true,\n                            sidebarOpen: false\n                        })\n                    }}\n                />\n                <Modal\n                    open={this.state.confirmResetOpen}\n                    onClose={() => {\n                        this.setState({\n                            confirmResetOpen: false\n                        })\n                    }}\n                    closeAfterTransition\n                    className={classes.modal}\n                    BackdropComponent={Backdrop}\n                    BackdropProps={{\n                        timeout: 500,\n                    }}\n                >\n                    <Fade in={this.state.confirmResetOpen}>\n                        <Card className={classes.modal}>\n                            <Grid container direction='column'>\n                                <Grid item xs alignContent='center' alignItems='center'>\n                                    <Typography variant='h4'>Are you sure?</Typography>\n                                </Grid>\n                                <Grid item xs alignContent='center' alignItems='center'>\n                                    <Typography variant='subtitle1'>Resetting your countdowns cannot be undone</Typography><br />\n                                </Grid>\n                                <Button\n                                    color='secondary'\n                                    variant='contained'\n                                    onClick={() => {\n                                        this.setState({\n                                            confirmResetOpen: false,\n                                            countdowns: DEFAULT_COUNTDOWNS\n                                        })\n\n                                        this.saveCountdownsToLocalStorage(DEFAULT_COUNTDOWNS)\n                                    }}\n                                >\n                                    <Grid item xs>\n                                        Yes, reset\n                                    </Grid>\n                                </Button>\n                                {/* <p id=\"transition-modal-description\">react-transition-group animates me.</p> */}\n                            </Grid>\n                        </Card>\n                    </Fade>\n                </Modal>\n                <Grid container className={classes.gridContainer} spacing={2}>\n                    <Grid item xs={12} md={8} lg={4}> <Paper className={classes.paperContainer}>\n                        <Grid container direction=\"column\" spacing={2}>\n                            <Grid item>\n                                <Box display='flex' flexDirection=\"row\">\n                                    <Box flex='100%'>\n                                        <Typography variant=\"h3\"> Timers </Typography>\n                                    </Box>\n                                    <Box flex={1}>\n                                        <IconButton\n                                            disabled={this.state.editingOrder}\n                                            onClick={() => {\n                                                let newCountdowns = [\n                                                    ...this.state.countdowns,\n                                                    new Countdown(`NEW ${this.state.countdowns.length}`)\n                                                ]\n\n                                                this.saveCountdownsToLocalStorage(newCountdowns)\n\n                                                this.setState({\n                                                    countdowns: newCountdowns\n                                                })\n                                            }}\n                                        >\n                                            <AddIcon color={this.state.editingOrder ? 'disabled' : 'primary'} />\n                                        </IconButton>\n                                    </Box>\n                                    <Box flex={1}>\n                                        <IconButton\n                                            onClick={() => {\n                                                if (this.state.editingOrder) { // if we are leaving edit mode\n                                                    this.saveCountdownsToLocalStorage()\n                                                }\n\n                                                this.setState({\n                                                    editingOrder: !this.state.editingOrder\n                                                })\n                                            }}\n                                        >\n                                            <SettingsIcon color={this.state.editingOrder ? 'primary' : 'action'} />\n                                        </IconButton>\n                                    </Box>\n                                </Box>\n                            </Grid>\n                            <Grid item>\n                                <Modal\n                                    open={this.state.confirmDeleteOpen}\n                                    onClose={() => {\n                                        this.setState({\n                                            confirmDeleteOpen: false\n                                        })\n                                    }}\n                                    closeAfterTransition\n                                    className={classes.modal}\n                                    BackdropComponent={Backdrop}\n                                    BackdropProps={{\n                                        timeout: 500,\n                                    }}\n                                >\n                                    <Fade in={this.state.confirmDeleteOpen}>\n                                        <Card className={classes.modal}>\n                                            <Grid container direction='column'>\n                                                <Grid item xs alignContent='center' alignItems='center'>\n                                                    <Typography variant='h4'>Are you sure?</Typography>\n                                                </Grid>\n                                                <Grid item xs alignContent='center' alignItems='center'>\n                                                    <Typography variant='subtitle1'>Deleting this cannot be undone</Typography><br />\n                                                </Grid>\n                                                <Button\n                                                    color='secondary'\n                                                    variant='contained'\n                                                    onClick={() => {\n                                                        this.deleteCountdown(this.state.confirmDeleteIndex)\n                                                        this.setState({\n                                                            confirmDeleteOpen: false\n                                                        })\n                                                    }}\n                                                >\n                                                    <Grid item xs>\n                                                        Yes, delete {this.state.confirmDeleteName}\n                                                    </Grid>\n                                                </Button>\n                                                {/* <p id=\"transition-modal-description\">react-transition-group animates me.</p> */}\n                                            </Grid>\n                                        </Card>\n                                    </Fade>\n                                </Modal>\n                                {this.renderSliders()}\n                            </Grid>\n                            <Grid item>\n                                <Button variant=\"contained\" className={classes.fillWidth} onClick={this.handleStartStopOnClick}>\n                                    {this.state.running ? 'Stop' : 'Start'}\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    </Paper> </Grid>\n                    <Grid item xs>\n                        <Paper className={classes.paperContainer}>\n                            <Typography variant=\"h5\">{this.state.running ? \"Running\" : \"On deck\"}: {this.currentCountdown.name}</Typography>\n                            <Typography variant=\"h6\">Time left {TimeFormat.seconds(this.state.secondsLeft)}</Typography>\n                            <Typography variant=\"caption\">Up next: {this.getNextCountdown().name}</Typography>\n                        </Paper>\n                    </Grid>\n                </Grid>\n            </div>\n        );\n    }\n});\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}