{"version":3,"sources":["components/label-slider/index.tsx","data/countdown/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LabelSlider","withStyles","theme","createStyles","sliderSpacing","paddingLeft","paddingRight","props","state","value","handleOnChange","bind","event","newValue","this","setState","onChange","classes","variant","id","gutterBottom","label","labelSuffix","className","Slider","marks","step","min","max","getAriaValueText","valueLabelDisplay","aria-labelledby","Component","Countdown","name","next","timer","defaultCountdowns","setNext","App","root","flexGrow","fillWidth","width","menuButton","marginRight","spacing","title","gridContainer","padding","paperContainer","sliderBox","paddingTop","workLength","breakLength","running","secondsLeft","currentCountdown","countdowns","getButtonText","handleStartStopOnClick","updateSecondsLeft","timerSeconds","hours","Math","floor","minutes","seconds","returnStr","push","join","undefined","endTime","newSecondsLeft","Date","now","setUpdateTimer","console","log","getNextCountdown","clearTimeout","setTimeout","newEndTime","map","countdown","Grid","item","thisCountdown","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","container","xs","lg","Paper","direction","TextField","renderSliders","onClick","getTimerText","defaultProps","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.00b6ccae.chunk.js","sourcesContent":["import { createStyles, Slider, Theme, WithStyles, withStyles } from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography/Typography\";\nimport React, { Component } from \"react\";\n\nconst styles = (theme: Theme) => createStyles({\n    sliderSpacing: {\n        paddingLeft: 8,\n        paddingRight: 8,\n    }\n})\n\ninterface LabelSliderProps extends WithStyles<typeof styles> {\n    label: string,\n    labelSuffix: string,\n    value: number,\n    step: number,\n    min: number,\n    max: number,\n    onChange: Function\n}\n\ninterface LabelSliderState {\n    value: number\n}\n\nexport const LabelSlider = withStyles(styles)(class LabelSliderComponent extends Component<LabelSliderProps, LabelSliderState> {\n    constructor(props: LabelSliderProps) {\n        super(props)\n        this.state = {\n            value: this.props.value\n        }\n\n        this.handleOnChange = this.handleOnChange.bind(this)\n    }\n\n    handleOnChange(event: any, newValue: number | number[]) {\n        if (typeof newValue === 'number') {\n            this.setState({\n                value: newValue\n            })\n        } else if (typeof newValue === 'object') {\n            this.setState({\n                value: newValue[0]\n            })\n        }\n\n        this.props.onChange(this.state.value)\n    };\n\n\n    render() {\n        const { classes } = this.props\n        return(\n            <div>\n                <Typography variant=\"caption\" id='break-length' gutterBottom>{this.props.label} ({this.state.value}{this.props.labelSuffix})</Typography>\n                <div className={classes.sliderSpacing}>\n                    <Slider\n                        marks\n                        value={this.state.value}\n                        step={this.props.step}\n                        min={this.props.min}\n                        max={this.props.max}\n                        onChange={this.handleOnChange}\n                        getAriaValueText={(value: number) => {return `${value}m`}}\n                        valueLabelDisplay=\"off\"\n                        aria-labelledby=\"break-length\"\n                    />\n                </div>\n            </div>\n        )\n    }\n});\n","export class Countdown {\n    constructor(\n        public name: string,\n        public min: number,\n        public max: number,\n        public value: number,\n        public next?: Countdown\n    ) { }\n\n    setNext(timer: Countdown) {\n        this.next = timer\n    }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport Button from '@material-ui/core/Button/Button';\nimport { AppBar, createStyles, Grid, IconButton, Paper, TextField, Theme, Toolbar, Typography, WithStyles, withStyles } from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { LabelSlider } from './components/label-slider';\n\nimport { Countdown } from './data/countdown'\n\nconst styles = (theme: Theme) => createStyles({\n  root: {\n    flexGrow: 1,\n  },\n\n  fillWidth: {\n    width: '100%',\n  },\n\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n\n  title: {\n    flexGrow: 1,\n  },\n\n  gridContainer: {\n    flexGrow: 1,\n    padding: 8,\n  },\n\n  paperContainer: {\n    padding: 8\n  },\n\n  sliderBox: {\n    paddingTop: 16\n  }\n});\n\ninterface AppProps extends WithStyles<typeof styles> {\n  countdowns: Countdown[]\n}\n\ninterface AppState {\n  workLength: number,\n  breakLength: number,\n  running: boolean,\n  secondsLeft: number,\n  currentCountdown: Countdown,\n  endTime?: number,\n}\n\nconst defaultCountdowns: Countdown[] = [\n  new Countdown('Work', 5, 90, 50),\n  new Countdown('Break', 5, 15, 10),\n]\n\ndefaultCountdowns[0].setNext(defaultCountdowns[1])\ndefaultCountdowns[1].setNext(defaultCountdowns[0])\n\nconst App = withStyles(styles)(class AppComponent extends Component<AppProps, AppState> {\n  static defaultProps = {\n    countdowns: defaultCountdowns\n  }\n\n  private timer: any;\n\n  constructor(props: AppProps) {\n    super(props)\n    this.state = {\n      workLength: 50,\n      breakLength: 10,\n      running: false,\n      secondsLeft: 0,\n      currentCountdown: this.props.countdowns[0]\n    }\n\n    this.getButtonText = this.getButtonText.bind(this)\n    this.handleStartStopOnClick = this.handleStartStopOnClick.bind(this)\n    this.updateSecondsLeft = this.updateSecondsLeft.bind(this)\n  }\n\n  getTimerText(timerSeconds: number): string {\n    let hours = Math.floor(timerSeconds / 60 / 60)\n    let minutes = Math.floor((timerSeconds - (hours * 60 * 60)) / 60)\n    let seconds = Math.floor(timerSeconds - (hours * 60 * 60) - (minutes * 60))\n\n    let returnStr: string[] = []\n\n    if (hours > 0) {\n      returnStr.push(`${hours}h`)\n    }\n\n    if (minutes > 0) {\n      returnStr.push(`${minutes}m`)\n    }\n\n    returnStr.push(`${seconds}s`)\n\n    return returnStr.join(' ')\n  }\n\n  getButtonText() {\n    if (this.state.running) {\n      return \"Stop\"\n    } else {\n      return \"Start\"\n    }\n  }\n\n  getNextCountdown(): Countdown {\n    if (this.state.currentCountdown.next !== undefined) {\n      return this.state.currentCountdown.next\n    }\n\n    return this.state.currentCountdown\n  }\n\n  updateSecondsLeft() {\n    if (this.state.endTime !== undefined) {\n      let newSecondsLeft = (this.state.endTime - Date.now()) / 1000\n      if (this.state.running && newSecondsLeft > 0) {\n        this.setState({\n          secondsLeft: Math.floor(newSecondsLeft)\n        })\n\n        this.setUpdateTimer()\n      } else {\n        console.log('Stopping, next timer:', this.getNextCountdown())\n        this.setState({\n          running: false,\n          secondsLeft: 0,\n          currentCountdown: this.getNextCountdown()\n        })\n\n        clearTimeout(this.timer)\n      }\n    } else {\n      return 0\n    }\n  }\n\n  setUpdateTimer() {\n    this.timer = setTimeout(() => { this.updateSecondsLeft() }, 1000)\n  }\n\n  clearUpdateTimer() {\n    clearTimeout(this.timer)\n  }\n\n  handleStartStopOnClick() {\n    if (!this.state.running) {\n      this.setState({\n        running: true\n      })\n\n      let now = Date.now()\n      let newEndTime = now + (this.state.currentCountdown.value * 60 * 1000)\n      let newSecondsLeft = this.state.currentCountdown.value * 60\n\n      this.setState({\n        endTime: newEndTime,\n        secondsLeft: newSecondsLeft\n      })\n\n      this.setUpdateTimer()\n    } else {\n      this.setState({\n        running: false,\n        secondsLeft: 0\n      })\n    }\n  }\n\n  renderSliders() {\n    return this.props.countdowns.map((countdown) =>\n      <Grid item key={countdown.name}>\n        <LabelSlider\n          label={countdown.name}\n          labelSuffix=\"m\"\n          value={countdown.value}\n          step={1}\n          min={countdown.min}\n          max={countdown.max}\n          onChange={(value: number, thisCountdown: Countdown = countdown) => {\n            thisCountdown.value = value\n          }}\n        />\n      </Grid>\n    )\n  }\n\n  render() {\n\n    const classes = this.props.classes\n\n    return (\n      <div className={classes.root}>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n              <MenuIcon />\n            </IconButton>\n            <Typography variant=\"h6\" className={classes.title}>\n              Start a new task\n            </Typography>\n            <Button color=\"inherit\">Test</Button>\n          </Toolbar>\n        </AppBar>\n        <Grid container className={classes.gridContainer} spacing={2}>\n          <Grid item xs={12} lg={2}> <Paper className={classes.paperContainer}>\n            <Grid container direction=\"column\" spacing={2}>\n              <Grid item>\n                <Typography variant=\"h5\">\n                  Timer parameters\n                </Typography>\n              </Grid>\n              <Grid item>\n                <TextField label=\"Task Name\" /><br />\n              </Grid>\n              {this.renderSliders()}\n              <Grid item>\n                <Button variant=\"contained\" className={classes.fillWidth} onClick={this.handleStartStopOnClick}>\n                  {this.getButtonText()}\n                </Button>\n              </Grid>\n            </Grid>\n          </Paper> </Grid>\n          <Grid item xs>\n            <Paper className={classes.paperContainer}>\n              <Typography variant=\"h5\">{this.state.running ? \"Running\" : \"On deck\"}: {this.state.currentCountdown.name}</Typography>\n              <Typography variant=\"h6\">Time left {this.getTimerText(this.state.secondsLeft)}</Typography>\n              <Typography variant=\"caption\">Up next: {this.getNextCountdown().name}</Typography>\n            </Paper>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n});\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}